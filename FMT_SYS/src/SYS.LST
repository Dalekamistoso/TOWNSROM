     1                                  ; nasmw -O3 -f bin sys.asm -o fmt_sys6.prg
     2                                  ; version 2003.03.04.1
     3                                  ;---------------------------------------------------------------------
     4                                  ;
     5                                  ; FM TOWNS 互換 ROM シリーズ
     6                                  ;
     7                                  ; FMT_SYS.ROM : メインパート
     8                                  ; 0FFFFC000h - 0FFFFFFFFh
     9                                  ;
    10                                  ; by Kasanova
    11                                  ;
    12                                  ;---------------------------------------------------------------------
    13                                  ; FMT_SYS.ROM の構造(本物の)
    14                                  ; 0FFFC0000h - 0FFFDFFFFh : 12ドットフォント
    15                                  ;                           機種によってはALL FFh、起動ロゴ(パックド
    16                                  ;                           ピクセル方式)がある機種もあり
    17                                  ; 0FFFE0000h - 0FFFE7FFFh : EXT-BOOT(32ビットプログラム)
    18                                  ; 0FFFE8000h - 0FFFEFFFFh : システムアイコン
    19                                  ; 0FFFF0000h - 0FFFF7FFFh : 何かのパターン?
    20                                  ; 0FFFF8000h - 0FFFFAFFFh ; 起動ロゴ(プレーン方式)
    21                                  ;                           機種によっては Extention BIOS
    22                                  ; 0FFFFB000h - 0FFFFBFFFh : ブート時に使うアイコン
    23                                  ; 0FFFFC000h - 0FFFFFFFFh ; 16ビットプログラム
    24                                  ;---------------------------------------------------------------------
    25                                  ; FMT_SYS.ROM の構造(この互換ROMの)
    26                                  ; 0FFFC0000h - 0FFFDFFFFh : 12ドットフォント
    27                                  ; 0FFFE0000h - 0FFFE7FFFh : EXT-BOOT(32ビットプログラム)、まだ使っていない
    28                                  ; 0FFFE8000h - 0FFFEFFFFh : システムアイコン
    29                                  ; 0FFFF0000h - 0FFFF7FFFh : ダミーデータ(0ffh)
    30                                  ; 0FFFF8000h - 0FFFFBBFFh ; 起動ロゴ(プレーン方式、4プレーン分)
    31                                  ; 0FFFFBC00h - 0FFFFBFFFh : ブート時に使うアイコン
    32                                  ; 0FFFFC000h - 0FFFFFFFFh ; 16ビット+32ビットプログラム
    33                                  ;---------------------------------------------------------------------
    34                                  
    35                                  %define BOOTCODE_BASE 0ffffc000h
    36                                  %define BOOT_SS       0f7a0h
    37                                  %define BOOT_SP       057eh
    38                                  %define LOCAL_SP      05feh
    39                                  
    40                                  %define VRAM_PITCH 50h
    41                                  
    42                                  %define LOGO_ADDRESS      0ffff8000h
    43                                  %define LOGO_USEPLANES    4
    44                                  %if(LOGO_USEPLANES==3)
    45                                  %define LOGO_PAL_ADDRESS  0ffffaf00h
    46                                  %else
    47                                  %define LOGO_PAL_ADDRESS  0ffffbb80h
    48                                  %endif
    49                                  
    50                                  %define ICON_WAIT 81
    51                                  %define ICON_FDD  64
    52                                  %define ICON_CD   67
    53                                  %define ICON_HDD  71
    54                                  
    55                                  %define PMODE_PUTICON     0
    56                                  %define PMODE_MEMORYCHECK 1
    57                                  %define PMODE_DRAWLOGO    2
    58                                  %define PMODE_SETPALETTE  3
    59                                  %define PMODE_TRANSFERMEM 4
    60                                  
    61                                  ;---------------------------------------------------------------------
    62                                  
    63                                  %macro JMPFAR 1
    64                                  	db 0eah
    65                                  	dw %1
    66                                  	dw 0fc00h
    67                                  %endmacro
    68                                  
    69                                  
    70                                  %macro CALLFAR 1
    71                                  	db 09ah
    72                                  	dw %1
    73                                  	dw 0fc00h
    74                                  %endmacro
    75                                  
    76                                  
    77                                  %macro SAVEREG_TO_CMOS 2
    78                                  	mov	dx,%1
    79                                  %ifidn %2,ax
    80                                  %else
    81                                  	mov	ax,%2
    82                                  %endif
    83                                  	out	dx,al
    84                                  	mov	dx,%1+2
    85                                  	mov	al,ah
    86                                  	out	dx,al
    87                                  %endmacro
    88                                  
    89                                  
    90                                  %macro LOADREG_FROM_CMOS 2
    91                                  	mov	dx,%1+2
    92                                  	in	al,dx
    93                                  	mov	ah,al
    94                                  	mov	dx,%1
    95                                  	in	al,dx
    96                                  %ifidn %2,ax
    97                                  %else
    98                                  	mov	%2,ax
    99                                  %endif
   100                                  %endmacro
   101                                  
   102                                  ; by CaptainYS >>
   103                                  %macro					PLACE 1
   104                                  						TIMES	%1-($-$$) DB 0
   105                                  %endmacro
   106                                  ; by CaptainYS <<
   107                                  
   108                                  
   109                                  ;---------------------------------------------------------------------
   110                                  
   111                                  ; あやしいヘッダ
   112 00000000 000000000000000000-     	dd	0,0,0,0, 0,0,0,0
   112 00000009 000000000000000000-
   112 00000012 000000000000000000-
   112 0000001B 0000000000         
   113                                  ;
   114                                  
   115                                  [BITS 16]
   116                                  
   117                                  startall:
   118 00000020 FA                      	cli
   119 00000021 FC                      	cld
   120 00000022 89D0                    	mov	ax,dx
   121 00000024 BA263C                  	mov	dx,3c26h
   122 00000027 EE                      	out	dx,al
   123 00000028 88E0                    	mov	al,ah
   124 0000002A 80EA02                  	sub	dl,2
   125 0000002D EE                      	out	dx,al
   126                                  
   127                                  	; disable & reset DMAC
   128 0000002E B00F                    	mov	al,0fh
   129 00000030 E6AF                    	out	0afh,al
   130 00000032 B003                    	mov	al,3
   131 00000034 E6A0                    	out	0a0h,al
   132                                  
   133 00000036 E428                    	in	al,28h
   134 00000038 0C01                    	or	al,1
   135 0000003A E628                    	out	28h,al
   136                                  
   137                                  	; select ROM
   138 0000003C BA0404                  	mov	dx,404h
   139 0000003F 30C0                    	xor	al,al
   140 00000041 EE                      	out	dx,al
   141                                  
   142 00000042 B9A0F7                  	mov	cx,BOOT_SS
   143 00000045 8ED1                    	mov	ss,cx
   144 00000047 BC7E05                  	mov	sp,BOOT_SP
   145                                  
   146 0000004A 0E                      	push	cs
   147 0000004B 1F                      	pop	ds
   148                                  
   149                                  	; set local stack address
   150                                  	SAVEREG_TO_CMOS 31a8h, LOCAL_SP
    78 0000004C BAA831              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81 0000004F B8FE05              <1>  mov ax,%2
    82                              <1> %endif
    83 00000052 EE                  <1>  out dx,al
    84 00000053 BAAA31              <1>  mov dx,%1+2
    85 00000056 88E0                <1>  mov al,ah
    86 00000058 EE                  <1>  out dx,al
   151                                  
   152 00000059 BA223C                  	mov	dx,3c22h
   153 0000005C 30C0                    	xor	al,al
   154 0000005E EE                      	out	dx,al ; non 386SX
   155                                  
   156 0000005F BAB831                  	mov	dx,31b8h
   157 00000062 EE                      	out	dx,al
   158 00000063 BAB231                  	mov	dx,31b2h
   159 00000066 EE                      	out	dx,al
   160 00000067 BACC31                  	mov	dx,31cch
   161 0000006A EE                      	out	dx,al
   162                                  
   163 0000006B E83601                  	call	set_gdt
   164 0000006E E8A001                  	call	init_pic
   165 00000071 E8C601                  	call	init_keyboard
   166 00000074 E8D801                  	call	init_crtc
   167                                  
   168                                  	; CMOS情報が正しいか？
   169 00000077 B420                    	mov	ah,20h
   170                                  	CALLFAR	cmos_bios
    71 00000079 9A                  <1>  db 09ah
    72 0000007A [9404]              <1>  dw %1
    73 0000007C 00FC                <1>  dw 0fc00h
   171 0000007E 7307                    	jnc	.noinitcmos
   172                                  	; CMOS初期化
   173 00000080 B400                    	mov	ah,0
   174                                  	CALLFAR cmos_bios
    71 00000082 9A                  <1>  db 09ah
    72 00000083 [9404]              <1>  dw %1
    73 00000085 00FC                <1>  dw 0fc00h
   175                                  .noinitcmos:
   176                                  
   177 00000087 B003                    	mov	al,PMODE_SETPALETTE
   178 00000089 E85C01                  	call	call_pmode
   179                                  
   180 0000008C B002                    	mov	al,PMODE_DRAWLOGO
   181 0000008E E85701                  	call	call_pmode
   182                                  
   183 00000091 B001                    	mov	al,PMODE_MEMORYCHECK
   184 00000093 E85201                  	call	call_pmode
   185                                  
   186                                  	; CDが読めるか？
   187 00000096 B40E                    	mov	ah,0eh
   188                                  	CALLFAR disk_bios
    71 00000098 9A                  <1>  db 09ah
    72 00000099 [6403]              <1>  dw %1
    73 0000009B 00FC                <1>  dw 0fc00h
   189 0000009D 7313                    	jnc	.cdok
   190                                  
   191                                  	; 手抜き(^^;
   192 0000009F B143                    	mov	cl,ICON_CD
   193 000000A1 BA4C73                  	mov	dx, (VRAM_PITCH*368)+(VRAM_PITCH-4)
   194 000000A4 E84101                  	call	call_pmode
   195 000000A7 BE[5601]                	mov	si,mes_cantboot
   196 000000AA BF0078                  	mov	di,VRAM_PITCH*384
   197 000000AD E82F02                  	call	textout
   198 000000B0 EBFE                    	jmp	$
   199                                  
   200                                  .cdok:
   201                                  	; IPL読み込み
   202 000000B2 1E                      	push	ds
   203 000000B3 B90000                  	mov	cx,0
   204 000000B6 BA0000                  	mov	dx,0
   205 000000B9 B800B0                  	mov	ax,0b000h
   206 000000BC 8ED8                    	mov	ds,ax
   207 000000BE BF0000                  	mov	di,0
   208 000000C1 B8C005                  	mov	ax,05c0h ; read command + media no.
   209 000000C4 BB0100                  	mov	bx,1
   210                                  	CALLFAR disk_bios
    71 000000C7 9A                  <1>  db 09ah
    72 000000C8 [6403]              <1>  dw %1
    73 000000CA 00FC                <1>  dw 0fc00h
   211 000000CC 1F                      	pop	ds
   212                                  
   213 000000CD B151                    	mov	cl,ICON_WAIT
   214 000000CF B000                    	mov	al,PMODE_PUTICON
   215 000000D1 BA4C73                  	mov	dx, (VRAM_PITCH*368)+(VRAM_PITCH-4)
   216 000000D4 E81101                  	call	call_pmode
   217                                  
   218 000000D7 BE[F900]                	mov	si,mes_reading
   219 000000DA BF0078                  	mov	di,VRAM_PITCH*384
   220 000000DD E8FF01                  	call	textout
   221                                  
   222 000000E0 E89200                  	call	check_iplvalidity
   223 000000E3 7209                    	jc	.wrongipl
   224                                  
   225 000000E5 B8FFFF                  	mov	ax,0ffffh
   226 000000E8 BB0800                  	mov	bx,0008h
   227 000000EB 2EFF1C                  	call	far [cs:si]
   228                                  
   229                                  .wrongipl:
   230                                  	; 起動に失敗すると戻ってくる
   231                                  	; 成功した場合は２度と戻ってこない
   232 000000EE BE[1801]                	mov	si,mes_wrongipl
   233 000000F1 BF0078                  	mov	di,VRAM_PITCH*384
   234 000000F4 E8E801                  	call	textout
   235                                  
   236                                  	; 死
   237 000000F7 EBFE                    	jmp	$
   238                                  
   239                                  ; CaptainYS: Since NASM doesn't seem to understand Shift-JIS, 
   240                                  ;            I've pasted shift-jis code directly.
   241                                  mes_reading:
   242                                  	; 	'システム読み込み中です　　　　',0
   243 000000F9 835683588365838093-     	db 083h,056h,083h,058h,083h,065h,083h,080h,093h,0C7h,082h,0DDh,08Dh,09Eh,082h,0DDh
   243 00000102 C782DD8D9E82DD     
   244 00000109 928682C582B7814081-     	db 092h,086h,082h,0C5h,082h,0B7h,081h,040h,081h,040h,081h,040h,081h,040h,000h
   244 00000112 408140814000       
   245                                  
   246                                  mes_wrongipl:
   247                                  	; db	'システムが違います　　　　　　',00
   248 00000118 835683588365838082-     	db 083h,056h,083h,058h,083h,065h,083h,080h,082h,0AAh,088h,0E1h,082h,0A2h,082h,0DCh
   248 00000121 AA88E182A282DC     
   249 00000128 82B781408140814081-     	db 082h,0B7h,081h,040h,081h,040h,081h,040h,081h,040h,081h,040h,081h,040h,000h
   249 00000131 408140814000       
   250                                  
   251                                  mes_setsys:
   252                                  	; db	'システムをセットしてください　',00
   253 00000137 835683588365838082-     	db 083h,056h,083h,058h,083h,065h,083h,080h,082h,0F0h,083h,05Ah,083h,062h,083h,067h
   253 00000140 F0835A83628367     
   254 00000147 82B582C482AD82BE82-     	db 082h,0B5h,082h,0C4h,082h,0ADh,082h,0BEh,082h,0B3h,082h,0A2h,081h,040h,000h
   254 00000150 B382A2814000       
   255                                  
   256                                  mes_cantboot:
   257                                  	; db	'ＣＤをセットしてリセットしてね',00
   258 00000156 8262826382F0835A83-     	db 082h,062h,082h,063h,082h,0F0h,083h,05Ah,083h,062h,083h,067h,082h,0B5h,082h,0C4h
   258 0000015F 62836782B582C4     
   259 00000166 838A835A8362836782-     	db 083h,08Ah,083h,05Ah,083h,062h,083h,067h,082h,0B5h,082h,0C4h,082h,0CBh,000h
   259 0000016F B582C482CB00       
   260                                  
   261                                  ;---------------------------------------------------------------------
   262                                  ; IPLのバージョンをチェック
   263                                  
   264                                  check_iplvalidity:
   265 00000175 06                      	push	es
   266 00000176 BE00B0                  	mov	si,0b000h
   267 00000179 8EC6                    	mov	es,si
   268                                  
   269 0000017B BE[9C01]                	mov	si,.ipl_type1
   270 0000017E 2666813E000049504C-     	cmp	dword [es:0],'IPL4'
   270 00000187 34                 
   271 00000188 7410                    	jz	.goodipl
   272                                  
   273 0000018A BE[A001]                	mov	si,.ipl_type2
   274 0000018D 2666813E030049504C-     	cmp	dword [es:3],'IPL4'
   274 00000196 34                 
   275 00000197 7401                    	jz	.goodipl
   276                                  
   277 00000199 F9                      	stc
   278                                  .goodipl:
   279 0000019A 07                      	pop	es
   280 0000019B C3                      	ret
   281                                  
   282                                  .ipl_type1:
   283 0000019C 040000B0                	dw	4,0b000h
   284                                  .ipl_type2:
   285 000001A0 000000B0                	dw	0,0b000h
   286                                  
   287                                  ;---------------------------------------------------------------------
   288                                  ; GDTをセット
   289                                  
   290                                  set_gdt:
   291 000001A4 2E0F0116[B201]          	lgdt	[cs:.lgdtr]
   292 000001AA C3                      	ret
   293                                  
   294 000001AB 90<rep 5h>              	align 8
   295 000001B0 0000                    		dw	0
   296 000001B2 2F00                    .lgdtr:		dw	002fh ; GDT limit
   297 000001B4 [B8C10F00]              		dd	0fc000h+.gdtentry
   298                                  
   299 000001B8 0000000000000000        .gdtentry:	db	 00h, 00h,00h, 00h,00h,00h, 00h,00h
   300 000001C0 FFFF0000009BCF00        		db	0ffh,0ffh,00h, 00h,00h,9bh,0cfh,00h	; CaptainYS 0c0h->0cfh.  Bug fix.  Segment limit was stopping at 0FFFFFFFh.  SHould be FFFFFFFFh
   301 000001C8 FFFF00000093CF00        		db	0ffh,0ffh,00h, 00h,00h,93h,0cfh,00h
   302 000001D0 FFFF00C00F9B0000        		db	0ffh,0ffh,00h,0c0h,0fh,9bh,000h,00h
   303 000001D8 FFFF00C00F930000        		db	0ffh,0ffh,00h,0c0h,0fh,93h,000h,00h
   304 000001E0 FF0000C00F9BC000        		db	0ffh,000h,00h,0c0h,0fh,9bh,0c0h,00h
   305                                  
   306                                  ;---------------------------------------------------------------------
   307                                  ; プロテクトモード・プロシジャを呼ぶ
   308                                  
   309                                  call_pmode:
   310 000001E8 1E                      	push	ds
   311 000001E9 06                      	push	es
   312 000001EA 0FA8                    	push	gs
   313 000001EC 8CD3                    	mov	bx,ss
   314 000001EE 8EEB                    	mov	gs,bx
   315 000001F0 89C3                    	mov	bx,ax
   316                                  
   317 000001F2 0F20C0                  	mov	eax,cr0
   318 000001F5 0C01                    	or	al,1
   319 000001F7 0F22C0                  	mov	cr0,eax
   320 000001FA EB00                    	jmp	short $+2
   321                                  
   322 000001FC EA                      	db	0eah
   323 000001FD [0102]                  	dw	.goto_pmode
   324 000001FF 2800                    	dw	28h
   325                                  .goto_pmode:
   326                                  
   327 00000201 EA                      	db	0eah
   328 00000202 [8CCAFFFF]              	dd	BOOTCODE_BASE+pmode_entry
   329 00000206 0800                    	dw	8
   330                                  
   331                                  return_from_pmode:
   332 00000208 8CEB                    	mov	bx,gs
   333 0000020A 8ED3                    	mov	ss,bx
   334                                  
   335 0000020C 0FA9                    	pop	gs
   336 0000020E 07                      	pop	es
   337 0000020F 1F                      	pop	ds
   338 00000210 C3                      	ret
   339                                  
   340                                  ;---------------------------------------------------------------------
   341                                  ; PIC初期化
   342                                  ; ※ウェイトを入れていないので、実機では動作しない
   343                                  
   344                                  init_pic:
   345 00000211 B019                    	mov	al,19h
   346 00000213 E600                    	out	0,al
   347 00000215 B040                    	mov	al,40h
   348 00000217 E602                    	out	2,al
   349 00000219 B080                    	mov	al,80h
   350 0000021B E602                    	out	2,al
   351 0000021D B01D                    	mov	al,1dh
   352 0000021F E602                    	out	2,al
   353 00000221 B0FE                    	mov	al,0feh
   354 00000223 E602                    	out	2,al
   355 00000225 B019                    	mov	al,19h
   356 00000227 E610                    	out	10h,al
   357 00000229 B048                    	mov	al,48h
   358 0000022B E612                    	out	12h,al
   359 0000022D B087                    	mov	al,87h
   360 0000022F E612                    	out	12h,al
   361 00000231 B009                    	mov	al,9
   362 00000233 E612                    	out	12h,al
   363 00000235 B0FF                    	mov	al,0ffh
   364 00000237 E612                    	out	12h,al
   365 00000239 C3                      	ret
   366                                  
   367                                  ;---------------------------------------------------------------------
   368                                  ; キーボード初期化
   369                                  
   370                                  init_keyboard:
   371 0000023A BA0206                  	mov	dx,602h
   372 0000023D B0A1                    	mov	al,0a1h ; reset
   373 0000023F EE                      	out	dx,al
   374                                  
   375                                  	; バッファが空になるまで待つ
   376                                  .loop:
   377 00000240 BA0206                  	mov	dx,602h
   378 00000243 EC                      	in	al,dx
   379 00000244 A801                    	test	al,1
   380 00000246 7406                    	jz	.exit
   381 00000248 83EA02                  	sub	dx,2
   382 0000024B EC                      	in	al,dx
   383 0000024C EBF2                    	jmp	.loop
   384                                  .exit:
   385 0000024E C3                      	ret
   386                                  
   387                                  ;---------------------------------------------------------------------
   388                                  ; CRTC初期化、FMR互換の画面モードへ
   389                                  
   390                                  init_crtc:
   391 0000024F BAA0FD                  	mov	dx,0fda0h
   392 00000252 30C0                    	xor	al,al
   393 00000254 EE                      	out	dx,al
   394                                  
   395 00000255 BE[9F02]                	mov	si,crtcinitdata
   396 00000258 B92000                  	mov	cx,32
   397                                  .loop:
   398 0000025B B020                    	mov	al,32
   399 0000025D 28C8                    	sub	al,cl
   400 0000025F BA4004                  	mov	dx,440h
   401 00000262 EE                      	out	dx,al
   402 00000263 8B04                    	mov	ax,[si]
   403 00000265 83C202                  	add	dx,2
   404 00000268 EF                      	out	dx,ax
   405 00000269 83C602                  	add	si,2
   406 0000026C E2ED                    	loop	.loop
   407                                  
   408 0000026E BA4804                  	mov	dx,448h
   409 00000271 30C0                    	xor	al,al
   410 00000273 EE                      	out	dx,al
   411 00000274 83C202                  	add	dx,2
   412 00000277 B015                    	mov	al,15h
   413 00000279 EE                      	out	dx,al
   414                                  
   415 0000027A BA4804                  	mov	dx,448h
   416 0000027D B001                    	mov	al,1
   417 0000027F EE                      	out	dx,al
   418 00000280 83C202                  	add	dx,2
   419 00000283 B008                    	mov	al,8
   420 00000285 EE                      	out	dx,al
   421                                  
   422 00000286 BAA0FD                  	mov	dx,0fda0h
   423 00000289 B008                    	mov	al,8
   424 0000028B EE                      	out	dx,al
   425                                  
   426                                  	; 全プレーンを書き込み対象に設定
   427 0000028C BA81FF                  	mov	dx,0ff81h
   428 0000028F B00F                    	mov	al,0fh
   429 00000291 EE                      	out	dx,al
   430                                  
   431                                  	; 全プレーン表示
   432 00000292 BA82FF                  	mov	dx,0ff82h
   433 00000295 B067                    	mov	al,67h
   434 00000297 EE                      	out	dx,al
   435                                  
   436                                  	; 描画対象プレーンを選択
   437 00000298 BA83FF                  	mov	dx,0ff83h
   438 0000029B 30C0                    	xor	al,al
   439 0000029D EE                      	out	dx,al
   440                                  
   441 0000029E C3                      	ret
   442                                  
   443                                  
   444                                  crtcinitdata:
   445 0000029F 40002003000000005F-     	dw	0040h, 0320h, 0000h, 0000h, 035fh, 0000h, 0010h, 0000h
   445 000002A8 03000010000000     
   446 000002AF 6F039C001C039C001C-     	dw	036fh, 009ch, 031ch, 009ch, 031ch, 0040h, 0360h, 0040h
   446 000002B8 03400060034000     
   447 000002BF 600300009C00000050-     	dw	0360h, 0000h, 009ch, 0000h, 0050h, 0000h, 009ch, 0000h
   447 000002C8 0000009C000000     
   448 000002CF 50004A00010000003F-     	dw	0050h, 004ah, 0001h, 0000h, 803fh, 0003h, 0000h, 0150h ; CaptainYS: Register 1C 003fh->803fh not to accidentally enable High-Res CRTC.
   448 000002D8 80030000005001     
   449                                  
   450                                  ;---------------------------------------------------------------------
   451                                  ; 文字列表示
   452                                  ;
   453                                  ; si = 文字列
   454                                  ; di = 表示先VRAMアドレス
   455                                  
   456                                  textout:
   457 000002DF 06                      	push	es
   458 000002E0 53                      	push	bx
   459 000002E1 B800C0                  	mov	ax,0c000h
   460 000002E4 8EC0                    	mov	es,ax
   461 000002E6 BB94FF                  	mov	bx,0ff94h
   462                                  
   463                                  .textoutloop:
   464 000002E9 8B0C                    	mov	cx,[si]
   465 000002EB 08C9                    	or	cl,cl
   466 000002ED 7426                    	jz	.exit
   467                                  
   468 000002EF E82600                  	call	sjistojis
   469 000002F2 26880F                  	mov	[es:bx],cl
   470 000002F5 26886F01                	mov	[es:bx+1],ch
   471 000002F9 B91000                  	mov	cx,16
   472                                  .onecharloop:
   473 000002FC 268A4702                	mov	al,[es:bx+2]
   474 00000300 268A6703                	mov	ah,[es:bx+3]
   475 00000304 268905                  	mov	[es:di],ax
   476 00000307 83C750                  	add	di,VRAM_PITCH
   477 0000030A E2F0                    	loop	.onecharloop
   478                                  
   479 0000030C 81EFFE04                	sub	di,VRAM_PITCH*16-2
   480 00000310 83C602                  	add	si,2
   481 00000313 EBD4                    	jmp	.textoutloop
   482                                  .exit:
   483 00000315 5B                      	pop	bx
   484 00000316 07                      	pop	es
   485 00000317 C3                      	ret
   486                                  
   487                                  ; シフトJIS→JIS変換
   488                                  sjistojis:
   489 00000318 80F9E0                  	cmp	cl,0e0h
   490 0000031B 7203                    	jc	.j1
   491 0000031D 80E940                  	sub	cl,40h
   492                                  .j1:
   493 00000320 80E981                  	sub	cl,81h
   494 00000323 D0E1                    	shl	cl,1
   495 00000325 80C121                  	add	cl,21h
   496 00000328 88E8                    	mov	al,ch
   497 0000032A 80FD9F                  	cmp	ch,9fh
   498 0000032D 7205                    	jc	.j2
   499 0000032F FEC1                    	inc	cl
   500 00000331 80ED5E                  	sub	ch,5eh
   501                                  .j2:
   502 00000334 80ED20                  	sub	ch,20h
   503 00000337 3C7E                    	cmp	al,7eh
   504 00000339 7707                    	ja	.j3
   505 0000033B F6C101                  	test	cl,1
   506 0000033E 7402                    	jz	.j3
   507 00000340 FEC5                    	inc	ch
   508                                  .j3:
   509 00000342 C3                      	ret
   510                                  
   511                                  ;---------------------------------------------------------------------
   512                                  ; DISK-BIOS(と勝手に呼んでいる)
   513                                  ; ahに応じて次の機能を提供する(ah = 2-0x11)
   514 00000343 90                      	align 2
   515                                  disk_command_table:
   516 00000344 [1504]                  	dw	disk_command_02 ; 2 : 未実装
   517 00000346 [1704]                  	dw	disk_command_03 ; 3 : メディア先頭へシーク？
   518 00000348 [1B04]                  	dw	disk_command_04 ; 4 : 未実装
   519 0000034A [1D04]                  	dw	disk_command_05 ; 5 : リード
   520 0000034C [3504]                  	dw	disk_command_06 ; 6 : ライト
   521 0000034E [1304]                  	dw	disk_command_xx ; 7 : 無効
   522 00000350 [4404]                  	dw	disk_command_08 ; 8 : ドライブリセット(FDD & HDD)
   523 00000352 [1304]                  	dw	disk_command_xx ; 9 : 無効
   524 00000354 [1304]                  	dw	disk_command_xx ; a : 無効
   525 00000356 [1304]                  	dw	disk_command_xx ; b : 無効
   526 00000358 [1304]                  	dw	disk_command_xx ; c : 無効
   527 0000035A [1304]                  	dw	disk_command_xx ; d : 無効
   528 0000035C [4604]                  	dw	disk_command_0e ; e : ドライブチェック
   529 0000035E [1304]                  	dw	disk_command_xx ; f : 無効
   530 00000360 [1304]                  	dw	disk_command_xx ;10 : 無効
   531 00000362 [4A04]                  	dw	disk_command_11 ;11 : 未実装
   532                                  ;
   533                                  ; リターンコード: ah(0:正常終了)、エラーの有無はキャリーフラグにセット
   534                                  
   535                                  disk_bios:
   536                                  	; めんどくさい。フラグも変えないよう注意
   537 00000364 52                      	push	dx
   538 00000365 50                      	push	ax ; これがリターンコードになる
   539                                  
   540                                  	; まず、ローカルスタックに切り替える
   541                                  	; 現在の SS:SP を退避
   542                                  	SAVEREG_TO_CMOS 319ch, ss
    78 00000366 BA9C31              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81 00000369 8CD0                <1>  mov ax,%2
    82                              <1> %endif
    83 0000036B EE                  <1>  out dx,al
    84 0000036C BA9E31              <1>  mov dx,%1+2
    85 0000036F 88E0                <1>  mov al,ah
    86 00000371 EE                  <1>  out dx,al
   543                                  	SAVEREG_TO_CMOS 31a0h, sp
    78 00000372 BAA031              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81 00000375 89E0                <1>  mov ax,%2
    82                              <1> %endif
    83 00000377 EE                  <1>  out dx,al
    84 00000378 BAA231              <1>  mov dx,%1+2
    85 0000037B 88E0                <1>  mov al,ah
    86 0000037D EE                  <1>  out dx,al
   544                                  	LOADREG_FROM_CMOS 31a8h, sp
    91 0000037E BAAA31              <1>  mov dx,%1+2
    92 00000381 EC                  <1>  in al,dx
    93 00000382 88C4                <1>  mov ah,al
    94 00000384 BAA831              <1>  mov dx,%1
    95 00000387 EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98 00000388 89C4                <1>  mov %2,ax
    99                              <1> %endif
   545 0000038A B8A0F7                  	mov	ax,BOOT_SS
   546 0000038D 8ED0                    	mov	ss,ax
   547                                  	; ローカルスタックに切り替え完了
   548                                  
   549                                  	; 呼出し元 SS:SP を push
   550                                  	LOADREG_FROM_CMOS 319ch, ax ; ss
    91 0000038F BA9E31              <1>  mov dx,%1+2
    92 00000392 EC                  <1>  in al,dx
    93 00000393 88C4                <1>  mov ah,al
    94 00000395 BA9C31              <1>  mov dx,%1
    95 00000398 EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98                              <1>  mov %2,ax
    99                              <1> %endif
   551 00000399 50                      	push	ax
   552                                  	LOADREG_FROM_CMOS 31a0h, ax ; sp
    91 0000039A BAA231              <1>  mov dx,%1+2
    92 0000039D EC                  <1>  in al,dx
    93 0000039E 88C4                <1>  mov ah,al
    94 000003A0 BAA031              <1>  mov dx,%1
    95 000003A3 EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98                              <1>  mov %2,ax
    99                              <1> %endif
   553 000003A4 50                      	push	ax
   554                                  
   555 000003A5 06                      	push	es
   556 000003A6 1E                      	push	ds
   557 000003A7 57                      	push	di
   558 000003A8 56                      	push	si
   559 000003A9 55                      	push	bp
   560                                  
   561                                  	LOADREG_FROM_CMOS 31a8h, bp
    91 000003AA BAAA31              <1>  mov dx,%1+2
    92 000003AD EC                  <1>  in al,dx
    93 000003AE 88C4                <1>  mov ah,al
    94 000003B0 BAA831              <1>  mov dx,%1
    95 000003B3 EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98 000003B4 89C5                <1>  mov %2,ax
    99                              <1> %endif
   562                                  
   563                                  	; DS:SI で呼び出し元スタックをいじれるようにする
   564                                  	LOADREG_FROM_CMOS 319ch, ds
    91 000003B6 BA9E31              <1>  mov dx,%1+2
    92 000003B9 EC                  <1>  in al,dx
    93 000003BA 88C4                <1>  mov ah,al
    94 000003BC BA9C31              <1>  mov dx,%1
    95 000003BF EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98 000003C0 8ED8                <1>  mov %2,ax
    99                              <1> %endif
   565                                  	LOADREG_FROM_CMOS 31a0h, si
    91 000003C2 BAA231              <1>  mov dx,%1+2
    92 000003C5 EC                  <1>  in al,dx
    93 000003C6 88C4                <1>  mov ah,al
    94 000003C8 BAA031              <1>  mov dx,%1
    95 000003CB EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98 000003CC 89C6                <1>  mov %2,ax
    99                              <1> %endif
   566                                  
   567 000003CE 51                      	push	cx
   568 000003CF 53                      	push	bx
   569 000003D0 F8                      	clc
   570 000003D1 9C                      	pushf
   571                                  
   572 000003D2 FA                      	cli
   573 000003D3 FC                      	cld
   574 000003D4 8CD0                    	mov	ax,ss
   575 000003D6 8EC0                    	mov	es,ax
   576 000003D8 89E7                    	mov	di,sp
   577 000003DA 55                      	push	bp
   578                                  
   579                                  	; 一番最初に push したレジスタをロード
   580 000003DB 8B04                    	mov	ax,[si]
   581 000003DD 8B5402                  	mov	dx,[si+2]
   582                                  
   583                                  	; 本来なら範囲判定があるが省略
   584                                  
   585                                  	; 呼ぶ
   586 000003E0 88E0                    	mov	al,ah
   587 000003E2 30E4                    	xor	ah,ah
   588 000003E4 83E802                  	sub	ax,2
   589 000003E7 01C0                    	add	ax,ax
   590 000003E9 89C3                    	mov	bx,ax
   591 000003EB 2EFF97[4403]            	call	[cs:disk_command_table+bx]
   592                                  
   593                                  	; 結果を格納
   594 000003F0 08E4                    	or	ah,ah
   595 000003F2 0F95C0                  	setnz	al
   596 000003F5 886401                  	mov	[si+1],ah
   597 000003F8 260805                  	or	[es:di],al ; CF
   598                                  	
   599 000003FB 58                      	pop	ax
   600 000003FC 9D                      	popf
   601 000003FD 5B                      	pop	bx
   602 000003FE 59                      	pop	cx
   603 000003FF 5D                      	pop	bp
   604 00000400 5E                      	pop	si
   605 00000401 5F                      	pop	di
   606 00000402 1F                      	pop	ds
   607 00000403 07                      	pop	es
   608                                  
   609 00000404 89DA                    	mov	dx,bx
   610 00000406 5B                      	pop	bx
   611 00000407 89D8                    	mov	ax,bx
   612 00000409 5B                      	pop	bx
   613 0000040A 8ED3                    	mov	ss,bx
   614 0000040C 89C4                    	mov	sp,ax
   615 0000040E 89D3                    	mov	bx,dx
   616 00000410 58                      	pop	ax
   617 00000411 5A                      	pop	dx
   618 00000412 CB                      	retf
   619                                  
   620                                  
   621                                  disk_command_xx:
   622 00000413 EBFE                    	jmp	$
   623                                  
   624                                  disk_command_02:
   625 00000415 EBFE                    	jmp	$
   626                                  
   627                                  disk_command_03:
   628 00000417 E8F501                  	call	cd_command_0e ; 一応これで代替
   629 0000041A C3                      	ret
   630                                  
   631                                  disk_command_04:
   632 0000041B EBFE                    	jmp	$
   633                                  
   634                                  disk_command_05:
   635 0000041D 8A04                    	mov	al,[si]
   636 0000041F 24F0                    	and	al,0f0h
   637 00000421 3C20                    	cmp	al,020h		; by CaptainYS
   638 00000423 740C                    	je	.fd			; by CaptainYS
   639 00000425 3C40                    	cmp	al,040h
   640 00000427 7404                    	jz	.rom
   641 00000429 E83401                  	call	cd_command_05
   642 0000042C C3                      	ret
   643                                  .rom:
   644 0000042D E82603                  	call	osrom_command_05
   645 00000430 C3                      	ret
   646                                  .fd:						; by CaptainYS
   647 00000431 E81C03                  	call	fd_command_05	; by CaptainYS
   648 00000434 C3                      	ret						; by CaptainYS
   649                                  
   650                                  disk_command_06:
   651 00000435 8A04                    	mov	al,[si]
   652 00000437 24F0                    	and	al,0f0h
   653 00000439 3C40                    	cmp	al,040h
   654 0000043B 7403                    	jz	.rom
   655 0000043D EBFE                    	jmp	$
   656 0000043F C3                      	ret
   657                                  .rom:
   658 00000440 E81303                  	call	osrom_command_06
   659 00000443 C3                      	ret
   660                                  
   661                                  disk_command_08:
   662 00000444 EBFE                    	jmp	$
   663                                  
   664                                  disk_command_0e:
   665 00000446 E8C601                  	call	cd_command_0e
   666 00000449 C3                      	ret
   667                                  
   668                                  disk_command_11:
   669 0000044A EBFE                    	jmp	$
   670                                  
   671                                  
   672                                  ;---------------------------------------------------------------------
   673                                  ; CMOS-BIOS(と勝手に呼んでいる)
   674                                  ; ahに応じて次の機能を提供する(ah = -3(0xfd)-0x20)
   675                                  	align 2
   676 0000044C [A207]                  	dw	cmos_command_fd ;fd : 未実装
   677 0000044E [A007]                  	dw	cmos_command_xx ;fe : 無効
   678 00000450 [A007]                  	dw	cmos_command_xx ;ff : 無効
   679                                  cmos_command_table:
   680 00000452 [A407]                  	dw	cmos_command_00 ; 0 : イニシャライズ
   681 00000454 [4C08]                  	dw	cmos_command_01 ; 1 : 未実装
   682 00000456 [4E08]                  	dw	cmos_command_02 ; 2 : 未実装
   683 00000458 [5008]                  	dw	cmos_command_03 ; 3 : 未実装
   684 0000045A [5208]                  	dw	cmos_command_04 ; 4 : 未実装
   685 0000045C [5408]                  	dw	cmos_command_05 ; 5 : 未実装
   686 0000045E [6008]                  	dw	cmos_command_06 ; 6 : 未実装
   687 00000460 [A007]                  	dw	cmos_command_xx ; 7 : 無効
   688 00000462 [A007]                  	dw	cmos_command_xx ; 8 : 無効
   689 00000464 [A007]                  	dw	cmos_command_xx ; 9 : 無効
   690 00000466 [A007]                  	dw	cmos_command_xx ; a : 無効
   691 00000468 [A007]                  	dw	cmos_command_xx ; b : 無効
   692 0000046A [A007]                  	dw	cmos_command_xx ; c : 無効
   693 0000046C [A007]                  	dw	cmos_command_xx ; d : 無効
   694 0000046E [A007]                  	dw	cmos_command_xx ; e : 無効
   695 00000470 [A007]                  	dw	cmos_command_xx ; f : 無効
   696 00000472 [6208]                  	dw	cmos_command_10 ;10 : ブロック書き込み
   697 00000474 [AF08]                  	dw	cmos_command_11 ;11 : ブロック読み出し
   698 00000476 [A007]                  	dw	cmos_command_xx ;12 : 無効
   699 00000478 [A007]                  	dw	cmos_command_xx ;13 : 無効
   700 0000047A [A007]                  	dw	cmos_command_xx ;14 : 無効
   701 0000047C [A007]                  	dw	cmos_command_xx ;15 : 無効
   702 0000047E [A007]                  	dw	cmos_command_xx ;16 : 無効
   703 00000480 [A007]                  	dw	cmos_command_xx ;17 : 無効
   704 00000482 [A007]                  	dw	cmos_command_xx ;18 : 無効
   705 00000484 [A007]                  	dw	cmos_command_xx ;19 : 無効
   706 00000486 [A007]                  	dw	cmos_command_xx ;1a : 無効
   707 00000488 [A007]                  	dw	cmos_command_xx ;1b : 無効
   708 0000048A [A007]                  	dw	cmos_command_xx ;1c : 無効
   709 0000048C [A007]                  	dw	cmos_command_xx ;1d : 無効
   710 0000048E [A007]                  	dw	cmos_command_xx ;1e : 無効
   711 00000490 [A007]                  	dw	cmos_command_xx ;1f : 無効
   712 00000492 [DA08]                  	dw	cmos_command_20 ;20 : ヘッダが正常かチェック
   713                                  ;
   714                                  ; リターンコード: ah(0:正常終了)、エラーの有無はキャリーフラグにセット
   715                                  
   716                                  cmos_bios:
   717                                  	; これまためんどくさい。フラグは変えてもいいみたい
   718 00000494 55                      	push	bp
   719 00000495 89D5                    	mov	bp,dx
   720                                  
   721                                  	; まず、axを退避
   722                                  	SAVEREG_TO_CMOS 319ch,ax
    78 00000497 BA9C31              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81                              <1>  mov ax,%2
    82                              <1> %endif
    83 0000049A EE                  <1>  out dx,al
    84 0000049B BA9E31              <1>  mov dx,%1+2
    85 0000049E 88E0                <1>  mov al,ah
    86 000004A0 EE                  <1>  out dx,al
   723                                  
   724                                  	; ローカルスタックに切り替える
   725                                  	; 現在の SS:SP を退避
   726                                  	SAVEREG_TO_CMOS 31a0h, ss
    78 000004A1 BAA031              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81 000004A4 8CD0                <1>  mov ax,%2
    82                              <1> %endif
    83 000004A6 EE                  <1>  out dx,al
    84 000004A7 BAA231              <1>  mov dx,%1+2
    85 000004AA 88E0                <1>  mov al,ah
    86 000004AC EE                  <1>  out dx,al
   727                                  	SAVEREG_TO_CMOS 31a4h, sp
    78 000004AD BAA431              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81 000004B0 89E0                <1>  mov ax,%2
    82                              <1> %endif
    83 000004B2 EE                  <1>  out dx,al
    84 000004B3 BAA631              <1>  mov dx,%1+2
    85 000004B6 88E0                <1>  mov al,ah
    86 000004B8 EE                  <1>  out dx,al
   728                                  	LOADREG_FROM_CMOS 31a8h, sp
    91 000004B9 BAAA31              <1>  mov dx,%1+2
    92 000004BC EC                  <1>  in al,dx
    93 000004BD 88C4                <1>  mov ah,al
    94 000004BF BAA831              <1>  mov dx,%1
    95 000004C2 EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98 000004C3 89C4                <1>  mov %2,ax
    99                              <1> %endif
   729 000004C5 B8A0F7                  	mov	ax,BOOT_SS
   730 000004C8 8ED0                    	mov	ss,ax
   731                                  	; ローカルスタックに切り替え完了
   732                                  
   733                                  	; 呼出し元 SS:SP を push
   734                                  	LOADREG_FROM_CMOS 31a0h, ax ; ss
    91 000004CA BAA231              <1>  mov dx,%1+2
    92 000004CD EC                  <1>  in al,dx
    93 000004CE 88C4                <1>  mov ah,al
    94 000004D0 BAA031              <1>  mov dx,%1
    95 000004D3 EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98                              <1>  mov %2,ax
    99                              <1> %endif
   735 000004D4 50                      	push	ax
   736                                  	LOADREG_FROM_CMOS 31a4h, ax ; sp
    91 000004D5 BAA631              <1>  mov dx,%1+2
    92 000004D8 EC                  <1>  in al,dx
    93 000004D9 88C4                <1>  mov ah,al
    94 000004DB BAA431              <1>  mov dx,%1
    95 000004DE EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98                              <1>  mov %2,ax
    99                              <1> %endif
   737 000004DF 50                      	push	ax
   738                                  
   739                                  	; 退避しておいたaxを復元
   740                                  	LOADREG_FROM_CMOS 319ch,ax
    91 000004E0 BA9E31              <1>  mov dx,%1+2
    92 000004E3 EC                  <1>  in al,dx
    93 000004E4 88C4                <1>  mov ah,al
    94 000004E6 BA9C31              <1>  mov dx,%1
    95 000004E9 EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98                              <1>  mov %2,ax
    99                              <1> %endif
   741                                  
   742 000004EA 89EA                    	mov	dx,bp
   743 000004EC 06                      	push	es ; [bp+12]
   744 000004ED 1E                      	push	ds ; [bp+10]
   745 000004EE 57                      	push	di ; [bp+e]
   746 000004EF 56                      	push	si ; [bp+c]
   747 000004F0 55                      	push	bp ; [bp+a]
   748 000004F1 52                      	push	dx ; [bp+8]
   749 000004F2 51                      	push	cx ; [bp+6]
   750 000004F3 53                      	push	bx ; [bp+4]
   751 000004F4 50                      	push	ax ; [bp+2]
   752 000004F5 F8                      	clc
   753 000004F6 9C                      	pushf
   754                                  
   755 000004F7 FA                      	cli
   756 000004F8 FC                      	cld
   757 000004F9 89E5                    	mov	bp,sp
   758                                  
   759                                  	; 範囲チェックして、呼ぶ
   760 000004FB 8A4603                  	mov	al,[bp+3]
   761 000004FE B401                    	mov	ah,1
   762                                  
   763 00000500 3C21                    	cmp	al,21h
   764 00000502 7D15                    	jnl	.error
   765 00000504 3CFC                    	cmp	al,0fch
   766 00000506 7E11                    	jng	.error
   767                                  
   768 00000508 0FBED8                  	movsx	bx,al
   769 0000050B 01DB                    	add	bx,bx
   770 0000050D 2EFF97[5204]            	call	[cs:cmos_command_table+bx]
   771                                  
   772                                  	; 結果を格納
   773 00000512 08E4                    	or	ah,ah
   774 00000514 0F95C0                  	setnz	al
   775 00000517 7903                    	jns	.noerror
   776                                  .error:
   777 00000519 894E06                  	mov	[bp+6],cx
   778                                  .noerror:
   779 0000051C 886603                  	mov	[bp+3],ah
   780 0000051F 084600                  	or	[bp],al ; CF
   781                                  
   782 00000522 9D                      	popf
   783 00000523 58                      	pop	ax
   784 00000524 5B                      	pop	bx
   785 00000525 59                      	pop	cx
   786 00000526 5A                      	pop	dx
   787 00000527 5D                      	pop	bp
   788 00000528 5E                      	pop	si
   789 00000529 5F                      	pop	di
   790 0000052A 1F                      	pop	ds
   791 0000052B 07                      	pop	es
   792                                  
   793 0000052C 89D5                    	mov	bp,dx
   794                                  
   795                                  	SAVEREG_TO_CMOS 319ch,ax
    78 0000052E BA9C31              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81                              <1>  mov ax,%2
    82                              <1> %endif
    83 00000531 EE                  <1>  out dx,al
    84 00000532 BA9E31              <1>  mov dx,%1+2
    85 00000535 88E0                <1>  mov al,ah
    86 00000537 EE                  <1>  out dx,al
   796                                  
   797                                  	; 呼出し元SS:SPの復元
   798 00000538 58                      	pop	ax ; sp
   799                                  	SAVEREG_TO_CMOS 31a0h,ax
    78 00000539 BAA031              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81                              <1>  mov ax,%2
    82                              <1> %endif
    83 0000053C EE                  <1>  out dx,al
    84 0000053D BAA231              <1>  mov dx,%1+2
    85 00000540 88E0                <1>  mov al,ah
    86 00000542 EE                  <1>  out dx,al
   800 00000543 58                      	pop	ax ; ss
   801 00000544 8ED0                    	mov	ss,ax
   802                                  	LOADREG_FROM_CMOS 31a0h,ax
    91 00000546 BAA231              <1>  mov dx,%1+2
    92 00000549 EC                  <1>  in al,dx
    93 0000054A 88C4                <1>  mov ah,al
    94 0000054C BAA031              <1>  mov dx,%1
    95 0000054F EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98                              <1>  mov %2,ax
    99                              <1> %endif
   803 00000550 89C4                    	mov	sp,ax
   804                                  
   805                                  	LOADREG_FROM_CMOS 319ch,ax
    91 00000552 BA9E31              <1>  mov dx,%1+2
    92 00000555 EC                  <1>  in al,dx
    93 00000556 88C4                <1>  mov ah,al
    94 00000558 BA9C31              <1>  mov dx,%1
    95 0000055B EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98                              <1>  mov %2,ax
    99                              <1> %endif
   806 0000055C 89EA                    	mov	dx,bp
   807 0000055E 5D                      	pop	bp
   808 0000055F CB                      	retf
   809                                  
   810                                  
   811                                  ;---------------------------------------------------------------------
   812                                  ; 各デバイス特有の処理を記述したコードをインクルード
   813                                  
   814                                  %include "sys_cd.asm"
   815                              <1> ; version 2003.03.04.1
   816                              <1> ;---------------------------------------------------------------------
   817                              <1> ;
   818                              <1> ; FM TOWNS 互換 ROM シリーズ
   819                              <1> ;
   820                              <1> ; FMT_SYS.ROM : CDアクセス
   821                              <1> ;
   822                              <1> ; by Kasanova
   823                              <1> ;
   824                              <1> ;---------------------------------------------------------------------
   825                              <1> ; ※単独ではアセンブルしません
   826                              <1> 
   827                              <1> 
   828                              <1> %define CD_CMOS_PARA  3b60h
   829                              <1> %define CD_CMOS_DATA  3b70h
   830                              <1> %define CD_CMOS_DATA0 3b70h
   831                              <1> %define CD_CMOS_DATA1 3b72h
   832                              <1> %define CD_CMOS_DATA2 3b74h
   833                              <1> %define CD_CMOS_DATA3 3b78h
   834                              <1> 
   835                              <1> ;---------------------------------------------------------------------
   836                              <1> ; 読み込み
   837                              <1> ; cl+dx : 読み込み開始セクタ番号(16進)
   838                              <1> ; bx    : 読み込むセクタ数
   839                              <1> ; ds:di : 転送先アドレス
   840                              <1> ; [リターンコード]
   841                              <1> ;  ah : 0(正常終了)、bx : 読み残したセクタ数
   842                              <1> 
   843                              <1> cd_command_05:
   844 00000560 E8BF00              <1> 	call	cd_test_ready
   845 00000563 0F82A400            <1> 	jc	.error1          ; アクセスできる状態でない
   846 00000567 26837D0200          <1> 	cmp	word [es:di+2],0 ; bx
   847 0000056C 0F849600            <1> 	jz	.error2          ; 読み込むセクタ数が不適切
   848                              <1> 	
   849                              <1> 	; 読み込み開始セクタをセット
   850 00000570 BB603B              <1> 	mov	bx,CD_CMOS_PARA
   851 00000573 260FB65504          <1> 	movzx	dx,byte [es:di+4] ; cl
   852 00000578 8B4402              <1> 	mov	ax,[si+2]         ; dx
   853 0000057B E85F01              <1> 	call	cd_set_sectorno
   854                              <1> 
   855                              <1> 	; 読み込み終了セクタを計算し、セット
   856 0000057E 260FB65504          <1> 	movzx	dx,byte [es:di+4] ; cl
   857 00000583 8B4402              <1> 	mov	ax,[si+2]         ; dx
   858 00000586 268B5D02            <1> 	mov	bx,[es:di+2]      ; bx
   859 0000058A 4B                  <1> 	dec	bx
   860 0000058B 01D8                <1> 	add	ax,bx
   861 0000058D 83D200              <1> 	adc	dx,0
   862 00000590 BB663B              <1> 	mov	bx,CD_CMOS_PARA+6
   863 00000593 E84701              <1> 	call	cd_set_sectorno
   864                              <1> 
   865                              <1> 	; DMA初期化
   866 00000596 E87801              <1> 	call	cd_init_dma
   867 00000599 268B450A            <1> 	mov	ax,[es:di+0ah] ; di
   868 0000059D 268B550C            <1> 	mov	dx,[es:di+0ch] ; es
   869 000005A1 52                  <1> 	push	dx
   870 000005A2 C1E204              <1> 	shl	dx,4
   871 000005A5 01D0                <1> 	add	ax,dx
   872 000005A7 5A                  <1> 	pop	dx
   873 000005A8 C1EA0C              <1> 	shr	dx,12
   874 000005AB E87B01              <1> 	call	cd_dma_setaddress
   875 000005AE B8FF07              <1> 	mov	ax,7ffh
   876 000005B1 E87201              <1> 	call	cd_dma_setlength
   877 000005B4 E4AF                <1> 	in	al,0afh
   878 000005B6 2407                <1> 	and	al,7
   879 000005B8 E6AF                <1> 	out	0afh,al
   880                              <1> 
   881                              <1> 	; 読み込み開始
   882 000005BA B022                <1> 	mov	al,022h
   883 000005BC E89900              <1> 	call	cd_sendcommand
   884 000005BF E8BF00              <1> 	call	cd_recieve4byte
   885                              <1> 
   886 000005C2 BA703B              <1> 	mov	dx,CD_CMOS_DATA0
   887 000005C5 EC                  <1> 	in	al,dx
   888 000005C6 08C0                <1> 	or	al,al
   889 000005C8 7536                <1> 	jnz	.error3 ; コマンド実行エラー
   890                              <1> 
   891                              <1> .readloop:
   892 000005CA E8B400              <1> 	call	cd_recieve4byte
   893 000005CD BA703B              <1> 	mov	dx,CD_CMOS_DATA0
   894 000005D0 EC                  <1> 	in	al,dx
   895 000005D1 3C22                <1> 	cmp	al,22h
   896 000005D3 7406                <1> 	jz	.transfer
   897 000005D5 3C06                <1> 	cmp	al,6
   898 000005D7 741B                <1> 	jz	.exit
   899 000005D9 EB25                <1> 	jmp	.error3 ; エラーか、異常なリターンコード
   900                              <1> 
   901                              <1> .transfer:
   902                              <1> 	; CaptainYS >>
   903                              <1> 	; The original implementaiton is expecting DMA address be incremented automatically with AUTOI flag.
   904                              <1> 	;
   905                              <1> 	; Is AUTOI auto-increment or auto-initialize?  That's a good question, isn't it?
   906                              <1> 	; NED uPD71071 data sheet (English) page 19 top-right paragraph tells it is 'Autoinitialize'.
   907                              <1> 	; The correct behavior is resetting both address and counter at DMA END.  Not just counter.
   908                              <1> 	;
   909                              <1> 	; In fact, Shadow of the Beast demands DMA address not incremented automatically with AUTOI flag set.
   910                              <1> 	;
   911                              <1> 	; I have corrected by (1) get DMA address in DX|AX, (2) push to stack, pop, and (3) then increment.
   912 000005DB E85201              <1> 	call	cd_dma_getaddress
   913 000005DE 52                  <1> 	PUSH	DX
   914 000005DF 50                  <1> 	PUSH	AX
   915 000005E0 E85401              <1> 	call	cd_dma_transfer
   916 000005E3 58                  <1> 	POP		AX
   917 000005E4 5A                  <1> 	POP		DX
   918 000005E5 050008              <1> 	ADD		AX,0800h
   919 000005E8 83D200              <1> 	ADC		DX,0
   920                              <1> 	; CaptainYS <<
   921                              <1> 
   922 000005EB E83B01              <1> 	call	cd_dma_setaddress
   923 000005EE 26FF4D02            <1> 	dec	word [es:di+2] ; bx 読み残しセクタを減らす
   924 000005F2 EBD6                <1> 	jmp	.readloop
   925                              <1> 
   926                              <1> .exit:
   927 000005F4 E4AF                <1> 	in	al,0afh
   928 000005F6 0C08                <1> 	or	al,8
   929 000005F8 E6AF                <1> 	out	0afh,al
   930 000005FA 30E4                <1> 	xor	ah,ah
   931 000005FC E81700              <1> 	call	cd_store_result
   932 000005FF C3                  <1> 	ret
   933                              <1> 
   934                              <1> .error3:
   935 00000600 E4AF                <1> 	in	al,0afh
   936 00000602 0C08                <1> 	or	al,8
   937 00000604 E6AF                <1> 	out	0afh,al
   938                              <1> .error2:
   939 00000606 B480                <1> 	mov	ah,80h
   940 00000608 B90200              <1> 	mov	cx,2
   941                              <1> .error1:
   942 0000060B E80800              <1> 	call	cd_store_result
   943 0000060E C3                  <1> 	ret
   944                              <1> 
   945                              <1> 
   946                              <1> ;---------------------------------------------------------------------
   947                              <1> 
   948                              <1> ; ドライブの状態をチェック
   949                              <1> cd_command_0e:
   950 0000060F E81000              <1> 	call	cd_test_ready
   951 00000612 E80100              <1> 	call	cd_store_result
   952 00000615 C3                  <1> 	ret
   953                              <1> 
   954                              <1> 
   955                              <1> ;---------------------------------------------------------------------
   956                              <1> ; 下請け
   957                              <1> 
   958                              <1> ; コマンド実行結果を格納
   959                              <1> cd_store_result:
   960 00000616 886401              <1> 	mov	[si+1],ah
   961 00000619 08E4                <1> 	or	ah,ah
   962 0000061B 7904                <1> 	jns	.noerrorcode
   963 0000061D 26894D04            <1> 	mov	[es:di+4],cx
   964                              <1> .noerrorcode:
   965 00000621 C3                  <1> 	ret
   966                              <1> 
   967                              <1> ;----------
   968                              <1> 
   969                              <1> ; CDが読み込み可能かをチェック
   970                              <1> cd_test_ready:
   971 00000622 E89300              <1> 	call	cd_recieve
   972 00000625 E81D00              <1> 	call	cd_clear_parabuffer
   973 00000628 B0A0                <1> 	mov	al,0a0h
   974 0000062A E82B00              <1> 	call	cd_sendcommand
   975 0000062D E85100              <1> 	call	cd_recieve4byte
   976                              <1> 
   977 00000630 BA723B              <1> 	mov	dx,CD_CMOS_DATA1
   978 00000633 EC                  <1> 	in	al,dx
   979 00000634 240F                <1> 	and	al,0fh
   980                              <1> 
   981 00000636 B480                <1> 	mov	ah,80h
   982 00000638 3C09                <1> 	cmp	al,9 ; ノットレディ
   983 0000063A 7505                <1> 	jnz	.j1
   984 0000063C B90100              <1> 	mov	cx,1
   985 0000063F F9                  <1> 	stc
   986 00000640 C3                  <1> 	ret
   987                              <1> .j1:
   988 00000641 30E4                <1> 	xor	ah,ah
   989 00000643 F8                  <1> 	clc
   990 00000644 C3                  <1> 	ret
   991                              <1> 
   992                              <1> ;----------
   993                              <1> 
   994                              <1> ; パラメータ格納バッファをクリア
   995                              <1> cd_clear_parabuffer:
   996 00000645 51                  <1> 	push	cx
   997 00000646 52                  <1> 	push	dx
   998 00000647 BA603B              <1> 	mov	dx,CD_CMOS_PARA
   999 0000064A 30C0                <1> 	xor	al,al
  1000 0000064C B90800              <1> 	mov	cx,8
  1001                              <1> .loop:
  1002 0000064F EE                  <1> 	out	dx,al
  1003 00000650 83C202              <1> 	add	dx,2
  1004 00000653 E2FA                <1> 	loop	.loop
  1005 00000655 5A                  <1> 	pop	dx
  1006 00000656 59                  <1> 	pop	cx
  1007 00000657 C3                  <1> 	ret
  1008                              <1> 
  1009                              <1> ;----------
  1010                              <1> 
  1011                              <1> ; CDCコマンド発行
  1012                              <1> cd_sendcommand:
  1013 00000658 53                  <1> 	push	bx
  1014 00000659 51                  <1> 	push	cx
  1015 0000065A 52                  <1> 	push	dx
  1016 0000065B 88C4                <1> 	mov	ah,al
  1017 0000065D BAC004              <1> 	mov	dx,4c0h
  1018                              <1> .waitready:
  1019 00000660 EC                  <1> 	in	al,dx
  1020 00000661 A801                <1> 	test	al,1
  1021 00000663 74FB                <1> 	jz	.waitready
  1022                              <1> 
  1023 00000665 BB603B              <1> 	mov	bx,CD_CMOS_PARA
  1024 00000668 B90800              <1> 	mov	cx,8
  1025                              <1> .commandloop:
  1026 0000066B 89DA                <1> 	mov	dx,bx
  1027 0000066D EC                  <1> 	in	al,dx
  1028 0000066E BAC404              <1> 	mov	dx,4c4h
  1029 00000671 EE                  <1> 	out	dx,al
  1030 00000672 83C302              <1> 	add	bx,2
  1031 00000675 E2F4                <1> 	loop	.commandloop
  1032                              <1> 
  1033 00000677 88E0                <1> 	mov	al,ah
  1034 00000679 BAC204              <1> 	mov	dx,4c2h
  1035 0000067C EE                  <1> 	out	dx,al
  1036 0000067D 5A                  <1> 	pop	dx
  1037 0000067E 59                  <1> 	pop	cx
  1038 0000067F 5B                  <1> 	pop	bx
  1039 00000680 C3                  <1> 	ret
  1040                              <1> 
  1041                              <1> ;----------
  1042                              <1> 
  1043                              <1> ; CDCからの4バイトのステータスを取得
  1044                              <1> cd_recieve4byte:
  1045 00000681 50                  <1> 	push	ax
  1046 00000682 52                  <1> 	push	dx
  1047 00000683 BAC004              <1> 	mov	dx,4c0h
  1048                              <1> .loop:
  1049 00000686 EC                  <1> 	in	al,dx
  1050 00000687 A802                <1> 	test	al,2
  1051 00000689 74FB                <1> 	jz	.loop
  1052                              <1> 
  1053 0000068B 08C0                <1> 	or	al,al
  1054                              <1> 
  1055 0000068D BAC204              <1> 	mov	dx,4c2h
  1056 00000690 EC                  <1> 	in	al,dx
  1057 00000691 BA703B              <1> 	mov	dx,CD_CMOS_DATA0
  1058 00000694 EE                  <1> 	out	dx,al
  1059 00000695 BAC204              <1> 	mov	dx,4c2h
  1060 00000698 EC                  <1> 	in	al,dx
  1061 00000699 BA723B              <1> 	mov	dx,CD_CMOS_DATA1
  1062 0000069C EE                  <1> 	out	dx,al
  1063 0000069D BAC204              <1> 	mov	dx,4c2h
  1064 000006A0 EC                  <1> 	in	al,dx
  1065 000006A1 BA743B              <1> 	mov	dx,CD_CMOS_DATA2
  1066 000006A4 EE                  <1> 	out	dx,al
  1067 000006A5 BAC204              <1> 	mov	dx,4c2h
  1068 000006A8 EC                  <1> 	in	al,dx
  1069 000006A9 BA783B              <1> 	mov	dx,CD_CMOS_DATA3
  1070 000006AC EE                  <1> 	out	dx,al
  1071                              <1> 
  1072 000006AD 7906                <1> 	jns	.exit
  1073                              <1> 
  1074 000006AF BAC004              <1> 	mov	dx,4c0h ; clear irq
  1075 000006B2 B080                <1> 	mov	al,80h
  1076 000006B4 EE                  <1> 	out	dx,al
  1077                              <1> 
  1078                              <1> .exit:
  1079 000006B5 5A                  <1> 	pop	dx
  1080 000006B6 58                  <1> 	pop	ax
  1081 000006B7 C3                  <1> 	ret
  1082                              <1> 
  1083                              <1> ;----------
  1084                              <1> 
  1085                              <1> ; 食べ残しをクリア
  1086                              <1> cd_recieve:
  1087 000006B8 52                  <1> 	push	dx
  1088 000006B9 BAC004              <1> 	mov	dx,4c0h
  1089 000006BC EC                  <1> 	in	al,dx
  1090 000006BD A802                <1> 	test	al,2
  1091 000006BF 7408                <1> 	jz	.exit
  1092                              <1> 
  1093                              <1> .loop:
  1094 000006C1 E8BDFF              <1> 	call	cd_recieve4byte
  1095 000006C4 EC                  <1> 	in	al,dx
  1096 000006C5 A802                <1> 	test	al,2
  1097 000006C7 75F8                <1> 	jnz	.loop
  1098                              <1> .exit:
  1099 000006C9 5A                  <1> 	pop	dx
  1100 000006CA C3                  <1> 	ret
  1101                              <1> 
  1102                              <1> ;----------
  1103                              <1> 
  1104                              <1> ; 10進変換
  1105                              <1> cd_hextodecimal:
  1106 000006CB 51                  <1> 	push	cx
  1107 000006CC 88E5                <1> 	mov	ch,ah
  1108 000006CE 30E4                <1> 	xor	ah,ah
  1109 000006D0 B10A                <1> 	mov	cl,10
  1110 000006D2 F6F1                <1> 	div	cl
  1111 000006D4 C0E004              <1> 	shl	al,4
  1112 000006D7 00E0                <1> 	add	al,ah
  1113 000006D9 88EC                <1> 	mov	ah,ch
  1114 000006DB 59                  <1> 	pop	cx
  1115 000006DC C3                  <1> 	ret
  1116                              <1> 
  1117                              <1> ;----------
  1118                              <1> 
  1119                              <1> ; CDのセクタ番号を10進数に変換して保管
  1120                              <1> cd_set_sectorno:
  1121 000006DD 53                  <1> 	push	bx
  1122 000006DE 51                  <1> 	push	cx
  1123 000006DF 52                  <1> 	push	dx
  1124 000006E0 059600              <1> 	add	ax,150   ; CDの先頭セクタはセクタ150
  1125 000006E3 83D200              <1> 	adc	dx,0
  1126 000006E6 B99411              <1> 	mov	cx,75*60 ; M-S-F の M
  1127 000006E9 F7F1                <1> 	div	cx
  1128 000006EB 92                  <1> 	xchg	ax,dx
  1129                              <1> 	; dx = M, ax = S-F
  1130 000006EC B14B                <1> 	mov	cl,75    ; S
  1131 000006EE F6F1                <1> 	div	cl
  1132 000006F0 88D1                <1> 	mov	cl,dl
  1133 000006F2 86C4                <1> 	xchg	al,ah
  1134                              <1> 
  1135                              <1> 	; cl-ah-al : M-S-F
  1136                              <1> 
  1137 000006F4 8D5704              <1> 	lea	dx,[bx+4]
  1138 000006F7 E8D1FF              <1> 	call	cd_hextodecimal
  1139 000006FA EE                  <1> 	out	dx,al
  1140 000006FB 83EA02              <1> 	sub	dx,2
  1141 000006FE 88E0                <1> 	mov	al,ah
  1142 00000700 E8C8FF              <1> 	call	cd_hextodecimal
  1143 00000703 EE                  <1> 	out	dx,al
  1144 00000704 83EA02              <1> 	sub	dx,2
  1145 00000707 88C8                <1> 	mov	al,cl
  1146 00000709 E8BFFF              <1> 	call	cd_hextodecimal
  1147 0000070C EE                  <1> 	out	dx,al
  1148 0000070D 5A                  <1> 	pop	dx
  1149 0000070E 59                  <1> 	pop	cx
  1150 0000070F 5B                  <1> 	pop	bx
  1151 00000710 C3                  <1> 	ret
  1152                              <1> 
  1153                              <1> ;----------
  1154                              <1> 
  1155                              <1> cd_init_dma:
  1156                              <1> 	; リセット
  1157 00000711 B003                <1> 	mov	al,3
  1158 00000713 E6A0                <1> 	out	0a0h,al
  1159                              <1> 
  1160                              <1> 	; チャネルを CD にセット
  1161 00000715 B003                <1> 	mov	al,3
  1162 00000717 E6A1                <1> 	out	0a1h,al
  1163                              <1> 
  1164                              <1> 	; DMA動作禁止
  1165 00000719 B024                <1> 	mov	al,24h
  1166 0000071B E6A8                <1> 	out	0a8h,al
  1167                              <1> 
  1168                              <1> 	; デバイスコントロール
  1169 0000071D 30C0                <1> 	xor	al,al
  1170 0000071F E6A9                <1> 	out	0a9h,al
  1171                              <1> 
  1172                              <1> 	; モードコントロール
  1173 00000721 B054                <1> 	mov	al,54h
  1174 00000723 E6AA                <1> 	out	0aah,al
  1175 00000725 C3                  <1> 	ret
  1176                              <1> 
  1177                              <1> ;----------
  1178                              <1> 
  1179                              <1> cd_dma_setlength:
  1180 00000726 E7A2                <1> 	out	0a2h,ax
  1181 00000728 C3                  <1> 	ret
  1182                              <1> 
  1183                              <1> ;----------
  1184                              <1> 
  1185                              <1> cd_dma_setaddress:
  1186 00000729 E7A4                <1> 	out	0a4h,ax
  1187 0000072B 89D0                <1> 	mov	ax,dx
  1188 0000072D E7A6                <1> 	out	0a6h,ax
  1189 0000072F C3                  <1> 	ret
  1190                              <1> 
  1191                              <1> ;----------
  1192                              <1> 
  1193                              <1> cd_dma_getaddress:
  1194 00000730 E5A6                <1> 	in	ax,0a6h
  1195 00000732 89C2                <1> 	mov	dx,ax
  1196 00000734 E5A4                <1> 	in	ax,0a4h
  1197 00000736 C3                  <1> 	ret
  1198                              <1> 
  1199                              <1> ;----------
  1200                              <1> 
  1201                              <1> ; DMA転送を行う
  1202                              <1> cd_dma_transfer:
  1203 00000737 52                  <1> 	push	dx
  1204                              <1> 	; DMA動作許可
  1205 00000738 B020                <1> 	mov	al,20h
  1206 0000073A E6A8                <1> 	out	0a8h,al
  1207                              <1> 
  1208                              <1> 	; 転送開始
  1209 0000073C BAC604              <1> 	mov	dx,4c6h
  1210 0000073F B010                <1> 	mov	al,10h
  1211 00000741 EE                  <1> 	out	dx,al
  1212                              <1> 
  1213                              <1> 	; 転送が終わるまで待つ
  1214 00000742 BAC004              <1> 	mov	dx,4c0h
  1215                              <1> .loop:
  1216 00000745 EC                  <1> 	in	al,dx
  1217 00000746 A810                <1> 	test	al,10h
  1218 00000748 75FB                <1> 	jnz	.loop
  1219                              <1> 
  1220                              <1> 	; DMA動作禁止
  1221 0000074A B024                <1> 	mov	al,24h
  1222 0000074C E6A8                <1> 	out	0a8h,al
  1223 0000074E 5A                  <1> 	pop	dx
  1224 0000074F C3                  <1> 	ret
   815                                  %include "sys_fd.asm"
   816                              <1> ; version 2003.03.04.1
   817                              <1> ;---------------------------------------------------------------------
   818                              <1> ;
   819                              <1> ; FM TOWNS 互換 ROM シリーズ
   820                              <1> ;
   821                              <1> ; FMT_SYS.ROM : FDアクセス
   822                              <1> ;
   823                              <1> ; by Kasanova
   824                              <1> ;
   825                              <1> ;---------------------------------------------------------------------
   826                              <1> ; ※単独ではアセンブルしません
   827                              <1> 
   828                              <1> ;---------------------------------------------------------------------
   829                              <1> ; 読み込み
   830                              <1> ; cl+dx : 読み込み開始セクタ番号(16進)
   831                              <1> ; bx    : 読み込むセクタ数
   832                              <1> ; ds:di : 転送先アドレス
   833                              <1> ; [リターンコード]
   834                              <1> ;  ah : 0(正常終了)、bx : 読み残したセクタ数
   835                              <1> 
   836                              <1> fd_command_05:
   837 00000750 EBFE                <1> 	jmp		fd_command_05		; by CaptainYS
   838 00000752 C3                  <1> 	ret
   839                              <1> 
   840                              <1> ;---------------------------------------------------------------------
   841                              <1> ; ドライブの状態をチェック
   842                              <1> 
   843                              <1> fd_command_0e:
   844 00000753 C3                  <1> 	ret
   845                              <1> 
   816                                  %include "sys_hd.asm"
   817                              <1> ; version 2003.03.04.1
   818                              <1> ;---------------------------------------------------------------------
   819                              <1> ;
   820                              <1> ; FM TOWNS 互換 ROM シリーズ
   821                              <1> ;
   822                              <1> ; FMT_SYS.ROM : HDアクセス
   823                              <1> ;
   824                              <1> ; by Kasanova
   825                              <1> ;
   826                              <1> ;---------------------------------------------------------------------
   827                              <1> ; ※単独ではアセンブルしません
   828                              <1> 
   829                              <1> ; SCSIコントロールは面倒くさいので、HDアクセスはうんづに投げられる
   830                              <1> ; ようにする予定
   831                              <1> 
   832                              <1> ;---------------------------------------------------------------------
   833                              <1> ; 読み込み
   834                              <1> ; cl+dx : 読み込み開始セクタ番号(16進)
   835                              <1> ; bx    : 読み込むセクタ数
   836                              <1> ; ds:di : 転送先アドレス
   837                              <1> ; [リターンコード]
   838                              <1> ;  ah : 0(正常終了)、bx : 読み残したセクタ数
   839                              <1> 
   840                              <1> hd_command_05:
   841 00000754 C3                  <1> 	ret
   842                              <1> 
   843                              <1> ;---------------------------------------------------------------------
   844                              <1> ; ドライブの状態をチェック
   845                              <1> 
   846                              <1> hd_command_0e:
   847 00000755 C3                  <1> 	ret
   848                              <1> 
   817                                  %include "sys_osr.asm"
   818                              <1> ; version 2003.03.04.1
   819                              <1> ;---------------------------------------------------------------------
   820                              <1> ;
   821                              <1> ; FM TOWNS 互換 ROM シリーズ
   822                              <1> ;
   823                              <1> ; FMT_SYS.ROM : RAM/ROMドライブアクセス
   824                              <1> ;
   825                              <1> ; by Kasanova
   826                              <1> ;
   827                              <1> ;---------------------------------------------------------------------
   828                              <1> ; ※単独ではアセンブルしません
   829                              <1> 
   830                              <1> ;---------------------------------------------------------------------
   831                              <1> ;■備考■
   832                              <1> ; ・メディア番号 0x40 はRAMあるいはROMに振られたメディア番号である
   833                              <1> ; ・アクセス先の物理アドレスは、メディア番号の下位4ビットによって決まる
   834                              <1> ; ・将来的には386SX系のメモリマップも考慮すること
   835                              <1> ;
   836                              <1> ;   0: 00000000h- 7fffffffh
   837                              <1> ;   1: 無効
   838                              <1> ;   2: c2000000h- c207ffffh (書き込み禁止)
   839                              <1> ;   3: 無効
   840                              <1> ;   4: 無効
   841                              <1> ;   5: 無効
   842                              <1> ;   6: 無効
   843                              <1> ;   7: 00000000h- ffffffffh (BYTEアクセス)
   844                              <1> ;   8: 00000000h- ffffffffh (DWORDアクセス)
   845                              <1> ;   9: c2000000h- c207ffffh (書き込み禁止)
   846                              <1> ;   a: c0000000h- c007ffffh ICメモリ存在チェックあり
   847                              <1> ;   b: fffc0000h- ffffffffh (書き込み禁止)
   848                              <1> ;   c: 80000000h- 8007ffffh
   849                              <1> ;   d: 80100000h- 8017ffffh
   850                              <1> ;   e: c2140000h- c2141fffh
   851                              <1> ;   f: 無効
   852                              <1> ;
   853                              <1> ;---------------------------------------------------------------------
   854                              <1> 
   855                              <1> ;---------------------------------------------------------------------
   856                              <1> ; 読み込み＆書き込み
   857                              <1> 
   858                              <1> osrom_command_05:
   859                              <1> osrom_command_06:
   860 00000756 8A04                <1> 	mov	al,[si]
   861 00000758 240F                <1> 	and	al,0fh
   862                              <1> 
   863 0000075A 3C08                <1> 	cmp	al,8 ; とりあえず、これだけ対応
   864 0000075C 7402                <1> 	jz	.ok
   865 0000075E EBFE                <1> 	jmp $
   866                              <1> .ok:
   867                              <1> 	; レジスタの上位16ビットを変更してはいけない
   868 00000760 6660                <1> 	pushad
   869                              <1> 
   870 00000762 6631D2              <1> 	xor	edx,edx
   871 00000765 660FB7F6            <1> 	movzx	esi,si
   872 00000769 8CDA                <1> 	mov	dx,ds
   873 0000076B 66C1E204            <1> 	shl	edx,4
   874 0000076F 6601D6              <1> 	add	esi,edx
   875                              <1> 
   876 00000772 6631D2              <1> 	xor	edx,edx
   877 00000775 660FB7FF            <1> 	movzx	edi,di
   878 00000779 8CC2                <1> 	mov	dx,es
   879 0000077B 66C1E204            <1> 	shl	edx,4
   880 0000077F 6601D7              <1> 	add	edi,edx
   881                              <1> 
   882                              <1> 	; もう少しスマートな方法を考えましょう
   883 00000782 B80400              <1> 	mov	ax,PMODE_TRANSFERMEM
   884 00000785 83EC06              <1> 	sub	sp,6
   885 00000788 89E5                <1> 	mov	bp,sp
   886 0000078A 0F014600            <1> 	sgdt	[bp]
   887 0000078E 55                  <1> 	push	bp
   888 0000078F E812FA              <1> 	call	set_gdt
   889 00000792 E853FA              <1> 	call	call_pmode
   890 00000795 5D                  <1> 	pop	bp
   891 00000796 0F015600            <1> 	lgdt	[bp]
   892 0000079A 83C406              <1> 	add	sp,6
   893                              <1> 
   894 0000079D 6661                <1> 	popad
   895 0000079F C3                  <1> 	ret
   896                              <1> 
   897                              <1> 
   818                                  
   819                                  %include "sys_cmos.asm"
   820                              <1> ; version 2003.03.04.1
   821                              <1> ;---------------------------------------------------------------------
   822                              <1> ;
   823                              <1> ; FM TOWNS 互換 ROM シリーズ
   824                              <1> ;
   825                              <1> ; FMT_SYS.ROM : CMOS BIOS
   826                              <1> ;
   827                              <1> ; by Kasanova
   828                              <1> ;
   829                              <1> ;---------------------------------------------------------------------
   830                              <1> ; ※単独ではアセンブルしません
   831                              <1> 
   832                              <1> 
   833                              <1> ;---------------------------------------------------------------------
   834                              <1> 
   835                              <1> cmos_command_xx:
   836 000007A0 EBFE                <1> 	jmp	$
   837                              <1> 
   838                              <1> ;---------------------------------------------------------------------
   839                              <1> 
   840                              <1> cmos_command_fd:
   841 000007A2 EBFE                <1> 	jmp	$
   842                              <1> 
   843                              <1> ;---------------------------------------------------------------------
   844                              <1> 
   845                              <1> ; init. cmos
   846                              <1> cmos_command_00:
   847 000007A4 8CC8                <1> 	mov	ax,cs
   848 000007A6 8ED8                <1> 	mov	ds,ax
   849                              <1> 
   850                              <1> 	; まずクリア
   851 000007A8 31D2                <1> 	xor	dx,dx
   852 000007AA 30C0                <1> 	xor	al,al
   853 000007AC B9A800              <1> 	mov	cx,0a8h
   854                              <1> .loop1:
   855 000007AF E89001              <1> 	call	cmos_write1byte
   856 000007B2 42                  <1> 	inc	dx
   857 000007B3 E2FA                <1> 	loop	.loop1
   858                              <1> 
   859                              <1> 	; 初期データ転送
   860 000007B5 31D2                <1> 	xor	dx,dx
   861 000007B7 BE[0808]            <1> 	mov	si,.initdata
   862 000007BA B93C00              <1> 	mov	cx,.initdata_end-.initdata
   863                              <1> .loop2:
   864 000007BD AC                  <1> 	lodsb
   865 000007BE E88101              <1> 	call	cmos_write1byte
   866 000007C1 42                  <1> 	inc	dx
   867 000007C2 E2F9                <1> 	loop	.loop2
   868                              <1> 
   869 000007C4 BAA000              <1> 	mov	dx,0a0h
   870 000007C7 BE[4408]            <1> 	mov	si,.initdata2
   871 000007CA B90800              <1> 	mov	cx,8
   872                              <1> .loop3:
   873 000007CD AC                  <1> 	lodsb
   874 000007CE E87101              <1> 	call	cmos_write1byte
   875 000007D1 42                  <1> 	inc	dx
   876 000007D2 E2F9                <1> 	loop	.loop3
   877                              <1> 
   878 000007D4 BAA000              <1> 	mov	dx,0a0h
   879 000007D7 E85601              <1> 	call	cmos_read2byte
   880 000007DA 89C2                <1> 	mov	dx,ax
   881                              <1> .loop4:
   882 000007DC 52                  <1> 	push	dx
   883 000007DD 31C0                <1> 	xor	ax,ax
   884 000007DF E86001              <1> 	call	cmos_write1byte
   885 000007E2 5A                  <1> 	pop	dx
   886 000007E3 42                  <1> 	inc	dx
   887 000007E4 81FAC107            <1> 	cmp	dx,7c1h
   888 000007E8 72F2                <1> 	jc	.loop4
   889                              <1> 
   890 000007EA E82C02              <1> 	call	cmos_init_blocknotable
   891                              <1> 
   892 000007ED E84902              <1> 	call	cmos_get_cmosheadersum
   893 000007F0 BAA400              <1> 	mov	dx,0a4h
   894 000007F3 E85501              <1> 	call	cmos_write2byte
   895                              <1> 
   896                              <1> 	; チェックサムテーブル初期化
   897 000007F6 31C0                <1> 	xor	ax,ax
   898 000007F8 30C9                <1> 	xor	cl,cl
   899                              <1> .loop5:
   900 000007FA 50                  <1> 	push	ax
   901 000007FB E86801              <1> 	call	cmos_write_3f82
   902 000007FE 58                  <1> 	pop	ax
   903 000007FF FEC0                <1> 	inc	al
   904 00000801 3C10                <1> 	cmp	al,10h
   905 00000803 72F5                <1> 	jc	.loop5
   906                              <1> 
   907 00000805 30E4                <1> 	xor	ah,ah
   908 00000807 C3                  <1> 	ret
   909                              <1> 
   910                              <1> 	; cmos上のデータブロックを定義データ
   911                              <1> .initdata:
   912 00000808 01FF                <1> 	db	1,0ffh       ; ブロック存在フラグ＋ブロック番号？
   913 0000080A 424F4F54            <1> 	db	'BOOT'       ; 識別子
   914 0000080E A8004000            <1> 	dw	00a8h, 0040h ; cmos上のアドレスとサイズ
   915                              <1> 
   916 00000812 01FE                <1> 	db	1,0feh
   917 00000814 53455455            <1> 	db	'SETU'
   918 00000818 E8000001            <1> 	dw	00e8h, 0100h
   919                              <1> 
   920 0000081C 01FD                <1> 	db	1,0fdh
   921 0000081E 4C4F4720            <1> 	db	'LOG '
   922 00000822 E8011003            <1> 	dw	01e8h, 0310h
   923                              <1> 	
   924 00000826 01FC                <1> 	db	1,0fch
   925 00000828 4F415359            <1> 	db	'OASY'
   926 0000082C F8042000            <1> 	dw	04f8h, 0020h
   927                              <1> 
   928 00000830 01FB                <1> 	db	1,0fbh
   929 00000832 58454E49            <1> 	db	'XENI'
   930 00000836 18051000            <1> 	dw	0518h, 0010h
   931                              <1> 
   932 0000083A 01FA                <1> 	db	1,0fah
   933 0000083C 544F574E            <1> 	db	'TOWN'
   934 00000840 28050001            <1> 	dw	0528h, 0100h
   935                              <1> .initdata_end:
   936                              <1> 
   937                              <1> .initdata2:
   938 00000844 2806990100007941    <1> 	db	28h,06h,99h,01h, 00h,00h,79h,41h
   939                              <1> 
   940                              <1> ;---------------------------------------------------------------------
   941                              <1> 
   942                              <1> cmos_command_01:
   943 0000084C EBFE                <1> 	jmp	$
   944                              <1> 
   945                              <1> ;---------------------------------------------------------------------
   946                              <1> 
   947                              <1> cmos_command_02:
   948 0000084E EBFE                <1> 	jmp	$
   949                              <1> 
   950                              <1> ;---------------------------------------------------------------------
   951                              <1> 
   952                              <1> cmos_command_03:
   953 00000850 EBFE                <1> 	jmp	$
   954                              <1> 
   955                              <1> ;---------------------------------------------------------------------
   956                              <1> 
   957                              <1> cmos_command_04:
   958 00000852 EBFE                <1> 	jmp	$
   959                              <1> 
   960                              <1> ;---------------------------------------------------------------------
   961                              <1> 
   962                              <1> ; CMOSのa2h番地の情報をbxに返すだけ
   963                              <1> cmos_command_05:
   964 00000854 BAA200              <1> 	mov	dx,0a2h
   965 00000857 E8D600              <1> 	call	cmos_read2byte
   966 0000085A 894604              <1> 	mov	[bp+4],ax      ; bx
   967 0000085D 30E4                <1> 	xor	ah,ah
   968 0000085F C3                  <1> 	ret
   969                              <1> 
   970                              <1> ;---------------------------------------------------------------------
   971                              <1> 
   972                              <1> cmos_command_06:
   973 00000860 EBFE                <1> 	jmp	$
   974                              <1> 
   975                              <1> ;---------------------------------------------------------------------
   976                              <1> 
   977                              <1> ; transfer block to cmos
   978                              <1> cmos_command_10:
   979                              <1> 	; 範囲チェック
   980 00000862 8A4E06              <1> 	mov	cl,[bp+6] ; cl
   981 00000865 8A4602              <1> 	mov	al,[bp+2] ; al
   982 00000868 E85901              <1> 	call	cmos_check_blockvalidity
   983 0000086B 08E4                <1> 	or	ah,ah
   984 0000086D 750B                <1> 	jnz	.exit1
   985 0000086F E88401              <1> 	call	cmos_check_transferrange
   986 00000872 08E4                <1> 	or	ah,ah
   987 00000874 7504                <1> 	jnz	.exit1
   988                              <1> 
   989                              <1> 	; 転送量が 0 なら何もしない
   990 00000876 09DB                <1> 	or	bx,bx
   991 00000878 7501                <1> 	jnz	.starttransfer
   992                              <1> .exit1:
   993 0000087A C3                  <1> 	ret
   994                              <1> 
   995                              <1> .starttransfer:
   996 0000087B 8B760E              <1> 	mov	si,[bp+0eh] ; di
   997 0000087E 8E5E10              <1> 	mov	ds,[bp+10h] ; ds
   998 00000881 89D9                <1> 	mov	cx,bx
   999                              <1> .loop:
  1000 00000883 AC                  <1> 	lodsb
  1001 00000884 E8BB00              <1> 	call	cmos_write1byte
  1002 00000887 42                  <1> 	inc	dx
  1003 00000888 E2F9                <1> 	loop	.loop
  1004                              <1> 
  1005 0000088A 0FB64602            <1> 	movzx	ax,byte [bp+2]
  1006 0000088E 89C2                <1> 	mov	dx,ax
  1007 00000890 01D2                <1> 	add	dx,dx ; dx<-ax*10
  1008 00000892 01D2                <1> 	add	dx,dx
  1009 00000894 01D2                <1> 	add	dx,dx
  1010 00000896 01C2                <1> 	add	dx,ax
  1011 00000898 01C2                <1> 	add	dx,ax
  1012 0000089A E88C00              <1> 	call	cmos_read1byte
  1013 0000089D 08C0                <1> 	or	al,al
  1014 0000089F 790B                <1> 	jns	.exit2
  1015                              <1> 
  1016 000008A1 E8E300              <1> 	call	cmos_calc_checksum
  1017 000008A4 88C1                <1> 	mov	cl,al
  1018 000008A6 8A4602              <1> 	mov	al,[bp+2]
  1019 000008A9 E8BA00              <1> 	call	cmos_write_3f82
  1020                              <1> .exit2:
  1021 000008AC 30E4                <1> 	xor	ah,ah
  1022 000008AE C3                  <1> 	ret
  1023                              <1> 
  1024                              <1> ;---------------------------------------------------------------------
  1025                              <1> 
  1026                              <1> ; transfer block from cmos
  1027                              <1> cmos_command_11:
  1028                              <1> 	; 範囲チェック
  1029 000008AF 8A4E06              <1> 	mov	cl,[bp+6] ; cl
  1030 000008B2 8A4602              <1> 	mov	al,[bp+2] ; al
  1031 000008B5 E80C01              <1> 	call	cmos_check_blockvalidity
  1032 000008B8 08E4                <1> 	or	ah,ah
  1033 000008BA 750B                <1> 	jnz	.exit1
  1034 000008BC E83701              <1> 	call	cmos_check_transferrange
  1035 000008BF 08E4                <1> 	or	ah,ah
  1036 000008C1 7504                <1> 	jnz	.exit1
  1037                              <1> 
  1038                              <1> 	; 転送量が 0 なら何もしない
  1039 000008C3 09DB                <1> 	or	bx,bx
  1040 000008C5 7501                <1> 	jnz	.starttransfer
  1041                              <1> .exit1:
  1042 000008C7 C3                  <1> 	ret
  1043                              <1> 
  1044                              <1> .starttransfer:
  1045 000008C8 8B7E0E              <1> 	mov	di,[bp+0eh] ; di
  1046 000008CB 8E4610              <1> 	mov	es,[bp+10h] ; ds
  1047 000008CE 89D9                <1> 	mov	cx,bx
  1048                              <1> .loop:
  1049 000008D0 E85600              <1> 	call	cmos_read1byte
  1050 000008D3 AA                  <1> 	stosb
  1051 000008D4 42                  <1> 	inc	dx
  1052 000008D5 E2F9                <1> 	loop	.loop
  1053 000008D7 30E4                <1> 	xor	ah,ah
  1054 000008D9 C3                  <1> 	ret
  1055                              <1> 
  1056                              <1> ;---------------------------------------------------------------------
  1057                              <1> ; cmosヘッダと各ブロックのチェック
  1058                              <1> ; out: ah != 0 : ヘッダ異常
  1059                              <1> ;      ah == 0 : ヘッダ正常、bxにチェックサムが合わなかった
  1060                              <1> ;                ブロックがビット単位でセットされる
  1061                              <1> cmos_command_20:
  1062 000008DA BAA600              <1> 	mov	dx,0a6h
  1063 000008DD E85000              <1> 	call	cmos_read2byte
  1064 000008E0 3D7941              <1> 	cmp	ax,4179h        ; ヘッダの識別子？値自体に意味があるか不明
  1065 000008E3 7403                <1> 	jz	.next
  1066 000008E5 B403                <1> 	mov	ah,3
  1067 000008E7 C3                  <1> 	ret
  1068                              <1> .next:
  1069 000008E8 E84E01              <1> 	call	cmos_get_cmosheadersum
  1070 000008EB 89C3                <1> 	mov	bx,ax
  1071 000008ED BAA400              <1> 	mov	dx,0a4h
  1072 000008F0 E83D00              <1> 	call	cmos_read2byte
  1073 000008F3 39C3                <1> 	cmp	bx,ax
  1074 000008F5 B92000              <1> 	mov	cx,20h
  1075 000008F8 B480                <1> 	mov	ah,80h
  1076 000008FA 7503                <1> 	jnz	.j1
  1077 000008FC E85001              <1> 	call	cmos_check_allblocks
  1078                              <1> .j1:
  1079 000008FF 895E04              <1> 	mov	[bp+4],bx ; bx
  1080 00000902 C3                  <1> 	ret
  1081                              <1> 
  1082                              <1> ;---------------------------------------------------------------------
  1083                              <1> ; CMOS BIOS 下請け
  1084                              <1> 
  1085                              <1> ; CMOSアドレスをI/Oアドレスに変換
  1086                              <1> ; in dx:cmos address -> out dx:i/o address
  1087                              <1> cmos_getaddress:
  1088 00000903 81FAC007            <1> 	cmp	dx,7c0h
  1089 00000907 7709                <1> 	ja	.over
  1090                              <1> 
  1091 00000909 01D2                <1> 	add	dx,dx
  1092 0000090B 81C20030            <1> 	add	dx,3000h
  1093 0000090F 31C0                <1> 	xor	ax,ax
  1094 00000911 C3                  <1> 	ret
  1095                              <1> .over:
  1096 00000912 51                  <1> 	push	cx
  1097 00000913 81EAC107            <1> 	sub	dx,7c1h
  1098 00000917 B90008              <1> 	mov	cx,800h
  1099 0000091A 89D0                <1> 	mov	ax,dx
  1100 0000091C 31D2                <1> 	xor	dx,dx
  1101 0000091E F7F1                <1> 	div	cx
  1102 00000920 40                  <1> 	inc	ax
  1103 00000921 01D2                <1> 	add	dx,dx
  1104 00000923 81C20030            <1> 	add	dx,3000h
  1105 00000927 59                  <1> 	pop	cx
  1106 00000928 C3                  <1> 	ret
  1107                              <1> 
  1108                              <1> ;--------------------------------------
  1109                              <1> 
  1110                              <1> cmos_read1byte:
  1111 00000929 52                  <1> 	push	dx
  1112 0000092A E8D6FF              <1> 	call	cmos_getaddress
  1113 0000092D EC                  <1> 	in	al,dx
  1114 0000092E 5A                  <1> 	pop	dx
  1115 0000092F C3                  <1> 	ret
  1116                              <1> 
  1117                              <1> ;--------------------------------------
  1118                              <1> 
  1119                              <1> cmos_read2byte:
  1120 00000930 51                  <1> 	push	cx
  1121 00000931 52                  <1> 	push	dx
  1122 00000932 E8F4FF              <1> 	call	cmos_read1byte
  1123 00000935 88C1                <1> 	mov	cl,al
  1124 00000937 42                  <1> 	inc	dx
  1125 00000938 E8EEFF              <1> 	call	cmos_read1byte
  1126 0000093B 88CC                <1> 	mov	ah,cl
  1127 0000093D 86C4                <1> 	xchg	al,ah
  1128 0000093F 5A                  <1> 	pop	dx
  1129 00000940 59                  <1> 	pop	cx
  1130 00000941 C3                  <1> 	ret
  1131                              <1> 
  1132                              <1> ;--------------------------------------
  1133                              <1> 
  1134                              <1> cmos_write1byte:
  1135 00000942 52                  <1> 	push	dx
  1136 00000943 50                  <1> 	push	ax
  1137 00000944 E8BCFF              <1> 	call	cmos_getaddress
  1138 00000947 58                  <1> 	pop	ax
  1139 00000948 EE                  <1> 	out	dx,al
  1140 00000949 5A                  <1> 	pop	dx
  1141 0000094A C3                  <1> 	ret
  1142                              <1> 
  1143                              <1> ;--------------------------------------
  1144                              <1> 
  1145                              <1> cmos_write2byte:
  1146 0000094B 52                  <1> 	push	dx
  1147 0000094C 50                  <1> 	push	ax
  1148 0000094D E8F2FF              <1> 	call	cmos_write1byte
  1149 00000950 42                  <1> 	inc	dx
  1150 00000951 88E0                <1> 	mov	al,ah
  1151 00000953 E8ECFF              <1> 	call	cmos_write1byte
  1152                              <1> 	
  1153 00000956 58                  <1> 	pop	ax
  1154 00000957 5A                  <1> 	pop	dx
  1155 00000958 C3                  <1> 	ret
  1156                              <1> 
  1157                              <1> ;--------------------------------------
  1158                              <1> ; チェックサムテーブル読み込み
  1159                              <1> 
  1160                              <1> cmos_read_3f82:
  1161 00000959 0FBED0              <1> 	movsx	dx,al
  1162 0000095C 01D2                <1> 	add	dx,dx
  1163 0000095E 81C2823F            <1> 	add	dx,3f82h
  1164 00000962 EC                  <1> 	in	al,dx
  1165 00000963 88C1                <1> 	mov	cl,al
  1166 00000965 C3                  <1> 	ret
  1167                              <1> 
  1168                              <1> ;--------------------------------------
  1169                              <1> ; チェックサムテーブル書き込み
  1170                              <1> 
  1171                              <1> cmos_write_3f82:
  1172 00000966 0FBED0              <1> 	movsx	dx,al
  1173 00000969 01D2                <1> 	add	dx,dx
  1174 0000096B 81C2823F            <1> 	add	dx,3f82h
  1175 0000096F 88C8                <1> 	mov	al,cl
  1176 00000971 EE                  <1> 	out	dx,al
  1177 00000972 C3                  <1> 	ret
  1178                              <1> 
  1179                              <1> ;--------------------------------------
  1180                              <1> ; ブロック番号テーブル読み込み
  1181                              <1> 
  1182                              <1> cmos_read_3fa2:
  1183 00000973 52                  <1> 	push	dx
  1184 00000974 01D2                <1> 	add	dx,dx
  1185 00000976 81C2A23F            <1> 	add	dx,3fa2h
  1186 0000097A EC                  <1> 	in	al,dx
  1187 0000097B 5A                  <1> 	pop	dx
  1188 0000097C C3                  <1> 	ret
  1189                              <1> 
  1190                              <1> ;--------------------------------------
  1191                              <1> ; ブロック番号テーブル書き込み
  1192                              <1> 
  1193                              <1> cmos_write_3fa2:
  1194 0000097D 52                  <1> 	push	dx
  1195 0000097E 01D2                <1> 	add	dx,dx
  1196 00000980 81C2A23F            <1> 	add	dx,3fa2h
  1197 00000984 EE                  <1> 	out	dx,al
  1198 00000985 5A                  <1> 	pop	dx
  1199 00000986 C3                  <1> 	ret
  1200                              <1> 
  1201                              <1> ;--------------------------------------
  1202                              <1> 
  1203                              <1> ; 指定されたcmosブロックのチェックサムを返す
  1204                              <1> ; in al: block no
  1205                              <1> cmos_calc_checksum:
  1206 00000987 53                  <1> 	push	bx
  1207 00000988 E81000              <1> 	call	cmos_getaddlength
  1208 0000098B 30DB                <1> 	xor	bl,bl
  1209                              <1> .loop:
  1210 0000098D E899FF              <1> 	call	cmos_read1byte
  1211 00000990 00C3                <1> 	add	bl,al
  1212 00000992 42                  <1> 	inc	dx
  1213 00000993 E2F8                <1> 	loop	.loop
  1214 00000995 31C0                <1> 	xor	ax,ax
  1215 00000997 28D8                <1> 	sub	al,bl
  1216 00000999 5B                  <1> 	pop	bx
  1217 0000099A C3                  <1> 	ret
  1218                              <1> 
  1219                              <1> ;--------------------------------------
  1220                              <1> 
  1221                              <1> ; 指定されたcmosブロックのアドレスと長さを返す
  1222                              <1> ; in : al: no
  1223                              <1> ; out: cx:length, dx:cmos address
  1224                              <1> cmos_getaddlength:
  1225 0000099B 30E4                <1> 	xor	ah,ah ; dx<-ax*10
  1226 0000099D 89C2                <1> 	mov	dx,ax
  1227 0000099F 01D2                <1> 	add	dx,dx
  1228 000009A1 01D2                <1> 	add	dx,dx
  1229 000009A3 01D2                <1> 	add	dx,dx
  1230 000009A5 01C2                <1> 	add	dx,ax
  1231 000009A7 01C2                <1> 	add	dx,ax
  1232                              <1> 
  1233 000009A9 83C208              <1> 	add	dx,8
  1234 000009AC E881FF              <1> 	call	cmos_read2byte
  1235 000009AF 89C1                <1> 	mov	cx,ax ; length
  1236                              <1> 
  1237 000009B1 83EA02              <1> 	sub	dx,2
  1238 000009B4 E879FF              <1> 	call	cmos_read2byte
  1239 000009B7 89C2                <1> 	mov	dx,ax ; address
  1240 000009B9 C3                  <1> 	ret
  1241                              <1> 
  1242                              <1> ;--------------------------------------
  1243                              <1> 
  1244                              <1> cmos_check_blockrange:
  1245 000009BA 3C10                <1> 	cmp	al,10h
  1246 000009BC 7203                <1> 	jc	.j1
  1247 000009BE B402                <1> 	mov	ah,2
  1248 000009C0 C3                  <1> 	ret
  1249                              <1> .j1:
  1250 000009C1 30E4                <1> 	xor	ah,ah
  1251 000009C3 C3                  <1> 	ret
  1252                              <1> 
  1253                              <1> ;--------------------------------------
  1254                              <1> 
  1255                              <1> ; ブロックの有効性をチェック
  1256                              <1> ; in: al, cl
  1257                              <1> cmos_check_blockvalidity:
  1258 000009C4 E8F3FF              <1> 	call	cmos_check_blockrange
  1259 000009C7 08E4                <1> 	or	ah,ah
  1260 000009C9 7401                <1> 	jz	.j1
  1261 000009CB C3                  <1> 	ret
  1262                              <1> .j1:
  1263 000009CC 30E4                <1> 	xor	ah,ah ; dx<-ax*10
  1264 000009CE 89C2                <1> 	mov	dx,ax
  1265 000009D0 01D2                <1> 	add	dx,dx
  1266 000009D2 01D2                <1> 	add	dx,dx
  1267 000009D4 01D2                <1> 	add	dx,dx
  1268 000009D6 01C2                <1> 	add	dx,ax
  1269 000009D8 01C2                <1> 	add	dx,ax
  1270                              <1> 
  1271 000009DA 88CB                <1> 	mov	bl,cl
  1272 000009DC 52                  <1> 	push	dx
  1273 000009DD E850FF              <1> 	call	cmos_read2byte
  1274                              <1> 	; ブロックが有効か？
  1275 000009E0 A801                <1> 	test	al,1
  1276 000009E2 740B                <1> 	jz	.error
  1277                              <1> 
  1278 000009E4 B90800              <1> 	mov	cx,8
  1279 000009E7 38DC                <1> 	cmp	ah,bl
  1280 000009E9 7504                <1> 	jnz	.error
  1281                              <1> 
  1282 000009EB 30E4                <1> 	xor	ah,ah
  1283 000009ED 5A                  <1> 	pop	dx
  1284 000009EE C3                  <1> 	ret
  1285                              <1> .error:
  1286 000009EF B94000              <1> 	mov	cx,40h
  1287 000009F2 B480                <1> 	mov	ah,80h
  1288 000009F4 5A                  <1> 	pop	dx
  1289 000009F5 C3                  <1> 	ret
  1290                              <1> 
  1291                              <1> ;--------------------------------------
  1292                              <1> 
  1293                              <1> ; 転送範囲の有効性をチェック
  1294                              <1> cmos_check_transferrange:
  1295 000009F6 8A4602              <1> 	mov	al,[bp+2] ; al
  1296 000009F9 E89FFF              <1> 	call	cmos_getaddlength
  1297 000009FC 8B7E08              <1> 	mov	di,[bp+8] ; dx
  1298 000009FF 037E04              <1> 	add	di,[bp+4] ; bx
  1299 00000A02 720F                <1> 	jc	.error
  1300 00000A04 39F9                <1> 	cmp	cx,di
  1301 00000A06 720B                <1> 	jc	.error
  1302 00000A08 8B4608              <1> 	mov	ax,[bp+8] ; dx
  1303 00000A0B 01C2                <1> 	add	dx,ax
  1304 00000A0D 8B5E04              <1> 	mov	bx,[bp+4] ; bx
  1305 00000A10 30E4                <1> 	xor	ah,ah
  1306 00000A12 C3                  <1> 	ret
  1307                              <1> .error:
  1308 00000A13 B90400              <1> 	mov	cx,4
  1309 00000A16 B480                <1> 	mov	ah,80h
  1310 00000A18 C3                  <1> 	ret
  1311                              <1> 
  1312                              <1> ;--------------------------------------
  1313                              <1> 
  1314                              <1> ; ブロック番号テーブル初期化
  1315                              <1> cmos_init_blocknotable:
  1316 00000A19 BE[290A]            <1> 	mov	si,.initdata
  1317 00000A1C 31D2                <1> 	xor	dx,dx
  1318                              <1> .loop:
  1319 00000A1E AC                  <1> 	lodsb
  1320 00000A1F E85BFF              <1> 	call	cmos_write_3fa2
  1321 00000A22 42                  <1> 	inc	dx
  1322 00000A23 83FA10              <1> 	cmp	dx,10h
  1323 00000A26 72F6                <1> 	jc	.loop
  1324 00000A28 C3                  <1> 	ret
  1325                              <1> 
  1326                              <1> .initdata:
  1327 00000A29 0001020304FFFFFF    <1> 	db	0,1,2,3,4, 255,255,255
  1328 00000A31 FFFFFFFFFFFFFFFF    <1> 	db	255,255,255,255, 255,255,255,255
  1329                              <1> 
  1330                              <1> ;--------------------------------------
  1331                              <1> 
  1332                              <1> ; 0-a4までの値を加算した値を得る
  1333                              <1> cmos_get_cmosheadersum:
  1334 00000A39 31D2                <1> 	xor	dx,dx
  1335 00000A3B B95200              <1> 	mov	cx,52h
  1336 00000A3E 31DB                <1> 	xor	bx,bx
  1337                              <1> .loop:
  1338 00000A40 51                  <1> 	push	cx
  1339 00000A41 E8ECFE              <1> 	call	cmos_read2byte
  1340 00000A44 59                  <1> 	pop	cx
  1341 00000A45 01C3                <1> 	add	bx,ax
  1342 00000A47 83C202              <1> 	add	dx,2
  1343 00000A4A E2F4                <1> 	loop	.loop
  1344 00000A4C 89D8                <1> 	mov	ax,bx
  1345 00000A4E C3                  <1> 	ret
  1346                              <1> 
  1347                              <1> ;--------------------------------------
  1348                              <1> 
  1349                              <1> ; 全ブロックをチェック
  1350                              <1> cmos_check_allblocks:
  1351 00000A4F 31C0                <1> 	xor	ax,ax
  1352 00000A51 31FF                <1> 	xor	di,di
  1353 00000A53 31F6                <1> 	xor	si,si
  1354                              <1> .loop:
  1355 00000A55 89F2                <1> 	mov	dx,si
  1356 00000A57 01D2                <1> 	add	dx,dx
  1357 00000A59 01D2                <1> 	add	dx,dx
  1358 00000A5B 01D2                <1> 	add	dx,dx
  1359 00000A5D 01F2                <1> 	add	dx,si
  1360 00000A5F 01F2                <1> 	add	dx,si
  1361 00000A61 E8C5FE              <1> 	call	cmos_read1byte
  1362 00000A64 08C0                <1> 	or	al,al
  1363 00000A66 7919                <1> 	jns	.next
  1364                              <1> 
  1365 00000A68 89F0                <1> 	mov	ax,si
  1366 00000A6A E8ECFE              <1> 	call	cmos_read_3f82
  1367 00000A6D 89F0                <1> 	mov	ax,si
  1368 00000A6F 51                  <1> 	push	cx
  1369 00000A70 E814FF              <1> 	call	cmos_calc_checksum
  1370 00000A73 59                  <1> 	pop	cx
  1371                              <1> 
  1372 00000A74 38C8                <1> 	cmp	al,cl
  1373 00000A76 7409                <1> 	jz	.next
  1374                              <1> 
  1375                              <1> 	; チェックサムエラーのあったブロックのbitをon
  1376 00000A78 89F1                <1> 	mov	cx,si
  1377 00000A7A B80100              <1> 	mov	ax,1
  1378 00000A7D D3E0                <1> 	shl	ax,cl
  1379 00000A7F 09C7                <1> 	or	di,ax
  1380                              <1> .next:
  1381 00000A81 46                  <1> 	inc	si
  1382 00000A82 83FE10              <1> 	cmp	si,10h
  1383 00000A85 72CE                <1> 	jc	.loop
  1384 00000A87 89FB                <1> 	mov	bx,di
  1385 00000A89 30E4                <1> 	xor	ah,ah
  1386 00000A8B C3                  <1> 	ret
  1387                              <1> 
  1388                              <1> 
   820                                  
   821                                  %include "sys_p32.asm"
   822                              <1> ; version 2003.03.04.1
   823                              <1> ;---------------------------------------------------------------------
   824                              <1> ;
   825                              <1> ; FM TOWNS 互換 ROM シリーズ
   826                              <1> ;
   827                              <1> ; FMT_SYS.ROM : プロテクトモード・プロシジャ(EXT-BOOT部分に相当)
   828                              <1> ;
   829                              <1> ; by Kasanova
   830                              <1> ;
   831                              <1> ;---------------------------------------------------------------------
   832                              <1> ; ※単独ではアセンブルしません
   833                              <1> 
   834                              <1> ; コードが長くなってきたら、実機と同様に 0xFFFE0000-0xFFFE7FFF に
   835                              <1> ; 移してもいいかも
   836                              <1> 
   837                              <1> [BITS 32]
   838                              <1> pmode_entry:
   839 00000A8C 0FB7E4              <1> 	movzx	esp,sp
   840 00000A8F 89E5                <1> 	mov	ebp,esp
   841 00000A91 668CD0              <1> 	mov	ax,ss
   842 00000A94 0FB7C0              <1> 	movzx	eax,ax
   843 00000A97 C1E004              <1> 	shl	eax,4
   844 00000A9A 01C4                <1> 	add	esp,eax
   845                              <1> 
   846 00000A9C 66B81000            <1> 	mov	ax,10h
   847 00000AA0 8ED0                <1> 	mov	ss,ax
   848 00000AA2 8ED8                <1> 	mov	ds,ax
   849 00000AA4 8EC0                <1> 	mov	es,ax
   850                              <1> 
   851 00000AA6 55                  <1> 	push	ebp
   852 00000AA7 0FB6C3              <1> 	movzx	eax,bl
   853 00000AAA 2EFF1485[D5CAFFFF]  <1> 	call	[cs:pmode_jmptable+BOOTCODE_BASE+eax*4]
   854 00000AB2 5D                  <1> 	pop	ebp
   855                              <1> 
   856 00000AB3 89EC                <1> 	mov	esp,ebp
   857 00000AB5 66B82000            <1> 	mov	ax,20h
   858 00000AB9 8ED8                <1> 	mov	ds,ax
   859 00000ABB 8EC0                <1> 	mov	es,ax
   860 00000ABD 8ED0                <1> 	mov	ss,ax
   861                              <1> 
   862 00000ABF EA                  <1> 	db	0eah
   863 00000AC0 [C60A0000]          <1> 	dd	.flush
   864 00000AC4 1800                <1> 	dw	18h
   865                              <1> .flush:
   866                              <1> 
   867                              <1> [BITS 16]
   868 00000AC6 0F20C0              <1> 	mov	eax,cr0
   869 00000AC9 24FE                <1> 	and	al,0xfe
   870 00000ACB 0F22C0              <1> 	mov	cr0,eax
   871 00000ACE EB00                <1> 	jmp	short $+2
   872                              <1> 
   873 00000AD0 EA                  <1> 	db	0eah
   874 00000AD1 [0802]              <1> 	dw	return_from_pmode
   875 00000AD3 00FC                <1> 	dw	0fc00h
   876                              <1> 
   877                              <1> 
   878                              <1> pmode_jmptable:
   879 00000AD5 [E9CAFFFF]          <1> 	dd	BOOTCODE_BASE+ pm_puticon
   880 00000AD9 [20CBFFFF]          <1> 	dd	BOOTCODE_BASE+ pm_memorycheck
   881 00000ADD [7DCBFFFF]          <1> 	dd	BOOTCODE_BASE+ pm_drawlogo
   882 00000AE1 [D9CBFFFF]          <1> 	dd	BOOTCODE_BASE+ pm_setpalette
   883 00000AE5 [43CCFFFF]          <1> 	dd	BOOTCODE_BASE+ pm_transfermemory
   884                              <1> 
   885                              <1> 
   886                              <1> [BITS 32]
   887                              <1> 
   888                              <1> ;---------------------------------------------------------------------
   889                              <1> ; 32x32アイコン表示
   890                              <1> ;
   891                              <1> ; cl = 0-127 : システムアイコン
   892                              <1> ; cl = 128-  : 起動用アイコン
   893                              <1> pm_puticon:
   894 00000AE9 0FB6C9              <1> 	movzx	ecx,cl
   895 00000AEC 80F980              <1> 	cmp	cl,128
   896 00000AEF 7211                <1> 	jc	.sysicon
   897                              <1> 
   898                              <1> 	; 起動用アイコンの場合
   899 00000AF1 81E980000000        <1> 	sub	ecx,128
   900 00000AF7 C1E107              <1> 	shl	ecx,7
   901 00000AFA 8DB100BCFFFF        <1> 	lea	esi,[0ffffbc00h+ecx]
   902 00000B00 EB09                <1> 	jmp	.draw
   903                              <1> 
   904                              <1> 	; システムアイコンの場合
   905                              <1> .sysicon:
   906 00000B02 C1E108              <1> 	shl	ecx,8
   907 00000B05 8DB10080FEFF        <1> 	lea	esi,[0fffe8000h+ecx]
   908                              <1> .draw:
   909 00000B0B 0FB7FA              <1> 	movzx	edi,dx
   910 00000B0E 81C700000C00        <1> 	add	edi,0c0000h
   911 00000B14 B920000000          <1> 	mov	ecx,20h
   912                              <1> .loop:
   913 00000B19 A5                  <1> 	movsd
   914 00000B1A 83C74C              <1> 	add	edi,VRAM_PITCH-4
   915 00000B1D E2FA                <1> 	loop	.loop
   916 00000B1F C3                  <1> 	ret
   917                              <1> 
   918                              <1> 
   919                              <1> ;---------------------------------------------------------------------
   920                              <1> ; メモリチェックとCMOSへの書き出し
   921                              <1> ;
   922                              <1> ; ※メモリカウントもここで行えるように、32ビットコードで書いてます
   923                              <1> pm_memorycheck:
   924                              <1> 	; 3150h-317ehは、メモリの実装状態を示すらしい
   925 00000B20 30C0                <1> 	xor	al,al
   926 00000B22 66BA5031            <1> 	mov	dx,3150h
   927 00000B26 B918000000          <1> 	mov	ecx,30h/2
   928                              <1> .loop:
   929 00000B2B EE                  <1> 	out	dx,al
   930 00000B2C 6683C202            <1> 	add	dx,2
   931 00000B30 E2F9                <1> 	loop	.loop
   932                              <1> 
   933                              <1> 	; 5e8hは、うんづでは必ず利用可能
   934 00000B32 66BAE805            <1> 	mov	dx,5e8h
   935                              <1> 
   936 00000B36 EC                  <1> 	in	al,dx
   937 00000B37 247F                <1> 	and	al,7fh
   938 00000B39 66BA5C3A            <1> 	mov	dx,3a5ch
   939 00000B3D EE                  <1> 	out	dx,al
   940 00000B3E 0FB6C8              <1> 	movzx	ecx,al
   941                              <1> 
   942 00000B41 B001                <1> 	mov	al,1
   943 00000B43 66BA8631            <1> 	mov	dx,3186h
   944 00000B47 EE                  <1> 	out	dx,al
   945                              <1> 
   946 00000B48 89C8                <1> 	mov	eax,ecx
   947 00000B4A C1E004              <1> 	shl	eax,4
   948 00000B4D 48                  <1> 	dec	eax
   949 00000B4E 66BA8A31            <1> 	mov	dx,318ah
   950 00000B52 EE                  <1> 	out	dx,al
   951 00000B53 6683EA02            <1> 	sub	dx,2
   952 00000B57 88E0                <1> 	mov	al,ah
   953 00000B59 EE                  <1> 	out	dx,al
   954                              <1> 
   955 00000B5A 49                  <1> 	dec	ecx
   956 00000B5B 7415                <1> 	jz	.zero ; メモリが1MBしかない！
   957                              <1> 
   958 00000B5D B0FF                <1> 	mov	al,0ffh
   959 00000B5F 66BA5031            <1> 	mov	dx,3150h
   960                              <1> .loop2:
   961 00000B63 EE                  <1> 	out	dx,al
   962 00000B64 49                  <1> 	dec	ecx
   963 00000B65 740B                <1> 	jz	.zero
   964 00000B67 6683C202            <1> 	add	dx,2
   965 00000B6B 6681FA8031          <1> 	cmp	dx,3180h
   966 00000B70 72F1                <1> 	jc	.loop2
   967                              <1> .zero:
   968 00000B72 66BAAC31            <1> 	mov	dx,31ach
   969 00000B76 EE                  <1> 	out	dx,al
   970 00000B77 6683C202            <1> 	add	dx,2
   971 00000B7B EE                  <1> 	out	dx,al
   972                              <1> 
   973                              <1> 	; TOWNS名物メモリカウントを入れるなら、ここ
   974                              <1> 
   975 00000B7C C3                  <1> 	ret
   976                              <1> 
   977                              <1> 
   978                              <1> ;---------------------------------------------------------------------
   979                              <1> ; 起動ロゴ表示
   980                              <1> pm_drawlogo:
   981                              <1> 	; ds = es
   982 00000B7D BE0080FFFF          <1> 	mov	esi,LOGO_ADDRESS
   983 00000B82 BFA0280C00          <1> 	mov	edi,0c0000h+VRAM_PITCH*130
   984 00000B87 0FB71E              <1> 	movzx	ebx,word [esi] ; 水平ドット数
   985 00000B8A 83C307              <1> 	add	ebx,7
   986 00000B8D C1EB03              <1> 	shr	ebx,3
   987 00000B90 B950000000          <1> 	mov	ecx,VRAM_PITCH ; 表示位置を画面中央へ
   988 00000B95 29D9                <1> 	sub	ecx,ebx
   989 00000B97 D1E9                <1> 	shr	ecx,1
   990 00000B99 01CF                <1> 	add	edi,ecx
   991 00000B9B 0FB74E02            <1> 	movzx	ecx,word [esi+2] ; 垂直ドット数
   992                              <1> 
   993 00000B9F 83C604              <1> 	add	esi,4
   994                              <1> 
   995 00000BA2 BA81FF0C00          <1> 	mov	edx,0cff81h
   996 00000BA7 8A02                <1> 	mov	al,[edx]
   997 00000BA9 24CF                <1> 	and	al,0cfh
   998                              <1> .loop:
   999 00000BAB 51                  <1> 	push	ecx
  1000                              <1> 	; plane B
  1001 00000BAC 57                  <1> 	push	edi
  1002 00000BAD 89D9                <1> 	mov	ecx,ebx
  1003 00000BAF C60201              <1> 	mov	byte [edx],1
  1004 00000BB2 F3A4                <1> 	rep movsb
  1005 00000BB4 5F                  <1> 	pop	edi
  1006                              <1> 
  1007                              <1> 	; plane R
  1008 00000BB5 57                  <1> 	push	edi
  1009 00000BB6 89D9                <1> 	mov	ecx,ebx
  1010 00000BB8 C60202              <1> 	mov	byte [edx],2
  1011 00000BBB F3A4                <1> 	rep movsb
  1012 00000BBD 5F                  <1> 	pop	edi
  1013                              <1> 
  1014                              <1> 	; plane G
  1015 00000BBE 57                  <1> 	push	edi
  1016 00000BBF 89D9                <1> 	mov	ecx,ebx
  1017 00000BC1 C60204              <1> 	mov	byte [edx],4
  1018 00000BC4 F3A4                <1> 	rep movsb
  1019 00000BC6 5F                  <1> 	pop	edi
  1020                              <1> 
  1021                              <1> %if(LOGO_USEPLANES==4)
  1022                              <1> 	; plane I
  1023 00000BC7 57                  <1> 	push	edi
  1024 00000BC8 89D9                <1> 	mov	ecx,ebx
  1025 00000BCA C60208              <1> 	mov	byte [edx],8
  1026 00000BCD F3A4                <1> 	rep movsb
  1027 00000BCF 5F                  <1> 	pop	edi
  1028                              <1> %endif
  1029                              <1> 
  1030 00000BD0 8D7F50              <1> 	lea	edi,[edi+VRAM_PITCH]
  1031 00000BD3 59                  <1> 	pop	ecx
  1032 00000BD4 E2D5                <1> 	loop	.loop
  1033                              <1> 
  1034 00000BD6 8802                <1> 	mov	[edx],al
  1035 00000BD8 C3                  <1> 	ret
  1036                              <1> 
  1037                              <1> ;---------------------------------------------------------------------
  1038                              <1> ; パレット初期化
  1039                              <1> ;
  1040                              <1> ; ※リボンの絵のパレットが化けるので、デフォルト固定にしたほうがいい
  1041                              <1> ;   かもしれない・・・
  1042                              <1> 
  1043                              <1> pm_setpalette:
  1044 00000BD9 BE80BBFFFF          <1> 	mov	esi,LOGO_PAL_ADDRESS
  1045 00000BDE 833EFF              <1> 	cmp	dword [esi], 0ffffffffh ; うんづ特有のパレットがあるか？
  1046 00000BE1 7505                <1> 	jnz	.palexist
  1047 00000BE3 BE[13CCFFFF]        <1> 	mov	esi,pm_def_palette+BOOTCODE_BASE
  1048                              <1> .palexist:
  1049 00000BE8 B910000000          <1> 	mov	ecx,16
  1050                              <1> .loop:
  1051 00000BED B010                <1> 	mov	al,16
  1052 00000BEF 28C8                <1> 	sub	al,cl
  1053 00000BF1 66BA90FD            <1> 	mov	dx,0fd90h
  1054 00000BF5 EE                  <1> 	out	dx,al
  1055 00000BF6 8A06                <1> 	mov	al,[esi]
  1056 00000BF8 6683C202            <1> 	add	dx,2
  1057 00000BFC EE                  <1> 	out	dx,al
  1058 00000BFD 8A4601              <1> 	mov	al,[esi+1]
  1059 00000C00 6683C202            <1> 	add	dx,2
  1060 00000C04 EE                  <1> 	out	dx,al
  1061 00000C05 8A4602              <1> 	mov	al,[esi+2]
  1062 00000C08 6683C202            <1> 	add	dx,2
  1063 00000C0C EE                  <1> 	out	dx,al
  1064 00000C0D 83C603              <1> 	add	esi,3
  1065 00000C10 E2DB                <1> 	loop	.loop
  1066 00000C12 C3                  <1> 	ret
  1067                              <1> 
  1068                              <1> pm_def_palette: ; B  - R  - G      B  - R  - G
  1069 00000C13 000000800000        <1> 	db	  0h,  0h,  0h,   80h,  0h,  0h
  1070 00000C19 008000808000        <1> 	db	  0h, 80h,  0h,   80h, 80h,  0h
  1071 00000C1F 000080800080        <1> 	db	  0h,  0h, 80h,   80h,  0h, 80h
  1072 00000C25 008080808080        <1> 	db	  0h, 80h, 80h,   80h, 80h, 80h
  1073                              <1> 
  1074 00000C2B 000000FF0000        <1> 	db	  0h,  0h,  0h,  0ffh,  0h,  0h
  1075 00000C31 00FF00FFFF00        <1> 	db	  0h,0ffh,  0h,  0ffh,0ffh,  0h
  1076 00000C37 0000FFFF00FF        <1> 	db	  0h,  0h,0ffh,  0ffh,  0h,0ffh
  1077 00000C3D 00FFFFFFFFFF        <1> 	db	  0h,0ffh,0ffh,  0ffh,0ffh,0ffh
  1078                              <1> 
  1079                              <1> 
  1080                              <1> ;---------------------------------------------------------------------
  1081                              <1> ; メモリ間転送(sys_osr.asmから呼ばれる)
  1082                              <1> pm_transfermemory:
  1083 00000C43 0FB66E01            <1> 	movzx	ebp, byte [esi+1] ; ahの値。転送方向をこれで判定する
  1084                              <1> 
  1085 00000C47 0FB75F04            <1> 	movzx	ebx,word [edi+4]
  1086 00000C4B C1E310              <1> 	shl	ebx,16
  1087 00000C4E 668B5E02            <1> 	mov	bx,[esi+2]
  1088 00000C52 C1E30A              <1> 	shl	ebx,10           ; source
  1089                              <1> 
  1090 00000C55 56                  <1> 	push	esi
  1091 00000C56 57                  <1> 	push	edi
  1092                              <1> 
  1093 00000C57 0FB7770C            <1> 	movzx	esi,word [edi+0ch]
  1094 00000C5B C1E604              <1> 	shl	esi,4
  1095 00000C5E 0FB74F0A            <1> 	movzx	ecx,word [edi+0ah]
  1096 00000C62 01CE                <1> 	add	esi,ecx          ; dest.
  1097                              <1> 
  1098 00000C64 B900040000          <1> 	mov	ecx,400h
  1099 00000C69 0FB74702            <1> 	movzx	eax,word [edi+2] ; block count
  1100 00000C6D F7E1                <1> 	mul	ecx
  1101 00000C6F 89C1                <1> 	mov	ecx,eax
  1102                              <1> 
  1103 00000C71 89F7                <1> 	mov	edi,esi
  1104 00000C73 89DE                <1> 	mov	esi,ebx
  1105                              <1> 
  1106 00000C75 83FD05              <1> 	cmp	ebp,5
  1107 00000C78 7402                <1> 	jz	.noxchg
  1108 00000C7A 87F7                <1> 	xchg	esi,edi ; 書き込みコマンドなら転送元と転送先を入れ替える
  1109                              <1> .noxchg:
  1110                              <1> 
  1111                              <1> 	; 転送する際は、バイトアクセスのみ可能な領域を考慮すること
  1112 00000C7C F3A4                <1> 	rep movsb
  1113                              <1> 
  1114 00000C7E 5F                  <1> 	pop	edi
  1115 00000C7F 5E                  <1> 	pop	esi
  1116 00000C80 C3                  <1> 	ret
  1117                              <1> 
  1118                              <1> 
   822                                  
   823                                  %include "sys_print.asm" ; by CaptainYS
   824                              <1> ; By CaptainYS
   825                              <1> print_string:
   826 00000C81 CB                  <1> 						RETF
   827                              <1> 
   824                                  
   825                                  ;---------------------------------------------------------------------
   826                                  ; ウェイト(うんづではあまり意味が無いので省略)
   827                                  
   828                                  waitloop:
   829 00000C82 CB                      	retf
   830                                  
   831                                  ;---------------------------------------------------------------------
   832                                  
   833                                  invalid1:
   834 00000C83 EBFE                    	jmp	invalid1
   835                                  
   836                                  invalid2:
   837 00000C85 EBFE                    	jmp	invalid2
   838                                  
   839                                  invalid3:
   840 00000C87 EBFE                    	jmp	invalid3
   841                                  
   842                                  invalid4:
   843 00000C89 EBFE                    	jmp	invalid4
   844                                  
   845                                  invalid5:
   846 00000C8B EBFE                    	jmp	invalid5
   847                                  
   848                                  
   849                                  ;---------------------------------------------------------------------
   850                                  
   851                                  	; CaptainYS >>
   852                                  	PLACE	03FB0h	; FC000+03FB0=FFFB0
   104 00000C8D 00<rep 3323h>       <1>  TIMES %1-($-$$) DB 0
   853                                  	; CaptainYS <<
   854                                  
   855                                  
   856                                  	JMPFAR invalid1 ; 診断エラー?
    64 00003FB0 EA                  <1>  db 0eah
    65 00003FB1 [830C]              <1>  dw %1
    66 00003FB3 00FC                <1>  dw 0fc00h
   857                                  	JMPFAR invalid2 ; 診断エラー?
    64 00003FB5 EA                  <1>  db 0eah
    65 00003FB6 [850C]              <1>  dw %1
    66 00003FB8 00FC                <1>  dw 0fc00h
   858                                  	JMPFAR invalid3 ; ?
    64 00003FBA EA                  <1>  db 0eah
    65 00003FBB [870C]              <1>  dw %1
    66 00003FBD 00FC                <1>  dw 0fc00h
   859                                  	JMPFAR invalid4 ; 文字列表示(未実装)
    64 00003FBF EA                  <1>  db 0eah
    65 00003FC0 [890C]              <1>  dw %1
    66 00003FC2 00FC                <1>  dw 0fc00h
   860                                  	JMPFAR disk_bios
    64 00003FC4 EA                  <1>  db 0eah
    65 00003FC5 [6403]              <1>  dw %1
    66 00003FC7 00FC                <1>  dw 0fc00h
   861                                  	JMPFAR cmos_bios
    64 00003FC9 EA                  <1>  db 0eah
    65 00003FCA [9404]              <1>  dw %1
    66 00003FCC 00FC                <1>  dw 0fc00h
   862                                  	JMPFAR print_string ; by CaptainYS
    64 00003FCE EA                  <1>  db 0eah
    65 00003FCF [810C]              <1>  dw %1
    66 00003FD1 00FC                <1>  dw 0fc00h
   863                                  	JMPFAR waitloop
    64 00003FD3 EA                  <1>  db 0eah
    65 00003FD4 [820C]              <1>  dw %1
    66 00003FD6 00FC                <1>  dw 0fc00h
   864                                  
   865 00003FD8 000000000000000000-     	dd 0,0, 0,0,0,0
   865 00003FE1 000000000000000000-
   865 00003FEA 000000000000       
   866                                  
   867                                  	JMPFAR startall ; ここからすべてが始まる
    64 00003FF0 EA                  <1>  db 0eah
    65 00003FF1 [2000]              <1>  dw %1
    66 00003FF3 00FC                <1>  dw 0fc00h
   868                                  
   869                                  ; CaptainYS>>
   870 00003FF5 51                      	db 051h		; This byte will be transferred to IO.SYS's DS:0000, and then returned as Machine Id to DS:[DI] by INT AFH AH=05H.  MX->51h
   871 00003FF6 0000                    	db 0,0
   872 00003FF8 0000000000000000        	dd 0,0
   873                                  ; CaptainYS<<
