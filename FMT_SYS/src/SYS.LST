     1                                  ; nasmw -O3 -f bin sys.asm -o fmt_sys6.prg
     2                                  ; version 2003.03.04.1
     3                                  ;---------------------------------------------------------------------
     4                                  ;
     5                                  ; FM TOWNS 互換 ROM シリーズ
     6                                  ;
     7                                  ; FMT_SYS.ROM : メインパート
     8                                  ; 0FFFFC000h - 0FFFFFFFFh
     9                                  ;
    10                                  ; by Kasanova
    11                                  ;
    12                                  ;---------------------------------------------------------------------
    13                                  ; FMT_SYS.ROM の構造(本物の)
    14                                  ; 0FFFC0000h - 0FFFDFFFFh : 12ドットフォント
    15                                  ;                           機種によってはALL FFh、起動ロゴ(パックド
    16                                  ;                           ピクセル方式)がある機種もあり
    17                                  ; 0FFFE0000h - 0FFFE7FFFh : EXT-BOOT(32ビットプログラム)
    18                                  ; 0FFFE8000h - 0FFFEFFFFh : システムアイコン
    19                                  ; 0FFFF0000h - 0FFFF7FFFh : 何かのパターン?
    20                                  ; 0FFFF8000h - 0FFFFAFFFh ; 起動ロゴ(プレーン方式)
    21                                  ;                           機種によっては Extention BIOS
    22                                  ; 0FFFFB000h - 0FFFFBFFFh : ブート時に使うアイコン
    23                                  ; 0FFFFC000h - 0FFFFFFFFh ; 16ビットプログラム
    24                                  ;---------------------------------------------------------------------
    25                                  ; FMT_SYS.ROM の構造(この互換ROMの)
    26                                  ; 0FFFC0000h - 0FFFDFFFFh : 12ドットフォント
    27                                  ; 0FFFE0000h - 0FFFE7FFFh : EXT-BOOT(32ビットプログラム)、まだ使っていない
    28                                  ; 0FFFE8000h - 0FFFEFFFFh : システムアイコン
    29                                  ; 0FFFF0000h - 0FFFF7FFFh : ダミーデータ(0ffh)
    30                                  ; 0FFFF8000h - 0FFFFBBFFh ; 起動ロゴ(プレーン方式、4プレーン分)
    31                                  ; 0FFFFBC00h - 0FFFFBFFFh : ブート時に使うアイコン
    32                                  ; 0FFFFC000h - 0FFFFFFFFh ; 16ビット+32ビットプログラム
    33                                  ;---------------------------------------------------------------------
    34                                  
    35                                  %define BOOTCODE_BASE 0ffffc000h
    36                                  %define BOOT_SS       0f7a0h
    37                                  %define BOOT_SP       057eh
    38                                  %define LOCAL_SP      05feh
    39                                  
    40                                  %define VRAM_PITCH 50h
    41                                  
    42                                  %define LOGO_ADDRESS      0ffff8000h
    43                                  %define LOGO_USEPLANES    4
    44                                  %if(LOGO_USEPLANES==3)
    45                                  %define LOGO_PAL_ADDRESS  0ffffaf00h
    46                                  %else
    47                                  %define LOGO_PAL_ADDRESS  0ffffbb80h
    48                                  %endif
    49                                  
    50                                  %define ICON_WAIT 81
    51                                  %define ICON_FDD  64
    52                                  %define ICON_CD   67
    53                                  %define ICON_HDD  71
    54                                  
    55                                  %define PMODE_PUTICON     0
    56                                  %define PMODE_MEMORYCHECK 1
    57                                  %define PMODE_DRAWLOGO    2
    58                                  %define PMODE_SETPALETTE  3
    59                                  %define PMODE_TRANSFERMEM 4
    60                                  
    61                                  ;---------------------------------------------------------------------
    62                                  
    63                                  %macro JMPFAR 1
    64                                  	db 0eah
    65                                  	dw %1
    66                                  	dw 0fc00h
    67                                  %endmacro
    68                                  
    69                                  
    70                                  %macro CALLFAR 1
    71                                  	db 09ah
    72                                  	dw %1
    73                                  	dw 0fc00h
    74                                  %endmacro
    75                                  
    76                                  
    77                                  %macro SAVEREG_TO_CMOS 2
    78                                  	mov	dx,%1
    79                                  %ifidn %2,ax
    80                                  %else
    81                                  	mov	ax,%2
    82                                  %endif
    83                                  	out	dx,al
    84                                  	mov	dx,%1+2
    85                                  	mov	al,ah
    86                                  	out	dx,al
    87                                  %endmacro
    88                                  
    89                                  
    90                                  %macro LOADREG_FROM_CMOS 2
    91                                  	mov	dx,%1+2
    92                                  	in	al,dx
    93                                  	mov	ah,al
    94                                  	mov	dx,%1
    95                                  	in	al,dx
    96                                  %ifidn %2,ax
    97                                  %else
    98                                  	mov	%2,ax
    99                                  %endif
   100                                  %endmacro
   101                                  
   102                                  ; by CaptainYS >>
   103                                  %macro					PLACE 1
   104                                  						TIMES	%1-($-$$) DB 0
   105                                  %endmacro
   106                                  ; by CaptainYS <<
   107                                  
   108                                  
   109                                  ;---------------------------------------------------------------------
   110                                  
   111                                  ; あやしいヘッダ
   112 00000000 000000000000000000-     	dd	0,0,0,0, 0,0,0,0
   112 00000009 000000000000000000-
   112 00000012 000000000000000000-
   112 0000001B 0000000000         
   113                                  ;
   114                                  
   115                                  [BITS 16]
   116                                  
   117                                  startall:
   118 00000020 FA                      	cli
   119 00000021 FC                      	cld
   120 00000022 89D0                    	mov	ax,dx
   121 00000024 BA263C                  	mov	dx,3c26h
   122 00000027 EE                      	out	dx,al
   123 00000028 88E0                    	mov	al,ah
   124 0000002A 80EA02                  	sub	dl,2
   125 0000002D EE                      	out	dx,al
   126                                  
   127                                  	; disable & reset DMAC
   128 0000002E B00F                    	mov	al,0fh
   129 00000030 E6AF                    	out	0afh,al
   130 00000032 B003                    	mov	al,3
   131 00000034 E6A0                    	out	0a0h,al
   132                                  
   133 00000036 E428                    	in	al,28h
   134 00000038 0C01                    	or	al,1
   135 0000003A E628                    	out	28h,al
   136                                  
   137                                  	; select ROM
   138 0000003C BA0404                  	mov	dx,404h
   139 0000003F 30C0                    	xor	al,al
   140 00000041 EE                      	out	dx,al
   141                                  
   142 00000042 B9A0F7                  	mov	cx,BOOT_SS
   143 00000045 8ED1                    	mov	ss,cx
   144 00000047 BC7E05                  	mov	sp,BOOT_SP
   145                                  
   146 0000004A 0E                      	push	cs
   147 0000004B 1F                      	pop	ds
   148                                  
   149                                  	; set local stack address
   150                                  	SAVEREG_TO_CMOS 31a8h, LOCAL_SP
    78 0000004C BAA831              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81 0000004F B8FE05              <1>  mov ax,%2
    82                              <1> %endif
    83 00000052 EE                  <1>  out dx,al
    84 00000053 BAAA31              <1>  mov dx,%1+2
    85 00000056 88E0                <1>  mov al,ah
    86 00000058 EE                  <1>  out dx,al
   151                                  
   152 00000059 BA223C                  	mov	dx,3c22h
   153 0000005C 30C0                    	xor	al,al
   154 0000005E EE                      	out	dx,al ; non 386SX
   155                                  
   156 0000005F BAB831                  	mov	dx,31b8h
   157 00000062 EE                      	out	dx,al
   158 00000063 BAB231                  	mov	dx,31b2h
   159 00000066 EE                      	out	dx,al
   160 00000067 BACC31                  	mov	dx,31cch
   161 0000006A EE                      	out	dx,al
   162                                  
   163 0000006B E83601                  	call	set_gdt
   164 0000006E E8A001                  	call	init_pic
   165 00000071 E8C601                  	call	init_keyboard
   166 00000074 E8D801                  	call	init_crtc
   167                                  
   168                                  	; CMOS情報が正しいか？
   169 00000077 B420                    	mov	ah,20h
   170                                  	CALLFAR	cmos_bios
    71 00000079 9A                  <1>  db 09ah
    72 0000007A [9404]              <1>  dw %1
    73 0000007C 00FC                <1>  dw 0fc00h
   171 0000007E 7307                    	jnc	.noinitcmos
   172                                  	; CMOS初期化
   173 00000080 B400                    	mov	ah,0
   174                                  	CALLFAR cmos_bios
    71 00000082 9A                  <1>  db 09ah
    72 00000083 [9404]              <1>  dw %1
    73 00000085 00FC                <1>  dw 0fc00h
   175                                  .noinitcmos:
   176                                  
   177 00000087 B003                    	mov	al,PMODE_SETPALETTE
   178 00000089 E85C01                  	call	call_pmode
   179                                  
   180 0000008C B002                    	mov	al,PMODE_DRAWLOGO
   181 0000008E E85701                  	call	call_pmode
   182                                  
   183 00000091 B001                    	mov	al,PMODE_MEMORYCHECK
   184 00000093 E85201                  	call	call_pmode
   185                                  
   186                                  	; CDが読めるか？
   187 00000096 B40E                    	mov	ah,0eh
   188                                  	CALLFAR disk_bios
    71 00000098 9A                  <1>  db 09ah
    72 00000099 [6403]              <1>  dw %1
    73 0000009B 00FC                <1>  dw 0fc00h
   189 0000009D 7313                    	jnc	.cdok
   190                                  
   191                                  	; 手抜き(^^;
   192 0000009F B143                    	mov	cl,ICON_CD
   193 000000A1 BA4C73                  	mov	dx, (VRAM_PITCH*368)+(VRAM_PITCH-4)
   194 000000A4 E84101                  	call	call_pmode
   195 000000A7 BE[5601]                	mov	si,mes_cantboot
   196 000000AA BF0078                  	mov	di,VRAM_PITCH*384
   197 000000AD E82F02                  	call	textout
   198 000000B0 EBFE                    	jmp	$
   199                                  
   200                                  .cdok:
   201                                  	; IPL読み込み
   202 000000B2 1E                      	push	ds
   203 000000B3 B90000                  	mov	cx,0
   204 000000B6 BA0000                  	mov	dx,0
   205 000000B9 B800B0                  	mov	ax,0b000h
   206 000000BC 8ED8                    	mov	ds,ax
   207 000000BE BF0000                  	mov	di,0
   208 000000C1 B8C005                  	mov	ax,05c0h ; read command + media no.
   209 000000C4 BB0100                  	mov	bx,1
   210                                  	CALLFAR disk_bios
    71 000000C7 9A                  <1>  db 09ah
    72 000000C8 [6403]              <1>  dw %1
    73 000000CA 00FC                <1>  dw 0fc00h
   211 000000CC 1F                      	pop	ds
   212                                  
   213 000000CD B151                    	mov	cl,ICON_WAIT
   214 000000CF B000                    	mov	al,PMODE_PUTICON
   215 000000D1 BA4C73                  	mov	dx, (VRAM_PITCH*368)+(VRAM_PITCH-4)
   216 000000D4 E81101                  	call	call_pmode
   217                                  
   218 000000D7 BE[F900]                	mov	si,mes_reading
   219 000000DA BF0078                  	mov	di,VRAM_PITCH*384
   220 000000DD E8FF01                  	call	textout
   221                                  
   222 000000E0 E89200                  	call	check_iplvalidity
   223 000000E3 7209                    	jc	.wrongipl
   224                                  
   225 000000E5 B8FFFF                  	mov	ax,0ffffh
   226 000000E8 BB0800                  	mov	bx,0008h
   227 000000EB 2EFF1C                  	call	far [cs:si]
   228                                  
   229                                  .wrongipl:
   230                                  	; 起動に失敗すると戻ってくる
   231                                  	; 成功した場合は２度と戻ってこない
   232 000000EE BE[1801]                	mov	si,mes_wrongipl
   233 000000F1 BF0078                  	mov	di,VRAM_PITCH*384
   234 000000F4 E8E801                  	call	textout
   235                                  
   236                                  	; 死
   237 000000F7 EBFE                    	jmp	$
   238                                  
   239                                  ; CaptainYS: Since NASM doesn't seem to understand Shift-JIS, 
   240                                  ;            I've pasted shift-jis code directly.
   241                                  mes_reading:
   242                                  	; 	'システム読み込み中です　　　　',0
   243 000000F9 835683588365838093-     	db 083h,056h,083h,058h,083h,065h,083h,080h,093h,0C7h,082h,0DDh,08Dh,09Eh,082h,0DDh
   243 00000102 C782DD8D9E82DD     
   244 00000109 928682C582B7814081-     	db 092h,086h,082h,0C5h,082h,0B7h,081h,040h,081h,040h,081h,040h,081h,040h,000h
   244 00000112 408140814000       
   245                                  
   246                                  mes_wrongipl:
   247                                  	; db	'システムが違います　　　　　　',00
   248 00000118 835683588365838082-     	db 083h,056h,083h,058h,083h,065h,083h,080h,082h,0AAh,088h,0E1h,082h,0A2h,082h,0DCh
   248 00000121 AA88E182A282DC     
   249 00000128 82B781408140814081-     	db 082h,0B7h,081h,040h,081h,040h,081h,040h,081h,040h,081h,040h,081h,040h,000h
   249 00000131 408140814000       
   250                                  
   251                                  mes_setsys:
   252                                  	; db	'システムをセットしてください　',00
   253 00000137 835683588365838082-     	db 083h,056h,083h,058h,083h,065h,083h,080h,082h,0F0h,083h,05Ah,083h,062h,083h,067h
   253 00000140 F0835A83628367     
   254 00000147 82B582C482AD82BE82-     	db 082h,0B5h,082h,0C4h,082h,0ADh,082h,0BEh,082h,0B3h,082h,0A2h,081h,040h,000h
   254 00000150 B382A2814000       
   255                                  
   256                                  mes_cantboot:
   257                                  	; db	'ＣＤをセットしてリセットしてね',00
   258 00000156 8262826382F0835A83-     	db 082h,062h,082h,063h,082h,0F0h,083h,05Ah,083h,062h,083h,067h,082h,0B5h,082h,0C4h
   258 0000015F 62836782B582C4     
   259 00000166 838A835A8362836782-     	db 083h,08Ah,083h,05Ah,083h,062h,083h,067h,082h,0B5h,082h,0C4h,082h,0CBh,000h
   259 0000016F B582C482CB00       
   260                                  
   261                                  ;---------------------------------------------------------------------
   262                                  ; IPLのバージョンをチェック
   263                                  
   264                                  check_iplvalidity:
   265 00000175 06                      	push	es
   266 00000176 BE00B0                  	mov	si,0b000h
   267 00000179 8EC6                    	mov	es,si
   268                                  
   269 0000017B BE[9C01]                	mov	si,.ipl_type1
   270 0000017E 2666813E000049504C-     	cmp	dword [es:0],'IPL4'
   270 00000187 34                 
   271 00000188 7410                    	jz	.goodipl
   272                                  
   273 0000018A BE[A001]                	mov	si,.ipl_type2
   274 0000018D 2666813E030049504C-     	cmp	dword [es:3],'IPL4'
   274 00000196 34                 
   275 00000197 7401                    	jz	.goodipl
   276                                  
   277 00000199 F9                      	stc
   278                                  .goodipl:
   279 0000019A 07                      	pop	es
   280 0000019B C3                      	ret
   281                                  
   282                                  .ipl_type1:
   283 0000019C 040000B0                	dw	4,0b000h
   284                                  .ipl_type2:
   285 000001A0 000000B0                	dw	0,0b000h
   286                                  
   287                                  ;---------------------------------------------------------------------
   288                                  ; GDTをセット
   289                                  
   290                                  set_gdt:
   291 000001A4 2E0F0116[B201]          	lgdt	[cs:.lgdtr]
   292 000001AA C3                      	ret
   293                                  
   294 000001AB 90<rep 5h>              	align 8
   295 000001B0 0000                    		dw	0
   296 000001B2 2F00                    .lgdtr:		dw	002fh ; GDT limit
   297 000001B4 [B8C10F00]              		dd	0fc000h+.gdtentry
   298                                  
   299 000001B8 0000000000000000        .gdtentry:	db	 00h, 00h,00h, 00h,00h,00h, 00h,00h
   300 000001C0 FFFF0000009BCF00        		db	0ffh,0ffh,00h, 00h,00h,9bh,0cfh,00h	; CaptainYS 0c0h->0cfh.  Bug fix.  Segment limit was stopping at 0FFFFFFFh.  SHould be FFFFFFFFh
   301 000001C8 FFFF00000093CF00        		db	0ffh,0ffh,00h, 00h,00h,93h,0cfh,00h
   302 000001D0 FFFF00C00F9B0000        		db	0ffh,0ffh,00h,0c0h,0fh,9bh,000h,00h
   303 000001D8 FFFF00C00F930000        		db	0ffh,0ffh,00h,0c0h,0fh,93h,000h,00h
   304 000001E0 FF0000C00F9BC000        		db	0ffh,000h,00h,0c0h,0fh,9bh,0c0h,00h
   305                                  
   306                                  ;---------------------------------------------------------------------
   307                                  ; プロテクトモード・プロシジャを呼ぶ
   308                                  
   309                                  call_pmode:
   310 000001E8 1E                      	push	ds
   311 000001E9 06                      	push	es
   312 000001EA 0FA8                    	push	gs
   313 000001EC 8CD3                    	mov	bx,ss
   314 000001EE 8EEB                    	mov	gs,bx
   315 000001F0 89C3                    	mov	bx,ax
   316                                  
   317 000001F2 0F20C0                  	mov	eax,cr0
   318 000001F5 0C01                    	or	al,1
   319 000001F7 0F22C0                  	mov	cr0,eax
   320 000001FA EB00                    	jmp	short $+2
   321                                  
   322 000001FC EA                      	db	0eah
   323 000001FD [0102]                  	dw	.goto_pmode
   324 000001FF 2800                    	dw	28h
   325                                  .goto_pmode:
   326                                  
   327 00000201 EA                      	db	0eah
   328 00000202 [04CCFFFF]              	dd	BOOTCODE_BASE+pmode_entry
   329 00000206 0800                    	dw	8
   330                                  
   331                                  return_from_pmode:
   332 00000208 8CEB                    	mov	bx,gs
   333 0000020A 8ED3                    	mov	ss,bx
   334                                  
   335 0000020C 0FA9                    	pop	gs
   336 0000020E 07                      	pop	es
   337 0000020F 1F                      	pop	ds
   338 00000210 C3                      	ret
   339                                  
   340                                  ;---------------------------------------------------------------------
   341                                  ; PIC初期化
   342                                  ; ※ウェイトを入れていないので、実機では動作しない
   343                                  
   344                                  init_pic:
   345 00000211 B019                    	mov	al,19h
   346 00000213 E600                    	out	0,al
   347 00000215 B040                    	mov	al,40h
   348 00000217 E602                    	out	2,al
   349 00000219 B080                    	mov	al,80h
   350 0000021B E602                    	out	2,al
   351 0000021D B01D                    	mov	al,1dh
   352 0000021F E602                    	out	2,al
   353 00000221 B0FE                    	mov	al,0feh
   354 00000223 E602                    	out	2,al
   355 00000225 B019                    	mov	al,19h
   356 00000227 E610                    	out	10h,al
   357 00000229 B048                    	mov	al,48h
   358 0000022B E612                    	out	12h,al
   359 0000022D B087                    	mov	al,87h
   360 0000022F E612                    	out	12h,al
   361 00000231 B009                    	mov	al,9
   362 00000233 E612                    	out	12h,al
   363 00000235 B0FF                    	mov	al,0ffh
   364 00000237 E612                    	out	12h,al
   365 00000239 C3                      	ret
   366                                  
   367                                  ;---------------------------------------------------------------------
   368                                  ; キーボード初期化
   369                                  
   370                                  init_keyboard:
   371 0000023A BA0206                  	mov	dx,602h
   372 0000023D B0A1                    	mov	al,0a1h ; reset
   373 0000023F EE                      	out	dx,al
   374                                  
   375                                  	; バッファが空になるまで待つ
   376                                  .loop:
   377 00000240 BA0206                  	mov	dx,602h
   378 00000243 EC                      	in	al,dx
   379 00000244 A801                    	test	al,1
   380 00000246 7406                    	jz	.exit
   381 00000248 83EA02                  	sub	dx,2
   382 0000024B EC                      	in	al,dx
   383 0000024C EBF2                    	jmp	.loop
   384                                  .exit:
   385 0000024E C3                      	ret
   386                                  
   387                                  ;---------------------------------------------------------------------
   388                                  ; CRTC初期化、FMR互換の画面モードへ
   389                                  
   390                                  init_crtc:
   391 0000024F BAA0FD                  	mov	dx,0fda0h
   392 00000252 30C0                    	xor	al,al
   393 00000254 EE                      	out	dx,al
   394                                  
   395 00000255 BE[9F02]                	mov	si,crtcinitdata
   396 00000258 B92000                  	mov	cx,32
   397                                  .loop:
   398 0000025B B020                    	mov	al,32
   399 0000025D 28C8                    	sub	al,cl
   400 0000025F BA4004                  	mov	dx,440h
   401 00000262 EE                      	out	dx,al
   402 00000263 8B04                    	mov	ax,[si]
   403 00000265 83C202                  	add	dx,2
   404 00000268 EF                      	out	dx,ax
   405 00000269 83C602                  	add	si,2
   406 0000026C E2ED                    	loop	.loop
   407                                  
   408 0000026E BA4804                  	mov	dx,448h
   409 00000271 30C0                    	xor	al,al
   410 00000273 EE                      	out	dx,al
   411 00000274 83C202                  	add	dx,2
   412 00000277 B015                    	mov	al,15h
   413 00000279 EE                      	out	dx,al
   414                                  
   415 0000027A BA4804                  	mov	dx,448h
   416 0000027D B001                    	mov	al,1
   417 0000027F EE                      	out	dx,al
   418 00000280 83C202                  	add	dx,2
   419 00000283 B008                    	mov	al,8
   420 00000285 EE                      	out	dx,al
   421                                  
   422 00000286 BAA0FD                  	mov	dx,0fda0h
   423 00000289 B008                    	mov	al,8
   424 0000028B EE                      	out	dx,al
   425                                  
   426                                  	; 全プレーンを書き込み対象に設定
   427 0000028C BA81FF                  	mov	dx,0ff81h
   428 0000028F B00F                    	mov	al,0fh
   429 00000291 EE                      	out	dx,al
   430                                  
   431                                  	; 全プレーン表示
   432 00000292 BA82FF                  	mov	dx,0ff82h
   433 00000295 B067                    	mov	al,67h
   434 00000297 EE                      	out	dx,al
   435                                  
   436                                  	; 描画対象プレーンを選択
   437 00000298 BA83FF                  	mov	dx,0ff83h
   438 0000029B 30C0                    	xor	al,al
   439 0000029D EE                      	out	dx,al
   440                                  
   441 0000029E C3                      	ret
   442                                  
   443                                  
   444                                  crtcinitdata:
   445 0000029F 40002003000000005F-     	dw	0040h, 0320h, 0000h, 0000h, 035fh, 0000h, 0010h, 0000h
   445 000002A8 03000010000000     
   446 000002AF 6F039C001C039C001C-     	dw	036fh, 009ch, 031ch, 009ch, 031ch, 0040h, 0360h, 0040h
   446 000002B8 03400060034000     
   447 000002BF 600300009C00000050-     	dw	0360h, 0000h, 009ch, 0000h, 0050h, 0000h, 009ch, 0000h
   447 000002C8 0000009C000000     
   448 000002CF 50004A00010000003F-     	dw	0050h, 004ah, 0001h, 0000h, 803fh, 0003h, 0000h, 0150h ; CaptainYS: Register 1C 003fh->803fh not to accidentally enable High-Res CRTC.
   448 000002D8 80030000005001     
   449                                  
   450                                  ;---------------------------------------------------------------------
   451                                  ; 文字列表示
   452                                  ;
   453                                  ; si = 文字列
   454                                  ; di = 表示先VRAMアドレス
   455                                  
   456                                  textout:
   457 000002DF 06                      	push	es
   458 000002E0 53                      	push	bx
   459 000002E1 B800C0                  	mov	ax,0c000h
   460 000002E4 8EC0                    	mov	es,ax
   461 000002E6 BB94FF                  	mov	bx,0ff94h
   462                                  
   463                                  .textoutloop:
   464 000002E9 8B0C                    	mov	cx,[si]
   465 000002EB 08C9                    	or	cl,cl
   466 000002ED 7426                    	jz	.exit
   467                                  
   468 000002EF E82600                  	call	sjistojis
   469 000002F2 26880F                  	mov	[es:bx],cl
   470 000002F5 26886F01                	mov	[es:bx+1],ch
   471 000002F9 B91000                  	mov	cx,16
   472                                  .onecharloop:
   473 000002FC 268A4702                	mov	al,[es:bx+2]
   474 00000300 268A6703                	mov	ah,[es:bx+3]
   475 00000304 268905                  	mov	[es:di],ax
   476 00000307 83C750                  	add	di,VRAM_PITCH
   477 0000030A E2F0                    	loop	.onecharloop
   478                                  
   479 0000030C 81EFFE04                	sub	di,VRAM_PITCH*16-2
   480 00000310 83C602                  	add	si,2
   481 00000313 EBD4                    	jmp	.textoutloop
   482                                  .exit:
   483 00000315 5B                      	pop	bx
   484 00000316 07                      	pop	es
   485 00000317 C3                      	ret
   486                                  
   487                                  ; シフトJIS→JIS変換
   488                                  sjistojis:
   489 00000318 80F9E0                  	cmp	cl,0e0h
   490 0000031B 7203                    	jc	.j1
   491 0000031D 80E940                  	sub	cl,40h
   492                                  .j1:
   493 00000320 80E981                  	sub	cl,81h
   494 00000323 D0E1                    	shl	cl,1
   495 00000325 80C121                  	add	cl,21h
   496 00000328 88E8                    	mov	al,ch
   497 0000032A 80FD9F                  	cmp	ch,9fh
   498 0000032D 7205                    	jc	.j2
   499 0000032F FEC1                    	inc	cl
   500 00000331 80ED5E                  	sub	ch,5eh
   501                                  .j2:
   502 00000334 80ED20                  	sub	ch,20h
   503 00000337 3C7E                    	cmp	al,7eh
   504 00000339 7707                    	ja	.j3
   505 0000033B F6C101                  	test	cl,1
   506 0000033E 7402                    	jz	.j3
   507 00000340 FEC5                    	inc	ch
   508                                  .j3:
   509 00000342 C3                      	ret
   510                                  
   511                                  ;---------------------------------------------------------------------
   512                                  ; DISK-BIOS(と勝手に呼んでいる)
   513                                  ; ahに応じて次の機能を提供する(ah = 2-0x11)
   514 00000343 90                      	align 2
   515                                  disk_command_table:
   516 00000344 [1504]                  	dw	disk_command_02 ; 2 : 未実装
   517 00000346 [1704]                  	dw	disk_command_03 ; 3 : メディア先頭へシーク？
   518 00000348 [1B04]                  	dw	disk_command_04 ; 4 : 未実装
   519 0000034A [1D04]                  	dw	disk_command_05 ; 5 : リード
   520 0000034C [3504]                  	dw	disk_command_06 ; 6 : ライト
   521 0000034E [1304]                  	dw	disk_command_xx ; 7 : 無効
   522 00000350 [4404]                  	dw	disk_command_08 ; 8 : ドライブリセット(FDD & HDD)
   523 00000352 [1304]                  	dw	disk_command_xx ; 9 : 無効
   524 00000354 [1304]                  	dw	disk_command_xx ; a : 無効
   525 00000356 [1304]                  	dw	disk_command_xx ; b : 無効
   526 00000358 [1304]                  	dw	disk_command_xx ; c : 無効
   527 0000035A [1304]                  	dw	disk_command_xx ; d : 無効
   528 0000035C [4604]                  	dw	disk_command_0e ; e : ドライブチェック
   529 0000035E [1304]                  	dw	disk_command_xx ; f : 無効
   530 00000360 [1304]                  	dw	disk_command_xx ;10 : 無効
   531 00000362 [4A04]                  	dw	disk_command_11 ;11 : 未実装
   532                                  ;
   533                                  ; リターンコード: ah(0:正常終了)、エラーの有無はキャリーフラグにセット
   534                                  
   535                                  disk_bios:
   536                                  	; めんどくさい。フラグも変えないよう注意
   537 00000364 52                      	push	dx
   538 00000365 50                      	push	ax ; これがリターンコードになる
   539                                  
   540                                  	; まず、ローカルスタックに切り替える
   541                                  	; 現在の SS:SP を退避
   542                                  	SAVEREG_TO_CMOS 319ch, ss
    78 00000366 BA9C31              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81 00000369 8CD0                <1>  mov ax,%2
    82                              <1> %endif
    83 0000036B EE                  <1>  out dx,al
    84 0000036C BA9E31              <1>  mov dx,%1+2
    85 0000036F 88E0                <1>  mov al,ah
    86 00000371 EE                  <1>  out dx,al
   543                                  	SAVEREG_TO_CMOS 31a0h, sp
    78 00000372 BAA031              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81 00000375 89E0                <1>  mov ax,%2
    82                              <1> %endif
    83 00000377 EE                  <1>  out dx,al
    84 00000378 BAA231              <1>  mov dx,%1+2
    85 0000037B 88E0                <1>  mov al,ah
    86 0000037D EE                  <1>  out dx,al
   544                                  	LOADREG_FROM_CMOS 31a8h, sp
    91 0000037E BAAA31              <1>  mov dx,%1+2
    92 00000381 EC                  <1>  in al,dx
    93 00000382 88C4                <1>  mov ah,al
    94 00000384 BAA831              <1>  mov dx,%1
    95 00000387 EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98 00000388 89C4                <1>  mov %2,ax
    99                              <1> %endif
   545 0000038A B8A0F7                  	mov	ax,BOOT_SS
   546 0000038D 8ED0                    	mov	ss,ax
   547                                  	; ローカルスタックに切り替え完了
   548                                  
   549                                  	; 呼出し元 SS:SP を push
   550                                  	LOADREG_FROM_CMOS 319ch, ax ; ss
    91 0000038F BA9E31              <1>  mov dx,%1+2
    92 00000392 EC                  <1>  in al,dx
    93 00000393 88C4                <1>  mov ah,al
    94 00000395 BA9C31              <1>  mov dx,%1
    95 00000398 EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98                              <1>  mov %2,ax
    99                              <1> %endif
   551 00000399 50                      	push	ax
   552                                  	LOADREG_FROM_CMOS 31a0h, ax ; sp
    91 0000039A BAA231              <1>  mov dx,%1+2
    92 0000039D EC                  <1>  in al,dx
    93 0000039E 88C4                <1>  mov ah,al
    94 000003A0 BAA031              <1>  mov dx,%1
    95 000003A3 EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98                              <1>  mov %2,ax
    99                              <1> %endif
   553 000003A4 50                      	push	ax
   554                                  
   555 000003A5 06                      	push	es
   556 000003A6 1E                      	push	ds
   557 000003A7 57                      	push	di
   558 000003A8 56                      	push	si
   559 000003A9 55                      	push	bp
   560                                  
   561                                  	LOADREG_FROM_CMOS 31a8h, bp
    91 000003AA BAAA31              <1>  mov dx,%1+2
    92 000003AD EC                  <1>  in al,dx
    93 000003AE 88C4                <1>  mov ah,al
    94 000003B0 BAA831              <1>  mov dx,%1
    95 000003B3 EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98 000003B4 89C5                <1>  mov %2,ax
    99                              <1> %endif
   562                                  
   563                                  	; DS:SI で呼び出し元スタックをいじれるようにする
   564                                  	LOADREG_FROM_CMOS 319ch, ds
    91 000003B6 BA9E31              <1>  mov dx,%1+2
    92 000003B9 EC                  <1>  in al,dx
    93 000003BA 88C4                <1>  mov ah,al
    94 000003BC BA9C31              <1>  mov dx,%1
    95 000003BF EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98 000003C0 8ED8                <1>  mov %2,ax
    99                              <1> %endif
   565                                  	LOADREG_FROM_CMOS 31a0h, si
    91 000003C2 BAA231              <1>  mov dx,%1+2
    92 000003C5 EC                  <1>  in al,dx
    93 000003C6 88C4                <1>  mov ah,al
    94 000003C8 BAA031              <1>  mov dx,%1
    95 000003CB EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98 000003CC 89C6                <1>  mov %2,ax
    99                              <1> %endif
   566                                  
   567 000003CE 51                      	push	cx
   568 000003CF 53                      	push	bx
   569 000003D0 F8                      	clc
   570 000003D1 9C                      	pushf
   571                                  
   572 000003D2 FA                      	cli
   573 000003D3 FC                      	cld
   574 000003D4 8CD0                    	mov	ax,ss
   575 000003D6 8EC0                    	mov	es,ax
   576 000003D8 89E7                    	mov	di,sp
   577 000003DA 55                      	push	bp
   578                                  
   579                                  	; 一番最初に push したレジスタをロード
   580 000003DB 8B04                    	mov	ax,[si]
   581 000003DD 8B5402                  	mov	dx,[si+2]
   582                                  
   583                                  	; 本来なら範囲判定があるが省略
   584                                  
   585                                  	; 呼ぶ
   586 000003E0 88E0                    	mov	al,ah
   587 000003E2 30E4                    	xor	ah,ah
   588 000003E4 83E802                  	sub	ax,2
   589 000003E7 01C0                    	add	ax,ax
   590 000003E9 89C3                    	mov	bx,ax
   591 000003EB 2EFF97[4403]            	call	[cs:disk_command_table+bx]
   592                                  
   593                                  	; 結果を格納
   594 000003F0 08E4                    	or	ah,ah
   595 000003F2 0F95C0                  	setnz	al
   596 000003F5 886401                  	mov	[si+1],ah
   597 000003F8 260805                  	or	[es:di],al ; CF
   598                                  	
   599 000003FB 58                      	pop	ax
   600 000003FC 9D                      	popf
   601 000003FD 5B                      	pop	bx
   602 000003FE 59                      	pop	cx
   603 000003FF 5D                      	pop	bp
   604 00000400 5E                      	pop	si
   605 00000401 5F                      	pop	di
   606 00000402 1F                      	pop	ds
   607 00000403 07                      	pop	es
   608                                  
   609 00000404 89DA                    	mov	dx,bx
   610 00000406 5B                      	pop	bx
   611 00000407 89D8                    	mov	ax,bx
   612 00000409 5B                      	pop	bx
   613 0000040A 8ED3                    	mov	ss,bx
   614 0000040C 89C4                    	mov	sp,ax
   615 0000040E 89D3                    	mov	bx,dx
   616 00000410 58                      	pop	ax
   617 00000411 5A                      	pop	dx
   618 00000412 CB                      	retf
   619                                  
   620                                  
   621                                  disk_command_xx:
   622 00000413 EBFE                    	jmp	$
   623                                  
   624                                  disk_command_02:
   625 00000415 EBFE                    	jmp	$
   626                                  
   627                                  disk_command_03:
   628 00000417 E8F501                  	call	cd_command_0e ; 一応これで代替
   629 0000041A C3                      	ret
   630                                  
   631                                  disk_command_04:
   632 0000041B EBFE                    	jmp	$
   633                                  
   634                                  disk_command_05:
   635 0000041D 8A04                    	mov	al,[si]
   636 0000041F 24F0                    	and	al,0f0h
   637 00000421 3C20                    	cmp	al,020h		; by CaptainYS
   638 00000423 740C                    	je	.fd			; by CaptainYS
   639 00000425 3C40                    	cmp	al,040h
   640 00000427 7404                    	jz	.rom
   641 00000429 E83401                  	call	cd_command_05
   642 0000042C C3                      	ret
   643                                  .rom:
   644 0000042D E89E04                  	call	osrom_command_05
   645 00000430 C3                      	ret
   646                                  .fd:						; by CaptainYS
   647 00000431 E81C03                  	call	fd_command_05	; by CaptainYS
   648 00000434 C3                      	ret						; by CaptainYS
   649                                  
   650                                  disk_command_06:
   651 00000435 8A04                    	mov	al,[si]
   652 00000437 24F0                    	and	al,0f0h
   653 00000439 3C40                    	cmp	al,040h
   654 0000043B 7403                    	jz	.rom
   655 0000043D EBFE                    	jmp	$
   656 0000043F C3                      	ret
   657                                  .rom:
   658 00000440 E88B04                  	call	osrom_command_06
   659 00000443 C3                      	ret
   660                                  
   661                                  disk_command_08:
   662 00000444 EBFE                    	jmp	$
   663                                  
   664                                  disk_command_0e:
   665 00000446 E8C601                  	call	cd_command_0e
   666 00000449 C3                      	ret
   667                                  
   668                                  disk_command_11:
   669 0000044A EBFE                    	jmp	$
   670                                  
   671                                  
   672                                  ;---------------------------------------------------------------------
   673                                  ; CMOS-BIOS(と勝手に呼んでいる)
   674                                  ; ahに応じて次の機能を提供する(ah = -3(0xfd)-0x20)
   675                                  	align 2
   676 0000044C [1A09]                  	dw	cmos_command_fd ;fd : 未実装
   677 0000044E [1809]                  	dw	cmos_command_xx ;fe : 無効
   678 00000450 [1809]                  	dw	cmos_command_xx ;ff : 無効
   679                                  cmos_command_table:
   680 00000452 [1C09]                  	dw	cmos_command_00 ; 0 : イニシャライズ
   681 00000454 [C409]                  	dw	cmos_command_01 ; 1 : 未実装
   682 00000456 [C609]                  	dw	cmos_command_02 ; 2 : 未実装
   683 00000458 [C809]                  	dw	cmos_command_03 ; 3 : 未実装
   684 0000045A [CA09]                  	dw	cmos_command_04 ; 4 : 未実装
   685 0000045C [CC09]                  	dw	cmos_command_05 ; 5 : 未実装
   686 0000045E [D809]                  	dw	cmos_command_06 ; 6 : 未実装
   687 00000460 [1809]                  	dw	cmos_command_xx ; 7 : 無効
   688 00000462 [1809]                  	dw	cmos_command_xx ; 8 : 無効
   689 00000464 [1809]                  	dw	cmos_command_xx ; 9 : 無効
   690 00000466 [1809]                  	dw	cmos_command_xx ; a : 無効
   691 00000468 [1809]                  	dw	cmos_command_xx ; b : 無効
   692 0000046A [1809]                  	dw	cmos_command_xx ; c : 無効
   693 0000046C [1809]                  	dw	cmos_command_xx ; d : 無効
   694 0000046E [1809]                  	dw	cmos_command_xx ; e : 無効
   695 00000470 [1809]                  	dw	cmos_command_xx ; f : 無効
   696 00000472 [DA09]                  	dw	cmos_command_10 ;10 : ブロック書き込み
   697 00000474 [270A]                  	dw	cmos_command_11 ;11 : ブロック読み出し
   698 00000476 [1809]                  	dw	cmos_command_xx ;12 : 無効
   699 00000478 [1809]                  	dw	cmos_command_xx ;13 : 無効
   700 0000047A [1809]                  	dw	cmos_command_xx ;14 : 無効
   701 0000047C [1809]                  	dw	cmos_command_xx ;15 : 無効
   702 0000047E [1809]                  	dw	cmos_command_xx ;16 : 無効
   703 00000480 [1809]                  	dw	cmos_command_xx ;17 : 無効
   704 00000482 [1809]                  	dw	cmos_command_xx ;18 : 無効
   705 00000484 [1809]                  	dw	cmos_command_xx ;19 : 無効
   706 00000486 [1809]                  	dw	cmos_command_xx ;1a : 無効
   707 00000488 [1809]                  	dw	cmos_command_xx ;1b : 無効
   708 0000048A [1809]                  	dw	cmos_command_xx ;1c : 無効
   709 0000048C [1809]                  	dw	cmos_command_xx ;1d : 無効
   710 0000048E [1809]                  	dw	cmos_command_xx ;1e : 無効
   711 00000490 [1809]                  	dw	cmos_command_xx ;1f : 無効
   712 00000492 [520A]                  	dw	cmos_command_20 ;20 : ヘッダが正常かチェック
   713                                  ;
   714                                  ; リターンコード: ah(0:正常終了)、エラーの有無はキャリーフラグにセット
   715                                  
   716                                  cmos_bios:
   717                                  	; これまためんどくさい。フラグは変えてもいいみたい
   718 00000494 55                      	push	bp
   719 00000495 89D5                    	mov	bp,dx
   720                                  
   721                                  	; まず、axを退避
   722                                  	SAVEREG_TO_CMOS 319ch,ax
    78 00000497 BA9C31              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81                              <1>  mov ax,%2
    82                              <1> %endif
    83 0000049A EE                  <1>  out dx,al
    84 0000049B BA9E31              <1>  mov dx,%1+2
    85 0000049E 88E0                <1>  mov al,ah
    86 000004A0 EE                  <1>  out dx,al
   723                                  
   724                                  	; ローカルスタックに切り替える
   725                                  	; 現在の SS:SP を退避
   726                                  	SAVEREG_TO_CMOS 31a0h, ss
    78 000004A1 BAA031              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81 000004A4 8CD0                <1>  mov ax,%2
    82                              <1> %endif
    83 000004A6 EE                  <1>  out dx,al
    84 000004A7 BAA231              <1>  mov dx,%1+2
    85 000004AA 88E0                <1>  mov al,ah
    86 000004AC EE                  <1>  out dx,al
   727                                  	SAVEREG_TO_CMOS 31a4h, sp
    78 000004AD BAA431              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81 000004B0 89E0                <1>  mov ax,%2
    82                              <1> %endif
    83 000004B2 EE                  <1>  out dx,al
    84 000004B3 BAA631              <1>  mov dx,%1+2
    85 000004B6 88E0                <1>  mov al,ah
    86 000004B8 EE                  <1>  out dx,al
   728                                  	LOADREG_FROM_CMOS 31a8h, sp
    91 000004B9 BAAA31              <1>  mov dx,%1+2
    92 000004BC EC                  <1>  in al,dx
    93 000004BD 88C4                <1>  mov ah,al
    94 000004BF BAA831              <1>  mov dx,%1
    95 000004C2 EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98 000004C3 89C4                <1>  mov %2,ax
    99                              <1> %endif
   729 000004C5 B8A0F7                  	mov	ax,BOOT_SS
   730 000004C8 8ED0                    	mov	ss,ax
   731                                  	; ローカルスタックに切り替え完了
   732                                  
   733                                  	; 呼出し元 SS:SP を push
   734                                  	LOADREG_FROM_CMOS 31a0h, ax ; ss
    91 000004CA BAA231              <1>  mov dx,%1+2
    92 000004CD EC                  <1>  in al,dx
    93 000004CE 88C4                <1>  mov ah,al
    94 000004D0 BAA031              <1>  mov dx,%1
    95 000004D3 EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98                              <1>  mov %2,ax
    99                              <1> %endif
   735 000004D4 50                      	push	ax
   736                                  	LOADREG_FROM_CMOS 31a4h, ax ; sp
    91 000004D5 BAA631              <1>  mov dx,%1+2
    92 000004D8 EC                  <1>  in al,dx
    93 000004D9 88C4                <1>  mov ah,al
    94 000004DB BAA431              <1>  mov dx,%1
    95 000004DE EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98                              <1>  mov %2,ax
    99                              <1> %endif
   737 000004DF 50                      	push	ax
   738                                  
   739                                  	; 退避しておいたaxを復元
   740                                  	LOADREG_FROM_CMOS 319ch,ax
    91 000004E0 BA9E31              <1>  mov dx,%1+2
    92 000004E3 EC                  <1>  in al,dx
    93 000004E4 88C4                <1>  mov ah,al
    94 000004E6 BA9C31              <1>  mov dx,%1
    95 000004E9 EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98                              <1>  mov %2,ax
    99                              <1> %endif
   741                                  
   742 000004EA 89EA                    	mov	dx,bp
   743 000004EC 06                      	push	es ; [bp+12]
   744 000004ED 1E                      	push	ds ; [bp+10]
   745 000004EE 57                      	push	di ; [bp+e]
   746 000004EF 56                      	push	si ; [bp+c]
   747 000004F0 55                      	push	bp ; [bp+a]
   748 000004F1 52                      	push	dx ; [bp+8]
   749 000004F2 51                      	push	cx ; [bp+6]
   750 000004F3 53                      	push	bx ; [bp+4]
   751 000004F4 50                      	push	ax ; [bp+2]
   752 000004F5 F8                      	clc
   753 000004F6 9C                      	pushf
   754                                  
   755 000004F7 FA                      	cli
   756 000004F8 FC                      	cld
   757 000004F9 89E5                    	mov	bp,sp
   758                                  
   759                                  	; 範囲チェックして、呼ぶ
   760 000004FB 8A4603                  	mov	al,[bp+3]
   761 000004FE B401                    	mov	ah,1
   762                                  
   763 00000500 3C21                    	cmp	al,21h
   764 00000502 7D15                    	jnl	.error
   765 00000504 3CFC                    	cmp	al,0fch
   766 00000506 7E11                    	jng	.error
   767                                  
   768 00000508 0FBED8                  	movsx	bx,al
   769 0000050B 01DB                    	add	bx,bx
   770 0000050D 2EFF97[5204]            	call	[cs:cmos_command_table+bx]
   771                                  
   772                                  	; 結果を格納
   773 00000512 08E4                    	or	ah,ah
   774 00000514 0F95C0                  	setnz	al
   775 00000517 7903                    	jns	.noerror
   776                                  .error:
   777 00000519 894E06                  	mov	[bp+6],cx
   778                                  .noerror:
   779 0000051C 886603                  	mov	[bp+3],ah
   780 0000051F 084600                  	or	[bp],al ; CF
   781                                  
   782 00000522 9D                      	popf
   783 00000523 58                      	pop	ax
   784 00000524 5B                      	pop	bx
   785 00000525 59                      	pop	cx
   786 00000526 5A                      	pop	dx
   787 00000527 5D                      	pop	bp
   788 00000528 5E                      	pop	si
   789 00000529 5F                      	pop	di
   790 0000052A 1F                      	pop	ds
   791 0000052B 07                      	pop	es
   792                                  
   793 0000052C 89D5                    	mov	bp,dx
   794                                  
   795                                  	SAVEREG_TO_CMOS 319ch,ax
    78 0000052E BA9C31              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81                              <1>  mov ax,%2
    82                              <1> %endif
    83 00000531 EE                  <1>  out dx,al
    84 00000532 BA9E31              <1>  mov dx,%1+2
    85 00000535 88E0                <1>  mov al,ah
    86 00000537 EE                  <1>  out dx,al
   796                                  
   797                                  	; 呼出し元SS:SPの復元
   798 00000538 58                      	pop	ax ; sp
   799                                  	SAVEREG_TO_CMOS 31a0h,ax
    78 00000539 BAA031              <1>  mov dx,%1
    79                              <1> %ifidn %2,ax
    80                              <1> %else
    81                              <1>  mov ax,%2
    82                              <1> %endif
    83 0000053C EE                  <1>  out dx,al
    84 0000053D BAA231              <1>  mov dx,%1+2
    85 00000540 88E0                <1>  mov al,ah
    86 00000542 EE                  <1>  out dx,al
   800 00000543 58                      	pop	ax ; ss
   801 00000544 8ED0                    	mov	ss,ax
   802                                  	LOADREG_FROM_CMOS 31a0h,ax
    91 00000546 BAA231              <1>  mov dx,%1+2
    92 00000549 EC                  <1>  in al,dx
    93 0000054A 88C4                <1>  mov ah,al
    94 0000054C BAA031              <1>  mov dx,%1
    95 0000054F EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98                              <1>  mov %2,ax
    99                              <1> %endif
   803 00000550 89C4                    	mov	sp,ax
   804                                  
   805                                  	LOADREG_FROM_CMOS 319ch,ax
    91 00000552 BA9E31              <1>  mov dx,%1+2
    92 00000555 EC                  <1>  in al,dx
    93 00000556 88C4                <1>  mov ah,al
    94 00000558 BA9C31              <1>  mov dx,%1
    95 0000055B EC                  <1>  in al,dx
    96                              <1> %ifidn %2,ax
    97                              <1> %else
    98                              <1>  mov %2,ax
    99                              <1> %endif
   806 0000055C 89EA                    	mov	dx,bp
   807 0000055E 5D                      	pop	bp
   808 0000055F CB                      	retf
   809                                  
   810                                  
   811                                  ;---------------------------------------------------------------------
   812                                  ; 各デバイス特有の処理を記述したコードをインクルード
   813                                  
   814                                  %include "townsio.asm"	; by CaptainYS
   815                              <1> ; TOWNSIO.ASM by CaptainYS
   816                              <1> 
   817                              <1> IO_FDC_STATUS			EQU		0200h
   818                              <1> IO_FDC_COMMAND			EQU		0200h
   819                              <1> 
   820                              <1> IO_FDC_TRACK			EQU		0202h
   821                              <1> IO_FDC_SECTOR			EQU		0204h
   822                              <1> IO_FDC_DATA				EQU		0206h
   823                              <1> 
   824                              <1> IO_FDC_DRIVE_STATUS		EQU		0208h
   825                              <1> IO_FDC_DRIVE_CONTROL	EQU		0208h
   826                              <1> 
   827                              <1> IO_FDC_DRIVE_SELECT		EQU		020Ch
   828                              <1> 
   829                              <1> IO_FDC_CMD_SEEK			EQU		010h
   830                              <1> IO_FDC_CMD_READ_DATA	EQU		080h
   831                              <1> IO_FDC_CMD_WRITE_DATA	EQU		0A0h
   832                              <1> 
   833                              <1> 
   834                              <1> BIOSERR_DETAIL_DISK_DRIVE_NOT_READY		EQU		0001h
   835                              <1> BIOSERR_DETAIL_DISK_SEEK_ERROR			EQU		0000h	; ?
   836                              <1> BIOSERR_DETAIL_DISK_CRC_ERROR			EQU		0008h
   837                              <1> BIOSERR_DETAIL_DISK_RECORD_NOT_FOUND	EQU		0010h
   838                              <1> BIOSERR_DETAIL_DISK_LOST_DATA			EQU		0040h
   839                              <1> 
   840                              <1> 
   841                              <1> SECTOR_LENGTH_1232KB_DISK		EQU		1024
   842                              <1> SECTOR_PER_TRACK_1232KB_DISK	EQU		8
   843                              <1> 
   844                              <1> PHASE_FLAG_COMMAND		EQU		01H
   845                              <1> PHASE_FLAG_DATA_IN		EQU		02H
   846                              <1> PHASE_FLAG_MESSAGE		EQU		04H
   847                              <1> PHASE_FLAG_STATUS		EQU		08H
   848                              <1> 
   849                              <1> IO_1US_WAIT				EQU		06CH	; Available after FM Towns 20F
   850                              <1> 
   851                              <1> IO_SCSI_DATA			EQU		0C30H
   852                              <1> IO_SCSI_STATUS			EQU		0C32H
   853                              <1> IO_SCSI_COMMAND			EQU		0C32H
   854                              <1> 
   855                              <1> IO_DMA_INITIALIZE		EQU		0A0H
   856                              <1> IO_DMA_CHANNEL			EQU		0A1H
   857                              <1> IO_DMA_COUNT_LOW		EQU		0A2H
   858                              <1> IO_DMA_COUNT_HIGH		EQU		0A3H
   859                              <1> IO_DMA_ADDR_LOW			EQU		0A4H
   860                              <1> IO_DMA_ADDR_MID_LOW		EQU		0A5H
   861                              <1> IO_DMA_ADDR_MID_HIGH	EQU		0A6H
   862                              <1> IO_DMA_ADDR_HIGH		EQU		0A7H
   863                              <1> IO_DMA_DEVICE_CTRL_LOW	EQU		0A8H
   864                              <1> IO_DMA_DEVICE_CTRL_HIGH	EQU		0A9H
   865                              <1> IO_DMA_MODE_CONTROL		EQU		0AAH
   866                              <1> IO_DMA_STATUS			EQU		0ABH
   867                              <1> IO_DMA_REQUEST			EQU		0AEH
   868                              <1> IO_DMA_MASK				EQU		0AFH
   869                              <1> 
   870                              <1> DMA_CHANNEL_FDC			EQU		0
   871                              <1> DMA_CHANNEL_SCSI		EQU		1
   872                              <1> DMA_CHANNEL_PRINTER		EQU		2
   873                              <1> DMA_CHANNEL_CDC			EQU		3
   874                              <1> 
   875                              <1> SCSI_MODE_DATA_IN		EQU		44H		; Data In (I/O to Mem)
   876                              <1> SCSI_MODE_DATA_OUT		EQU		48H		; Data Out (Mem to I/O)
   877                              <1> 
   878                              <1> SCSI_STATUS_GOOD                      	EQU		0
   879                              <1> SCSI_STATUS_CHECK_CONDITION           	EQU		02H
   880                              <1> SCSI_STATUS_CONDITION_MET             	EQU		04H
   881                              <1> SCSI_STATUS_BUSY                      	EQU		08H
   882                              <1> SCSI_STATUS_INTERMEDIATE              	EQU		10H
   883                              <1> SCSI_STATUS_INTERMEDIATE_CONDITION_MET	EQU		14H
   884                              <1> SCSI_STATUS_RESERVATION_CONFLICT      	EQU		18H
   885                              <1> SCSI_STATUS_COMMAND_TERMINATED        	EQU		22H
   886                              <1> SCSI_STATUS_QUEUE_FULL                	EQU		28H
   887                              <1> 
   815                                  %include "sys_cd.asm"
   816                              <1> ; version 2003.03.04.1
   817                              <1> ;---------------------------------------------------------------------
   818                              <1> ;
   819                              <1> ; FM TOWNS 互換 ROM シリーズ
   820                              <1> ;
   821                              <1> ; FMT_SYS.ROM : CDアクセス
   822                              <1> ;
   823                              <1> ; by Kasanova
   824                              <1> ;
   825                              <1> ;---------------------------------------------------------------------
   826                              <1> ; ※単独ではアセンブルしません
   827                              <1> 
   828                              <1> 
   829                              <1> %define CD_CMOS_PARA  3b60h
   830                              <1> %define CD_CMOS_DATA  3b70h
   831                              <1> %define CD_CMOS_DATA0 3b70h
   832                              <1> %define CD_CMOS_DATA1 3b72h
   833                              <1> %define CD_CMOS_DATA2 3b74h
   834                              <1> %define CD_CMOS_DATA3 3b78h
   835                              <1> 
   836                              <1> ;---------------------------------------------------------------------
   837                              <1> ; 読み込み
   838                              <1> ; cl+dx : 読み込み開始セクタ番号(16進)
   839                              <1> ; bx    : 読み込むセクタ数
   840                              <1> ; ds:di : 転送先アドレス
   841                              <1> ; [リターンコード]
   842                              <1> ;  ah : 0(正常終了)、bx : 読み残したセクタ数
   843                              <1> 
   844                              <1> cd_command_05:
   845 00000560 E8BF00              <1> 	call	cd_test_ready
   846 00000563 0F82A400            <1> 	jc	.error1          ; アクセスできる状態でない
   847 00000567 26837D0200          <1> 	cmp	word [es:di+2],0 ; bx
   848 0000056C 0F849600            <1> 	jz	.error2          ; 読み込むセクタ数が不適切
   849                              <1> 	
   850                              <1> 	; 読み込み開始セクタをセット
   851 00000570 BB603B              <1> 	mov	bx,CD_CMOS_PARA
   852 00000573 260FB65504          <1> 	movzx	dx,byte [es:di+4] ; cl
   853 00000578 8B4402              <1> 	mov	ax,[si+2]         ; dx
   854 0000057B E85F01              <1> 	call	cd_set_sectorno
   855                              <1> 
   856                              <1> 	; 読み込み終了セクタを計算し、セット
   857 0000057E 260FB65504          <1> 	movzx	dx,byte [es:di+4] ; cl
   858 00000583 8B4402              <1> 	mov	ax,[si+2]         ; dx
   859 00000586 268B5D02            <1> 	mov	bx,[es:di+2]      ; bx
   860 0000058A 4B                  <1> 	dec	bx
   861 0000058B 01D8                <1> 	add	ax,bx
   862 0000058D 83D200              <1> 	adc	dx,0
   863 00000590 BB663B              <1> 	mov	bx,CD_CMOS_PARA+6
   864 00000593 E84701              <1> 	call	cd_set_sectorno
   865                              <1> 
   866                              <1> 	; DMA初期化
   867 00000596 E87801              <1> 	call	cd_init_dma
   868 00000599 268B450A            <1> 	mov	ax,[es:di+0ah] ; di
   869 0000059D 268B550C            <1> 	mov	dx,[es:di+0ch] ; ds  (Comment corrected by CaptainYS this is incoming ds. Was commented as es.)
   870 000005A1 52                  <1> 	push	dx
   871 000005A2 C1E204              <1> 	shl	dx,4
   872 000005A5 01D0                <1> 	add	ax,dx
   873 000005A7 5A                  <1> 	pop	dx
   874 000005A8 C1EA0C              <1> 	shr	dx,12
   875 000005AB E87B01              <1> 	call	cd_dma_setaddress
   876 000005AE B8FF07              <1> 	mov	ax,7ffh
   877 000005B1 E87201              <1> 	call	cd_dma_setlength
   878 000005B4 E4AF                <1> 	in	al,0afh
   879 000005B6 2407                <1> 	and	al,7
   880 000005B8 E6AF                <1> 	out	0afh,al
   881                              <1> 
   882                              <1> 	; 読み込み開始
   883 000005BA B022                <1> 	mov	al,022h
   884 000005BC E89900              <1> 	call	cd_sendcommand
   885 000005BF E8BF00              <1> 	call	cd_recieve4byte
   886                              <1> 
   887 000005C2 BA703B              <1> 	mov	dx,CD_CMOS_DATA0
   888 000005C5 EC                  <1> 	in	al,dx
   889 000005C6 08C0                <1> 	or	al,al
   890 000005C8 7536                <1> 	jnz	.error3 ; コマンド実行エラー
   891                              <1> 
   892                              <1> .readloop:
   893 000005CA E8B400              <1> 	call	cd_recieve4byte
   894 000005CD BA703B              <1> 	mov	dx,CD_CMOS_DATA0
   895 000005D0 EC                  <1> 	in	al,dx
   896 000005D1 3C22                <1> 	cmp	al,22h
   897 000005D3 7406                <1> 	jz	.transfer
   898 000005D5 3C06                <1> 	cmp	al,6
   899 000005D7 741B                <1> 	jz	.exit
   900 000005D9 EB25                <1> 	jmp	.error3 ; エラーか、異常なリターンコード
   901                              <1> 
   902                              <1> .transfer:
   903                              <1> 	; CaptainYS >>
   904                              <1> 	; The original implementaiton is expecting DMA address be incremented automatically with AUTOI flag.
   905                              <1> 	;
   906                              <1> 	; Is AUTOI auto-increment or auto-initialize?  That's a good question, isn't it?
   907                              <1> 	; NED uPD71071 data sheet (English) page 19 top-right paragraph tells it is 'Autoinitialize'.
   908                              <1> 	; The correct behavior is resetting both address and counter at DMA END.  Not just counter.
   909                              <1> 	;
   910                              <1> 	; In fact, Shadow of the Beast demands DMA address not incremented automatically with AUTOI flag set.
   911                              <1> 	;
   912                              <1> 	; I have corrected by (1) get DMA address in DX|AX, (2) push to stack, pop, and (3) then increment.
   913 000005DB E85201              <1> 	call	cd_dma_getaddress
   914 000005DE 52                  <1> 	PUSH	DX
   915 000005DF 50                  <1> 	PUSH	AX
   916 000005E0 E85401              <1> 	call	cd_dma_transfer
   917 000005E3 58                  <1> 	POP		AX
   918 000005E4 5A                  <1> 	POP		DX
   919 000005E5 050008              <1> 	ADD		AX,0800h
   920 000005E8 83D200              <1> 	ADC		DX,0
   921                              <1> 	; CaptainYS <<
   922                              <1> 
   923 000005EB E83B01              <1> 	call	cd_dma_setaddress
   924 000005EE 26FF4D02            <1> 	dec	word [es:di+2] ; bx 読み残しセクタを減らす
   925 000005F2 EBD6                <1> 	jmp	.readloop
   926                              <1> 
   927                              <1> .exit:
   928 000005F4 E4AF                <1> 	in	al,0afh
   929 000005F6 0C08                <1> 	or	al,8
   930 000005F8 E6AF                <1> 	out	0afh,al
   931 000005FA 30E4                <1> 	xor	ah,ah
   932 000005FC E81700              <1> 	call	cd_store_result
   933 000005FF C3                  <1> 	ret
   934                              <1> 
   935                              <1> .error3:
   936 00000600 E4AF                <1> 	in	al,0afh
   937 00000602 0C08                <1> 	or	al,8
   938 00000604 E6AF                <1> 	out	0afh,al
   939                              <1> .error2:
   940 00000606 B480                <1> 	mov	ah,80h
   941 00000608 B90200              <1> 	mov	cx,2
   942                              <1> .error1:
   943 0000060B E80800              <1> 	call	cd_store_result
   944 0000060E C3                  <1> 	ret
   945                              <1> 
   946                              <1> 
   947                              <1> ;---------------------------------------------------------------------
   948                              <1> 
   949                              <1> ; ドライブの状態をチェック
   950                              <1> cd_command_0e:
   951 0000060F E81000              <1> 	call	cd_test_ready
   952 00000612 E80100              <1> 	call	cd_store_result
   953 00000615 C3                  <1> 	ret
   954                              <1> 
   955                              <1> 
   956                              <1> ;---------------------------------------------------------------------
   957                              <1> ; 下請け
   958                              <1> 
   959                              <1> ; コマンド実行結果を格納
   960                              <1> cd_store_result:
   961 00000616 886401              <1> 	mov	[si+1],ah
   962 00000619 08E4                <1> 	or	ah,ah
   963 0000061B 7904                <1> 	jns	.noerrorcode
   964 0000061D 26894D04            <1> 	mov	[es:di+4],cx
   965                              <1> .noerrorcode:
   966 00000621 C3                  <1> 	ret
   967                              <1> 
   968                              <1> ;----------
   969                              <1> 
   970                              <1> ; CDが読み込み可能かをチェック
   971                              <1> cd_test_ready:
   972 00000622 E89300              <1> 	call	cd_recieve
   973 00000625 E81D00              <1> 	call	cd_clear_parabuffer
   974 00000628 B0A0                <1> 	mov	al,0a0h
   975 0000062A E82B00              <1> 	call	cd_sendcommand
   976 0000062D E85100              <1> 	call	cd_recieve4byte
   977                              <1> 
   978 00000630 BA723B              <1> 	mov	dx,CD_CMOS_DATA1
   979 00000633 EC                  <1> 	in	al,dx
   980 00000634 240F                <1> 	and	al,0fh
   981                              <1> 
   982 00000636 B480                <1> 	mov	ah,80h
   983 00000638 3C09                <1> 	cmp	al,9 ; ノットレディ
   984 0000063A 7505                <1> 	jnz	.j1
   985 0000063C B90100              <1> 	mov	cx,1
   986 0000063F F9                  <1> 	stc
   987 00000640 C3                  <1> 	ret
   988                              <1> .j1:
   989 00000641 30E4                <1> 	xor	ah,ah
   990 00000643 F8                  <1> 	clc
   991 00000644 C3                  <1> 	ret
   992                              <1> 
   993                              <1> ;----------
   994                              <1> 
   995                              <1> ; パラメータ格納バッファをクリア
   996                              <1> cd_clear_parabuffer:
   997 00000645 51                  <1> 	push	cx
   998 00000646 52                  <1> 	push	dx
   999 00000647 BA603B              <1> 	mov	dx,CD_CMOS_PARA
  1000 0000064A 30C0                <1> 	xor	al,al
  1001 0000064C B90800              <1> 	mov	cx,8
  1002                              <1> .loop:
  1003 0000064F EE                  <1> 	out	dx,al
  1004 00000650 83C202              <1> 	add	dx,2
  1005 00000653 E2FA                <1> 	loop	.loop
  1006 00000655 5A                  <1> 	pop	dx
  1007 00000656 59                  <1> 	pop	cx
  1008 00000657 C3                  <1> 	ret
  1009                              <1> 
  1010                              <1> ;----------
  1011                              <1> 
  1012                              <1> ; CDCコマンド発行
  1013                              <1> cd_sendcommand:
  1014 00000658 53                  <1> 	push	bx
  1015 00000659 51                  <1> 	push	cx
  1016 0000065A 52                  <1> 	push	dx
  1017 0000065B 88C4                <1> 	mov	ah,al
  1018 0000065D BAC004              <1> 	mov	dx,4c0h
  1019                              <1> .waitready:
  1020 00000660 EC                  <1> 	in	al,dx
  1021 00000661 A801                <1> 	test	al,1
  1022 00000663 74FB                <1> 	jz	.waitready
  1023                              <1> 
  1024 00000665 BB603B              <1> 	mov	bx,CD_CMOS_PARA
  1025 00000668 B90800              <1> 	mov	cx,8
  1026                              <1> .commandloop:
  1027 0000066B 89DA                <1> 	mov	dx,bx
  1028 0000066D EC                  <1> 	in	al,dx
  1029 0000066E BAC404              <1> 	mov	dx,4c4h
  1030 00000671 EE                  <1> 	out	dx,al
  1031 00000672 83C302              <1> 	add	bx,2
  1032 00000675 E2F4                <1> 	loop	.commandloop
  1033                              <1> 
  1034 00000677 88E0                <1> 	mov	al,ah
  1035 00000679 BAC204              <1> 	mov	dx,4c2h
  1036 0000067C EE                  <1> 	out	dx,al
  1037 0000067D 5A                  <1> 	pop	dx
  1038 0000067E 59                  <1> 	pop	cx
  1039 0000067F 5B                  <1> 	pop	bx
  1040 00000680 C3                  <1> 	ret
  1041                              <1> 
  1042                              <1> ;----------
  1043                              <1> 
  1044                              <1> ; CDCからの4バイトのステータスを取得
  1045                              <1> cd_recieve4byte:
  1046 00000681 50                  <1> 	push	ax
  1047 00000682 52                  <1> 	push	dx
  1048 00000683 BAC004              <1> 	mov	dx,4c0h
  1049                              <1> .loop:
  1050 00000686 EC                  <1> 	in	al,dx
  1051 00000687 A802                <1> 	test	al,2
  1052 00000689 74FB                <1> 	jz	.loop
  1053                              <1> 
  1054 0000068B 08C0                <1> 	or	al,al
  1055                              <1> 
  1056 0000068D BAC204              <1> 	mov	dx,4c2h
  1057 00000690 EC                  <1> 	in	al,dx
  1058 00000691 BA703B              <1> 	mov	dx,CD_CMOS_DATA0
  1059 00000694 EE                  <1> 	out	dx,al
  1060 00000695 BAC204              <1> 	mov	dx,4c2h
  1061 00000698 EC                  <1> 	in	al,dx
  1062 00000699 BA723B              <1> 	mov	dx,CD_CMOS_DATA1
  1063 0000069C EE                  <1> 	out	dx,al
  1064 0000069D BAC204              <1> 	mov	dx,4c2h
  1065 000006A0 EC                  <1> 	in	al,dx
  1066 000006A1 BA743B              <1> 	mov	dx,CD_CMOS_DATA2
  1067 000006A4 EE                  <1> 	out	dx,al
  1068 000006A5 BAC204              <1> 	mov	dx,4c2h
  1069 000006A8 EC                  <1> 	in	al,dx
  1070 000006A9 BA783B              <1> 	mov	dx,CD_CMOS_DATA3
  1071 000006AC EE                  <1> 	out	dx,al
  1072                              <1> 
  1073 000006AD 7906                <1> 	jns	.exit
  1074                              <1> 
  1075 000006AF BAC004              <1> 	mov	dx,4c0h ; clear irq
  1076 000006B2 B080                <1> 	mov	al,80h
  1077 000006B4 EE                  <1> 	out	dx,al
  1078                              <1> 
  1079                              <1> .exit:
  1080 000006B5 5A                  <1> 	pop	dx
  1081 000006B6 58                  <1> 	pop	ax
  1082 000006B7 C3                  <1> 	ret
  1083                              <1> 
  1084                              <1> ;----------
  1085                              <1> 
  1086                              <1> ; 食べ残しをクリア
  1087                              <1> cd_recieve:
  1088 000006B8 52                  <1> 	push	dx
  1089 000006B9 BAC004              <1> 	mov	dx,4c0h
  1090 000006BC EC                  <1> 	in	al,dx
  1091 000006BD A802                <1> 	test	al,2
  1092 000006BF 7408                <1> 	jz	.exit
  1093                              <1> 
  1094                              <1> .loop:
  1095 000006C1 E8BDFF              <1> 	call	cd_recieve4byte
  1096 000006C4 EC                  <1> 	in	al,dx
  1097 000006C5 A802                <1> 	test	al,2
  1098 000006C7 75F8                <1> 	jnz	.loop
  1099                              <1> .exit:
  1100 000006C9 5A                  <1> 	pop	dx
  1101 000006CA C3                  <1> 	ret
  1102                              <1> 
  1103                              <1> ;----------
  1104                              <1> 
  1105                              <1> ; 10進変換
  1106                              <1> cd_hextodecimal:
  1107 000006CB 51                  <1> 	push	cx
  1108 000006CC 88E5                <1> 	mov	ch,ah
  1109 000006CE 30E4                <1> 	xor	ah,ah
  1110 000006D0 B10A                <1> 	mov	cl,10
  1111 000006D2 F6F1                <1> 	div	cl
  1112 000006D4 C0E004              <1> 	shl	al,4
  1113 000006D7 00E0                <1> 	add	al,ah
  1114 000006D9 88EC                <1> 	mov	ah,ch
  1115 000006DB 59                  <1> 	pop	cx
  1116 000006DC C3                  <1> 	ret
  1117                              <1> 
  1118                              <1> ;----------
  1119                              <1> 
  1120                              <1> ; CDのセクタ番号を10進数に変換して保管
  1121                              <1> cd_set_sectorno:
  1122 000006DD 53                  <1> 	push	bx
  1123 000006DE 51                  <1> 	push	cx
  1124 000006DF 52                  <1> 	push	dx
  1125 000006E0 059600              <1> 	add	ax,150   ; CDの先頭セクタはセクタ150
  1126 000006E3 83D200              <1> 	adc	dx,0
  1127 000006E6 B99411              <1> 	mov	cx,75*60 ; M-S-F の M
  1128 000006E9 F7F1                <1> 	div	cx
  1129 000006EB 92                  <1> 	xchg	ax,dx
  1130                              <1> 	; dx = M, ax = S-F
  1131 000006EC B14B                <1> 	mov	cl,75    ; S
  1132 000006EE F6F1                <1> 	div	cl
  1133 000006F0 88D1                <1> 	mov	cl,dl
  1134 000006F2 86C4                <1> 	xchg	al,ah
  1135                              <1> 
  1136                              <1> 	; cl-ah-al : M-S-F
  1137                              <1> 
  1138 000006F4 8D5704              <1> 	lea	dx,[bx+4]
  1139 000006F7 E8D1FF              <1> 	call	cd_hextodecimal
  1140 000006FA EE                  <1> 	out	dx,al
  1141 000006FB 83EA02              <1> 	sub	dx,2
  1142 000006FE 88E0                <1> 	mov	al,ah
  1143 00000700 E8C8FF              <1> 	call	cd_hextodecimal
  1144 00000703 EE                  <1> 	out	dx,al
  1145 00000704 83EA02              <1> 	sub	dx,2
  1146 00000707 88C8                <1> 	mov	al,cl
  1147 00000709 E8BFFF              <1> 	call	cd_hextodecimal
  1148 0000070C EE                  <1> 	out	dx,al
  1149 0000070D 5A                  <1> 	pop	dx
  1150 0000070E 59                  <1> 	pop	cx
  1151 0000070F 5B                  <1> 	pop	bx
  1152 00000710 C3                  <1> 	ret
  1153                              <1> 
  1154                              <1> ;----------
  1155                              <1> 
  1156                              <1> cd_init_dma:
  1157                              <1> 	; リセット
  1158 00000711 B003                <1> 	mov	al,3
  1159 00000713 E6A0                <1> 	out	0a0h,al
  1160                              <1> 
  1161                              <1> 	; チャネルを CD にセット
  1162 00000715 B003                <1> 	mov	al,3
  1163 00000717 E6A1                <1> 	out	0a1h,al
  1164                              <1> 
  1165                              <1> 	; DMA動作禁止
  1166 00000719 B024                <1> 	mov	al,24h
  1167 0000071B E6A8                <1> 	out	0a8h,al
  1168                              <1> 
  1169                              <1> 	; デバイスコントロール
  1170 0000071D 30C0                <1> 	xor	al,al
  1171 0000071F E6A9                <1> 	out	0a9h,al
  1172                              <1> 
  1173                              <1> 	; モードコントロール
  1174 00000721 B054                <1> 	mov	al,54h
  1175 00000723 E6AA                <1> 	out	0aah,al
  1176 00000725 C3                  <1> 	ret
  1177                              <1> 
  1178                              <1> ;----------
  1179                              <1> 
  1180                              <1> cd_dma_setlength:
  1181 00000726 E7A2                <1> 	out	0a2h,ax
  1182 00000728 C3                  <1> 	ret
  1183                              <1> 
  1184                              <1> ;----------
  1185                              <1> 
  1186                              <1> cd_dma_setaddress:
  1187 00000729 E7A4                <1> 	out	0a4h,ax
  1188 0000072B 89D0                <1> 	mov	ax,dx
  1189 0000072D E7A6                <1> 	out	0a6h,ax
  1190 0000072F C3                  <1> 	ret
  1191                              <1> 
  1192                              <1> ;----------
  1193                              <1> 
  1194                              <1> cd_dma_getaddress:
  1195 00000730 E5A6                <1> 	in	ax,0a6h
  1196 00000732 89C2                <1> 	mov	dx,ax
  1197 00000734 E5A4                <1> 	in	ax,0a4h
  1198 00000736 C3                  <1> 	ret
  1199                              <1> 
  1200                              <1> ;----------
  1201                              <1> 
  1202                              <1> ; DMA転送を行う
  1203                              <1> cd_dma_transfer:
  1204 00000737 52                  <1> 	push	dx
  1205                              <1> 	; DMA動作許可
  1206 00000738 B020                <1> 	mov	al,20h
  1207 0000073A E6A8                <1> 	out	0a8h,al
  1208                              <1> 
  1209                              <1> 	; 転送開始
  1210 0000073C BAC604              <1> 	mov	dx,4c6h
  1211 0000073F B010                <1> 	mov	al,10h
  1212 00000741 EE                  <1> 	out	dx,al
  1213                              <1> 
  1214                              <1> 	; 転送が終わるまで待つ
  1215 00000742 BAC004              <1> 	mov	dx,4c0h
  1216                              <1> .loop:
  1217 00000745 EC                  <1> 	in	al,dx
  1218 00000746 A810                <1> 	test	al,10h
  1219 00000748 75FB                <1> 	jnz	.loop
  1220                              <1> 
  1221                              <1> 	; DMA動作禁止
  1222 0000074A B024                <1> 	mov	al,24h
  1223 0000074C E6A8                <1> 	out	0a8h,al
  1224 0000074E 5A                  <1> 	pop	dx
  1225 0000074F C3                  <1> 	ret
   816                                  %include "sys_fd.asm"
   817                              <1> ; version 2003.03.04.1
   818                              <1> ;---------------------------------------------------------------------
   819                              <1> ;
   820                              <1> ; FM TOWNS 互換 ROM シリーズ
   821                              <1> ;
   822                              <1> ; FMT_SYS.ROM : FDアクセス
   823                              <1> ;
   824                              <1> ; by Kasanova & CaptainYS
   825                              <1> ;
   826                              <1> ;---------------------------------------------------------------------
   827                              <1> ; ※単独ではアセンブルしません
   828                              <1> 
   829                              <1> ;---------------------------------------------------------------------
   830                              <1> ; 読み込み
   831                              <1> ; Corrected by CaptainYS >>
   832                              <1> ; al    : Device ID
   833                              <1> ; bx    : Number of Sectors
   834                              <1> ; cx    : Cylinder
   835                              <1> ; dh    : Head
   836                              <1> ; dl    : Sector
   837                              <1> ; ds:di : Buffer Address
   838                              <1> ; Corrected by CaptainYS <<
   839                              <1> ; [リターンコード]
   840                              <1> ;  ah : 0(正常終了)、bx : 読み残したセクタ数
   841                              <1> 
   842                              <1> fd_command_05:
   843                              <1> 	; by CaptainYS >>
   844                              <1> 	; ds:[si]=ax ds:[si+2]=dx
   845                              <1> 	; es:[di]=FLAGS es:[di+2]=bx es:[di+4]=cx es:[di+6]=bp es:[di+8]=si es:[di+10]=di es:[di+12]=ds es:[di+14]=es
   846                              <1> 	; Returned AH will be written to ds:[si+1] in disk_bios.
   847 00000750 26837D0200          <1> 	cmp		word es:[di+2],0	; bx
   848 00000755 7503                <1> 	jne		.non_zero_sector
   849 00000757 30E4                <1> 	xor		ah,ah
   850 00000759 C3                  <1> 	ret
   851                              <1> 
   852                              <1> .non_zero_sector:
   853 0000075A 6652                <1> 	push	edx
   854 0000075C 6650                <1> 	push	eax
   855                              <1> 
   856 0000075E E82D01              <1> 	call	fd_wait_ready
   857 00000761 08C0                <1> 	or		al,al
   858 00000763 0F88A800            <1> 	js		.fd_drive_not_ready
   859                              <1> 
   860 00000767 3E8A0C              <1> 	mov		cl,ds:[si]
   861 0000076A E8F300              <1> 	call	fd_select_drive_2hd
   862                              <1> 
   863 0000076D E81E01              <1> 	call	fd_wait_ready
   864 00000770 E80101              <1> 	call	fd_motor_on_select_side_2hd
   865                              <1> 
   866                              <1> 
   867 00000773 268B5D04            <1> 	mov		bx,es:[di+4]	; bx=cylinder
   868 00000777 3E8B4C02            <1> 	mov		cx,ds:[si+2]	; ch=head, cl=sector
   869                              <1> 
   870 0000077B 26660FB7550C        <1> 	movzx	edx,word es:[di+12]	; DS
   871 00000781 66C1E204            <1> 	shl		edx,4
   872 00000785 26660FB7450A        <1> 	movzx	eax,word es:[di+10]	; DI
   873 0000078B 6601C2              <1> 	add		edx,eax
   874                              <1> 
   875 0000078E FA                  <1> 	cli		; should be recovered when leaving the BIOS
   876                              <1> 
   877                              <1> .fd_sector_loop:
   878 0000078F 53                  <1> 	push	bx		; cylinder
   879 00000790 51                  <1> 	push	cx		; ch=head, cl=sector
   880 00000791 6652                <1> 	push	edx		; DMA addr
   881                              <1> 
   882 00000793 88EC                <1> 	mov		ah,ch
   883 00000795 E8F600              <1> 	call	fd_wait_ready
   884 00000798 E8D900              <1> 	call	fd_motor_on_select_side_2hd
   885                              <1> 
   886 0000079B E8F000              <1> 	call	fd_wait_ready
   887 0000079E 89D8                <1> 	mov		ax,bx
   888 000007A0 E8E000              <1> 	call	fd_seek
   889 000007A3 E8E800              <1> 	call	fd_wait_ready
   890 000007A6 A810                <1> 	test	al,010h
   891 000007A8 7572                <1> 	jne		.fd_seek_error
   892                              <1> 
   893 000007AA E81101              <1> 	call	fd_dma_initialize
   894 000007AD 665A                <1> 	pop		edx
   895 000007AF 6652                <1> 	push	edx
   896 000007B1 B80004              <1> 	mov		ax,SECTOR_LENGTH_1232KB_DISK
   897 000007B4 E8E000              <1> 	call	sys_setup_dma
   898                              <1> 
   899 000007B7 665A                <1> 	pop		edx
   900 000007B9 59                  <1> 	pop		cx
   901 000007BA 5B                  <1> 	pop		bx
   902                              <1> 
   903 000007BB 53                  <1> 	push	bx
   904 000007BC 51                  <1> 	push	cx
   905 000007BD 6652                <1> 	push	edx
   906                              <1> 
   907 000007BF 88D8                <1> 	mov		al,bl
   908 000007C1 BA0202              <1> 	mov		dx,IO_FDC_TRACK
   909 000007C4 EE                  <1> 	out		dx,al
   910 000007C5 88C8                <1> 	mov		al,cl
   911 000007C7 BA0402              <1> 	mov		dx,IO_FDC_SECTOR
   912 000007CA EE                  <1> 	out		dx,al
   913 000007CB B080                <1> 	mov		al,IO_FDC_CMD_READ_DATA
   914 000007CD BA0002              <1> 	mov		dx,IO_FDC_COMMAND
   915 000007D0 EE                  <1> 	out		dx,al
   916                              <1> 
   917 000007D1 E8BA00              <1> 	call	fd_wait_ready
   918 000007D4 A808                <1> 	test	al,08h	; CRC Error
   919 000007D6 7455                <1> 	je		.fd_crc_error
   920 000007D8 A810                <1> 	test	al,10h	; Record not found
   921 000007DA 7462                <1> 	je		.fd_record_not_found
   922 000007DC A804                <1> 	test	al,04h	; Lost data
   923 000007DE 746F                <1> 	je		.fd_lost_data
   924                              <1> 
   925 000007E0 665A                <1> 	pop		edx
   926 000007E2 59                  <1> 	pop		cx
   927 000007E3 5B                  <1> 	pop		bx
   928                              <1> 
   929 000007E4 6681C200040000      <1> 	add		edx,SECTOR_LENGTH_1232KB_DISK
   930                              <1> 
   931 000007EB FEC1                <1> 	inc		cl
   932 000007ED 80F908              <1> 	cmp		cl,SECTOR_PER_TRACK_1232KB_DISK
   933 000007F0 720A                <1> 	jb		.fd_sector_continue
   934                              <1> 
   935 000007F2 30C9                <1> 	xor		cl,cl
   936 000007F4 FEC5                <1> 	inc		ch
   937 000007F6 80E501              <1> 	and		ch,1
   938 000007F9 7501                <1> 	jne		.fd_sector_continue
   939                              <1> 
   940 000007FB 43                  <1> 	inc		bx
   941                              <1> 
   942                              <1> .fd_sector_continue:
   943 000007FC 26FF4D02            <1> 	dec		word es:[di+2]	;	bx
   944 00000800 758D                <1> 	jne		.fd_sector_loop
   945                              <1> 
   946                              <1> 	; IO.SYS apparently won't reset Highest Byte of the DMA address.
   947                              <1> 	; Make sure to clear when exit.
   948 00000802 30C0                <1> 	xor		al,al
   949 00000804 E6A7                <1> 	out		IO_DMA_ADDR_HIGH,AL
   950                              <1> 
   951                              <1> 
   952                              <1> .fd_trap:
   953 00000806 EBFE                <1> 	jmp		.fd_trap		; by CaptainYS
   954                              <1> 	; by CaptainYS <<
   955                              <1> 
   956 00000808 6658                <1> 	pop		eax
   957 0000080A 665A                <1> 	pop		edx
   958 0000080C 30E4                <1> 	xor		ah,ah
   959 0000080E C3                  <1> 	ret
   960                              <1> 
   961                              <1> .fd_drive_not_ready:
   962 0000080F 6658                <1> 	pop		eax
   963 00000811 665A                <1> 	pop		edx
   964 00000813 B480                <1> 	mov		ah,80h
   965 00000815 26C745040100        <1> 	mov		word es:[di+4],BIOSERR_DETAIL_DISK_DRIVE_NOT_READY
   966 0000081B C3                  <1> 	ret
   967                              <1> 
   968                              <1> .fd_seek_error:
   969 0000081C 5B                  <1> 	pop		bx
   970 0000081D 59                  <1> 	pop		cx
   971 0000081E 665A                <1> 	pop		edx
   972 00000820 6658                <1> 	pop		eax
   973 00000822 665A                <1> 	pop		edx
   974 00000824 B480                <1> 	mov		ah,80h
   975 00000826 26C745040000        <1> 	mov		word es:[di+4],BIOSERR_DETAIL_DISK_SEEK_ERROR
   976 0000082C C3                  <1> 	ret
   977                              <1> 
   978                              <1> .fd_crc_error:
   979 0000082D 5B                  <1> 	pop		bx
   980 0000082E 59                  <1> 	pop		cx
   981 0000082F 665A                <1> 	pop		edx
   982 00000831 6658                <1> 	pop		eax
   983 00000833 665A                <1> 	pop		edx
   984 00000835 B480                <1> 	mov		ah,80h
   985 00000837 26C745040800        <1> 	mov		word es:[di+4],BIOSERR_DETAIL_DISK_CRC_ERROR
   986 0000083D C3                  <1> 	ret
   987                              <1> 
   988                              <1> .fd_record_not_found:
   989 0000083E 5B                  <1> 	pop		bx
   990 0000083F 59                  <1> 	pop		cx
   991 00000840 665A                <1> 	pop		edx
   992 00000842 6658                <1> 	pop		eax
   993 00000844 665A                <1> 	pop		edx
   994 00000846 B480                <1> 	mov		ah,80h
   995 00000848 26C745041000        <1> 	mov		word es:[di+4],BIOSERR_DETAIL_DISK_RECORD_NOT_FOUND
   996 0000084E C3                  <1> 	ret
   997                              <1> 
   998                              <1> .fd_lost_data:
   999 0000084F 5B                  <1> 	pop		bx
  1000 00000850 59                  <1> 	pop		cx
  1001 00000851 665A                <1> 	pop		edx
  1002 00000853 6658                <1> 	pop		eax
  1003 00000855 665A                <1> 	pop		edx
  1004 00000857 B480                <1> 	mov		ah,80h
  1005 00000859 26C745044000        <1> 	mov		word es:[di+4],BIOSERR_DETAIL_DISK_LOST_DATA
  1006 0000085F C3                  <1> 	ret
  1007                              <1> 
  1008                              <1> 
  1009                              <1> ; by CaptainYS >>
  1010                              <1> ; Input
  1011                              <1> ;   CL=Drive (High 4-bits will be cleared)
  1012                              <1> fd_select_drive_2hd:
  1013 00000860 BA0C02              <1> 	mov		dx,IO_FDC_DRIVE_SELECT
  1014                              <1> 
  1015                              <1> 	; For booting, 1232KB disk support is good enough, I think.
  1016 00000863 B050                <1> 	mov		al,050h ; HISPD (360rpm 2HD)
  1017 00000865 EE                  <1> 	out		dx,al	; Clear drive selection once.
  1018                              <1> 
  1019 00000866 3E8A0C              <1> 	mov		cl,ds:[si]
  1020 00000869 80E10F              <1> 	and		cl,0fh	; Drive number
  1021 0000086C B001                <1> 	mov		al,1
  1022 0000086E D2E0                <1> 	shl		al,cl	; Set Drive Bit
  1023 00000870 0C50                <1> 	or		al,050h	; HISPD (360rpm 2HD)
  1024 00000872 EE                  <1> 	out		dx,al	; Drive selected, HISPD latched.
  1025                              <1> 
  1026 00000873 C3                  <1> 	ret
  1027                              <1> 
  1028                              <1> 
  1029                              <1> ; ah=side 0 or 1
  1030                              <1> fd_motor_on_select_side_2hd:
  1031 00000874 80E401              <1> 	and		ah,1
  1032 00000877 C0E402              <1> 	shl		ah,2
  1033 0000087A B012                <1> 	mov		al,012h ; 2MHz Clock, Motor On, DDEN, IRQ Off
  1034 0000087C 08E0                <1> 	or		al,ah
  1035 0000087E BA0802              <1> 	mov		dx,IO_FDC_DRIVE_CONTROL
  1036 00000881 EE                  <1> 	out		dx,al
  1037 00000882 C3                  <1> 	ret
  1038                              <1> 
  1039                              <1> 
  1040                              <1> ; Input
  1041                              <1> ;   AL=Cylinder
  1042                              <1> fd_seek:
  1043 00000883 BA0602              <1> 	mov		dx,IO_FDC_DATA
  1044 00000886 EE                  <1> 	out		dx,al
  1045 00000887 BA0002              <1> 	mov		dx,IO_FDC_COMMAND
  1046 0000088A B010                <1> 	mov		al,IO_FDC_CMD_SEEK
  1047 0000088C EE                  <1> 	out		dx,al
  1048 0000088D C3                  <1> 	ret
  1049                              <1> 
  1050                              <1> 
  1051                              <1> fd_wait_ready:
  1052 0000088E BA0002              <1> 	mov		dx,IO_FDC_STATUS
  1053 00000891 EC                  <1> 	in		al,dx
  1054 00000892 2401                <1> 	and		al,1
  1055 00000894 75F8                <1> 	jne		fd_wait_ready
  1056 00000896 C3                  <1> 	ret
  1057                              <1> 
  1058                              <1> 
  1059                              <1> ; Input
  1060                              <1> ;   EDX=Physical Address
  1061                              <1> ;   AX=Sector Length
  1062                              <1> sys_setup_dma:
  1063 00000897 6650                <1> 	PUSH	EAX
  1064 00000899 6689D0              <1> 	MOV		EAX,EDX
  1065 0000089C BAA400              <1> 	MOV		DX,IO_DMA_ADDR_LOW
  1066 0000089F EE                  <1> 	OUT		DX,AL
  1067                              <1> 
  1068 000008A0 66C1E808            <1> 	SHR		EAX,8
  1069 000008A4 42                  <1> 	INC		DX
  1070 000008A5 EE                  <1> 	OUT		DX,AL
  1071                              <1> 
  1072 000008A6 66C1E808            <1> 	SHR		EAX,8
  1073 000008AA 42                  <1> 	INC		DX
  1074 000008AB EE                  <1> 	OUT		DX,AL
  1075                              <1> 
  1076 000008AC 66C1E808            <1> 	SHR		EAX,8
  1077 000008B0 42                  <1> 	INC		DX
  1078 000008B1 EE                  <1> 	OUT		DX,AL
  1079                              <1> 
  1080 000008B2 6658                <1> 	POP		EAX
  1081                              <1> 
  1082 000008B4 BAA200              <1> 	MOV		DX,IO_DMA_COUNT_LOW
  1083 000008B7 EE                  <1> 	OUT		DX,AL
  1084                              <1> 
  1085 000008B8 C1E808              <1> 	SHR		AX,8
  1086 000008BB 42                  <1> 	INC		DX
  1087 000008BC EE                  <1> 	OUT		DX,AL
  1088                              <1> 
  1089 000008BD C3                  <1> 	RET
  1090                              <1> 
  1091                              <1> 
  1092                              <1> 
  1093                              <1> fd_dma_initialize:
  1094 000008BE B003                <1> 	MOV		AL,3	; Reset SCSI Controller
  1095 000008C0 E6A0                <1> 	OUT		IO_DMA_INITIALIZE,AL
  1096 000008C2 B000                <1> 	MOV		AL,DMA_CHANNEL_FDC
  1097 000008C4 E6A1                <1> 	OUT		IO_DMA_CHANNEL,AL
  1098 000008C6 B020                <1> 	MOV		AL,20H	; DMA enable
  1099 000008C8 E6A8                <1> 	OUT		IO_DMA_DEVICE_CTRL_LOW,AL
  1100 000008CA C3                  <1> 	RET
  1101                              <1> 
  1102                              <1> 
  1103                              <1> 
  1104                              <1> ; by CaptainYS <<
  1105                              <1> 
  1106                              <1> 
  1107                              <1> ;---------------------------------------------------------------------
  1108                              <1> ; ドライブの状態をチェック
  1109                              <1> 
  1110                              <1> fd_command_0e:
  1111 000008CB C3                  <1> 	ret
  1112                              <1> 
   817                                  %include "sys_hd.asm"
   818                              <1> ; version 2003.03.04.1
   819                              <1> ;---------------------------------------------------------------------
   820                              <1> ;
   821                              <1> ; FM TOWNS 互換 ROM シリーズ
   822                              <1> ;
   823                              <1> ; FMT_SYS.ROM : HDアクセス
   824                              <1> ;
   825                              <1> ; by Kasanova
   826                              <1> ;
   827                              <1> ;---------------------------------------------------------------------
   828                              <1> ; ※単独ではアセンブルしません
   829                              <1> 
   830                              <1> ; SCSIコントロールは面倒くさいので、HDアクセスはうんづに投げられる
   831                              <1> ; ようにする予定
   832                              <1> 
   833                              <1> ;---------------------------------------------------------------------
   834                              <1> ; 読み込み
   835                              <1> ; cl+dx : 読み込み開始セクタ番号(16進)
   836                              <1> ; bx    : 読み込むセクタ数
   837                              <1> ; ds:di : 転送先アドレス
   838                              <1> ; [リターンコード]
   839                              <1> ;  ah : 0(正常終了)、bx : 読み残したセクタ数
   840                              <1> 
   841                              <1> hd_command_05:
   842 000008CC C3                  <1> 	ret
   843                              <1> 
   844                              <1> ;---------------------------------------------------------------------
   845                              <1> ; ドライブの状態をチェック
   846                              <1> 
   847                              <1> hd_command_0e:
   848 000008CD C3                  <1> 	ret
   849                              <1> 
   818                                  %include "sys_osr.asm"
   819                              <1> ; version 2003.03.04.1
   820                              <1> ;---------------------------------------------------------------------
   821                              <1> ;
   822                              <1> ; FM TOWNS 互換 ROM シリーズ
   823                              <1> ;
   824                              <1> ; FMT_SYS.ROM : RAM/ROMドライブアクセス
   825                              <1> ;
   826                              <1> ; by Kasanova
   827                              <1> ;
   828                              <1> ;---------------------------------------------------------------------
   829                              <1> ; ※単独ではアセンブルしません
   830                              <1> 
   831                              <1> ;---------------------------------------------------------------------
   832                              <1> ;■備考■
   833                              <1> ; ・メディア番号 0x40 はRAMあるいはROMに振られたメディア番号である
   834                              <1> ; ・アクセス先の物理アドレスは、メディア番号の下位4ビットによって決まる
   835                              <1> ; ・将来的には386SX系のメモリマップも考慮すること
   836                              <1> ;
   837                              <1> ;   0: 00000000h- 7fffffffh
   838                              <1> ;   1: 無効
   839                              <1> ;   2: c2000000h- c207ffffh (書き込み禁止)
   840                              <1> ;   3: 無効
   841                              <1> ;   4: 無効
   842                              <1> ;   5: 無効
   843                              <1> ;   6: 無効
   844                              <1> ;   7: 00000000h- ffffffffh (BYTEアクセス)
   845                              <1> ;   8: 00000000h- ffffffffh (DWORDアクセス)
   846                              <1> ;   9: c2000000h- c207ffffh (書き込み禁止)
   847                              <1> ;   a: c0000000h- c007ffffh ICメモリ存在チェックあり
   848                              <1> ;   b: fffc0000h- ffffffffh (書き込み禁止)
   849                              <1> ;   c: 80000000h- 8007ffffh
   850                              <1> ;   d: 80100000h- 8017ffffh
   851                              <1> ;   e: c2140000h- c2141fffh
   852                              <1> ;   f: 無効
   853                              <1> ;
   854                              <1> ;---------------------------------------------------------------------
   855                              <1> 
   856                              <1> ;---------------------------------------------------------------------
   857                              <1> ; 読み込み＆書き込み
   858                              <1> 
   859                              <1> osrom_command_05:
   860                              <1> osrom_command_06:
   861 000008CE 8A04                <1> 	mov	al,[si]
   862 000008D0 240F                <1> 	and	al,0fh
   863                              <1> 
   864 000008D2 3C08                <1> 	cmp	al,8 ; とりあえず、これだけ対応
   865 000008D4 7402                <1> 	jz	.ok
   866 000008D6 EBFE                <1> 	jmp $
   867                              <1> .ok:
   868                              <1> 	; レジスタの上位16ビットを変更してはいけない
   869 000008D8 6660                <1> 	pushad
   870                              <1> 
   871 000008DA 6631D2              <1> 	xor	edx,edx
   872 000008DD 660FB7F6            <1> 	movzx	esi,si
   873 000008E1 8CDA                <1> 	mov	dx,ds
   874 000008E3 66C1E204            <1> 	shl	edx,4
   875 000008E7 6601D6              <1> 	add	esi,edx
   876                              <1> 
   877 000008EA 6631D2              <1> 	xor	edx,edx
   878 000008ED 660FB7FF            <1> 	movzx	edi,di
   879 000008F1 8CC2                <1> 	mov	dx,es
   880 000008F3 66C1E204            <1> 	shl	edx,4
   881 000008F7 6601D7              <1> 	add	edi,edx
   882                              <1> 
   883                              <1> 	; もう少しスマートな方法を考えましょう
   884 000008FA B80400              <1> 	mov	ax,PMODE_TRANSFERMEM
   885 000008FD 83EC06              <1> 	sub	sp,6
   886 00000900 89E5                <1> 	mov	bp,sp
   887 00000902 0F014600            <1> 	sgdt	[bp]
   888 00000906 55                  <1> 	push	bp
   889 00000907 E89AF8              <1> 	call	set_gdt
   890 0000090A E8DBF8              <1> 	call	call_pmode
   891 0000090D 5D                  <1> 	pop	bp
   892 0000090E 0F015600            <1> 	lgdt	[bp]
   893 00000912 83C406              <1> 	add	sp,6
   894                              <1> 
   895 00000915 6661                <1> 	popad
   896 00000917 C3                  <1> 	ret
   897                              <1> 
   898                              <1> 
   819                                  
   820                                  %include "sys_cmos.asm"
   821                              <1> ; version 2003.03.04.1
   822                              <1> ;---------------------------------------------------------------------
   823                              <1> ;
   824                              <1> ; FM TOWNS 互換 ROM シリーズ
   825                              <1> ;
   826                              <1> ; FMT_SYS.ROM : CMOS BIOS
   827                              <1> ;
   828                              <1> ; by Kasanova
   829                              <1> ;
   830                              <1> ;---------------------------------------------------------------------
   831                              <1> ; ※単独ではアセンブルしません
   832                              <1> 
   833                              <1> 
   834                              <1> ;---------------------------------------------------------------------
   835                              <1> 
   836                              <1> cmos_command_xx:
   837 00000918 EBFE                <1> 	jmp	$
   838                              <1> 
   839                              <1> ;---------------------------------------------------------------------
   840                              <1> 
   841                              <1> cmos_command_fd:
   842 0000091A EBFE                <1> 	jmp	$
   843                              <1> 
   844                              <1> ;---------------------------------------------------------------------
   845                              <1> 
   846                              <1> ; init. cmos
   847                              <1> cmos_command_00:
   848 0000091C 8CC8                <1> 	mov	ax,cs
   849 0000091E 8ED8                <1> 	mov	ds,ax
   850                              <1> 
   851                              <1> 	; まずクリア
   852 00000920 31D2                <1> 	xor	dx,dx
   853 00000922 30C0                <1> 	xor	al,al
   854 00000924 B9A800              <1> 	mov	cx,0a8h
   855                              <1> .loop1:
   856 00000927 E89001              <1> 	call	cmos_write1byte
   857 0000092A 42                  <1> 	inc	dx
   858 0000092B E2FA                <1> 	loop	.loop1
   859                              <1> 
   860                              <1> 	; 初期データ転送
   861 0000092D 31D2                <1> 	xor	dx,dx
   862 0000092F BE[8009]            <1> 	mov	si,.initdata
   863 00000932 B93C00              <1> 	mov	cx,.initdata_end-.initdata
   864                              <1> .loop2:
   865 00000935 AC                  <1> 	lodsb
   866 00000936 E88101              <1> 	call	cmos_write1byte
   867 00000939 42                  <1> 	inc	dx
   868 0000093A E2F9                <1> 	loop	.loop2
   869                              <1> 
   870 0000093C BAA000              <1> 	mov	dx,0a0h
   871 0000093F BE[BC09]            <1> 	mov	si,.initdata2
   872 00000942 B90800              <1> 	mov	cx,8
   873                              <1> .loop3:
   874 00000945 AC                  <1> 	lodsb
   875 00000946 E87101              <1> 	call	cmos_write1byte
   876 00000949 42                  <1> 	inc	dx
   877 0000094A E2F9                <1> 	loop	.loop3
   878                              <1> 
   879 0000094C BAA000              <1> 	mov	dx,0a0h
   880 0000094F E85601              <1> 	call	cmos_read2byte
   881 00000952 89C2                <1> 	mov	dx,ax
   882                              <1> .loop4:
   883 00000954 52                  <1> 	push	dx
   884 00000955 31C0                <1> 	xor	ax,ax
   885 00000957 E86001              <1> 	call	cmos_write1byte
   886 0000095A 5A                  <1> 	pop	dx
   887 0000095B 42                  <1> 	inc	dx
   888 0000095C 81FAC107            <1> 	cmp	dx,7c1h
   889 00000960 72F2                <1> 	jc	.loop4
   890                              <1> 
   891 00000962 E82C02              <1> 	call	cmos_init_blocknotable
   892                              <1> 
   893 00000965 E84902              <1> 	call	cmos_get_cmosheadersum
   894 00000968 BAA400              <1> 	mov	dx,0a4h
   895 0000096B E85501              <1> 	call	cmos_write2byte
   896                              <1> 
   897                              <1> 	; チェックサムテーブル初期化
   898 0000096E 31C0                <1> 	xor	ax,ax
   899 00000970 30C9                <1> 	xor	cl,cl
   900                              <1> .loop5:
   901 00000972 50                  <1> 	push	ax
   902 00000973 E86801              <1> 	call	cmos_write_3f82
   903 00000976 58                  <1> 	pop	ax
   904 00000977 FEC0                <1> 	inc	al
   905 00000979 3C10                <1> 	cmp	al,10h
   906 0000097B 72F5                <1> 	jc	.loop5
   907                              <1> 
   908 0000097D 30E4                <1> 	xor	ah,ah
   909 0000097F C3                  <1> 	ret
   910                              <1> 
   911                              <1> 	; cmos上のデータブロックを定義データ
   912                              <1> .initdata:
   913 00000980 01FF                <1> 	db	1,0ffh       ; ブロック存在フラグ＋ブロック番号？
   914 00000982 424F4F54            <1> 	db	'BOOT'       ; 識別子
   915 00000986 A8004000            <1> 	dw	00a8h, 0040h ; cmos上のアドレスとサイズ
   916                              <1> 
   917 0000098A 01FE                <1> 	db	1,0feh
   918 0000098C 53455455            <1> 	db	'SETU'
   919 00000990 E8000001            <1> 	dw	00e8h, 0100h
   920                              <1> 
   921 00000994 01FD                <1> 	db	1,0fdh
   922 00000996 4C4F4720            <1> 	db	'LOG '
   923 0000099A E8011003            <1> 	dw	01e8h, 0310h
   924                              <1> 	
   925 0000099E 01FC                <1> 	db	1,0fch
   926 000009A0 4F415359            <1> 	db	'OASY'
   927 000009A4 F8042000            <1> 	dw	04f8h, 0020h
   928                              <1> 
   929 000009A8 01FB                <1> 	db	1,0fbh
   930 000009AA 58454E49            <1> 	db	'XENI'
   931 000009AE 18051000            <1> 	dw	0518h, 0010h
   932                              <1> 
   933 000009B2 01FA                <1> 	db	1,0fah
   934 000009B4 544F574E            <1> 	db	'TOWN'
   935 000009B8 28050001            <1> 	dw	0528h, 0100h
   936                              <1> .initdata_end:
   937                              <1> 
   938                              <1> .initdata2:
   939 000009BC 2806990100007941    <1> 	db	28h,06h,99h,01h, 00h,00h,79h,41h
   940                              <1> 
   941                              <1> ;---------------------------------------------------------------------
   942                              <1> 
   943                              <1> cmos_command_01:
   944 000009C4 EBFE                <1> 	jmp	$
   945                              <1> 
   946                              <1> ;---------------------------------------------------------------------
   947                              <1> 
   948                              <1> cmos_command_02:
   949 000009C6 EBFE                <1> 	jmp	$
   950                              <1> 
   951                              <1> ;---------------------------------------------------------------------
   952                              <1> 
   953                              <1> cmos_command_03:
   954 000009C8 EBFE                <1> 	jmp	$
   955                              <1> 
   956                              <1> ;---------------------------------------------------------------------
   957                              <1> 
   958                              <1> cmos_command_04:
   959 000009CA EBFE                <1> 	jmp	$
   960                              <1> 
   961                              <1> ;---------------------------------------------------------------------
   962                              <1> 
   963                              <1> ; CMOSのa2h番地の情報をbxに返すだけ
   964                              <1> cmos_command_05:
   965 000009CC BAA200              <1> 	mov	dx,0a2h
   966 000009CF E8D600              <1> 	call	cmos_read2byte
   967 000009D2 894604              <1> 	mov	[bp+4],ax      ; bx
   968 000009D5 30E4                <1> 	xor	ah,ah
   969 000009D7 C3                  <1> 	ret
   970                              <1> 
   971                              <1> ;---------------------------------------------------------------------
   972                              <1> 
   973                              <1> cmos_command_06:
   974 000009D8 EBFE                <1> 	jmp	$
   975                              <1> 
   976                              <1> ;---------------------------------------------------------------------
   977                              <1> 
   978                              <1> ; transfer block to cmos
   979                              <1> cmos_command_10:
   980                              <1> 	; 範囲チェック
   981 000009DA 8A4E06              <1> 	mov	cl,[bp+6] ; cl
   982 000009DD 8A4602              <1> 	mov	al,[bp+2] ; al
   983 000009E0 E85901              <1> 	call	cmos_check_blockvalidity
   984 000009E3 08E4                <1> 	or	ah,ah
   985 000009E5 750B                <1> 	jnz	.exit1
   986 000009E7 E88401              <1> 	call	cmos_check_transferrange
   987 000009EA 08E4                <1> 	or	ah,ah
   988 000009EC 7504                <1> 	jnz	.exit1
   989                              <1> 
   990                              <1> 	; 転送量が 0 なら何もしない
   991 000009EE 09DB                <1> 	or	bx,bx
   992 000009F0 7501                <1> 	jnz	.starttransfer
   993                              <1> .exit1:
   994 000009F2 C3                  <1> 	ret
   995                              <1> 
   996                              <1> .starttransfer:
   997 000009F3 8B760E              <1> 	mov	si,[bp+0eh] ; di
   998 000009F6 8E5E10              <1> 	mov	ds,[bp+10h] ; ds
   999 000009F9 89D9                <1> 	mov	cx,bx
  1000                              <1> .loop:
  1001 000009FB AC                  <1> 	lodsb
  1002 000009FC E8BB00              <1> 	call	cmos_write1byte
  1003 000009FF 42                  <1> 	inc	dx
  1004 00000A00 E2F9                <1> 	loop	.loop
  1005                              <1> 
  1006 00000A02 0FB64602            <1> 	movzx	ax,byte [bp+2]
  1007 00000A06 89C2                <1> 	mov	dx,ax
  1008 00000A08 01D2                <1> 	add	dx,dx ; dx<-ax*10
  1009 00000A0A 01D2                <1> 	add	dx,dx
  1010 00000A0C 01D2                <1> 	add	dx,dx
  1011 00000A0E 01C2                <1> 	add	dx,ax
  1012 00000A10 01C2                <1> 	add	dx,ax
  1013 00000A12 E88C00              <1> 	call	cmos_read1byte
  1014 00000A15 08C0                <1> 	or	al,al
  1015 00000A17 790B                <1> 	jns	.exit2
  1016                              <1> 
  1017 00000A19 E8E300              <1> 	call	cmos_calc_checksum
  1018 00000A1C 88C1                <1> 	mov	cl,al
  1019 00000A1E 8A4602              <1> 	mov	al,[bp+2]
  1020 00000A21 E8BA00              <1> 	call	cmos_write_3f82
  1021                              <1> .exit2:
  1022 00000A24 30E4                <1> 	xor	ah,ah
  1023 00000A26 C3                  <1> 	ret
  1024                              <1> 
  1025                              <1> ;---------------------------------------------------------------------
  1026                              <1> 
  1027                              <1> ; transfer block from cmos
  1028                              <1> cmos_command_11:
  1029                              <1> 	; 範囲チェック
  1030 00000A27 8A4E06              <1> 	mov	cl,[bp+6] ; cl
  1031 00000A2A 8A4602              <1> 	mov	al,[bp+2] ; al
  1032 00000A2D E80C01              <1> 	call	cmos_check_blockvalidity
  1033 00000A30 08E4                <1> 	or	ah,ah
  1034 00000A32 750B                <1> 	jnz	.exit1
  1035 00000A34 E83701              <1> 	call	cmos_check_transferrange
  1036 00000A37 08E4                <1> 	or	ah,ah
  1037 00000A39 7504                <1> 	jnz	.exit1
  1038                              <1> 
  1039                              <1> 	; 転送量が 0 なら何もしない
  1040 00000A3B 09DB                <1> 	or	bx,bx
  1041 00000A3D 7501                <1> 	jnz	.starttransfer
  1042                              <1> .exit1:
  1043 00000A3F C3                  <1> 	ret
  1044                              <1> 
  1045                              <1> .starttransfer:
  1046 00000A40 8B7E0E              <1> 	mov	di,[bp+0eh] ; di
  1047 00000A43 8E4610              <1> 	mov	es,[bp+10h] ; ds
  1048 00000A46 89D9                <1> 	mov	cx,bx
  1049                              <1> .loop:
  1050 00000A48 E85600              <1> 	call	cmos_read1byte
  1051 00000A4B AA                  <1> 	stosb
  1052 00000A4C 42                  <1> 	inc	dx
  1053 00000A4D E2F9                <1> 	loop	.loop
  1054 00000A4F 30E4                <1> 	xor	ah,ah
  1055 00000A51 C3                  <1> 	ret
  1056                              <1> 
  1057                              <1> ;---------------------------------------------------------------------
  1058                              <1> ; cmosヘッダと各ブロックのチェック
  1059                              <1> ; out: ah != 0 : ヘッダ異常
  1060                              <1> ;      ah == 0 : ヘッダ正常、bxにチェックサムが合わなかった
  1061                              <1> ;                ブロックがビット単位でセットされる
  1062                              <1> cmos_command_20:
  1063 00000A52 BAA600              <1> 	mov	dx,0a6h
  1064 00000A55 E85000              <1> 	call	cmos_read2byte
  1065 00000A58 3D7941              <1> 	cmp	ax,4179h        ; ヘッダの識別子？値自体に意味があるか不明
  1066 00000A5B 7403                <1> 	jz	.next
  1067 00000A5D B403                <1> 	mov	ah,3
  1068 00000A5F C3                  <1> 	ret
  1069                              <1> .next:
  1070 00000A60 E84E01              <1> 	call	cmos_get_cmosheadersum
  1071 00000A63 89C3                <1> 	mov	bx,ax
  1072 00000A65 BAA400              <1> 	mov	dx,0a4h
  1073 00000A68 E83D00              <1> 	call	cmos_read2byte
  1074 00000A6B 39C3                <1> 	cmp	bx,ax
  1075 00000A6D B92000              <1> 	mov	cx,20h
  1076 00000A70 B480                <1> 	mov	ah,80h
  1077 00000A72 7503                <1> 	jnz	.j1
  1078 00000A74 E85001              <1> 	call	cmos_check_allblocks
  1079                              <1> .j1:
  1080 00000A77 895E04              <1> 	mov	[bp+4],bx ; bx
  1081 00000A7A C3                  <1> 	ret
  1082                              <1> 
  1083                              <1> ;---------------------------------------------------------------------
  1084                              <1> ; CMOS BIOS 下請け
  1085                              <1> 
  1086                              <1> ; CMOSアドレスをI/Oアドレスに変換
  1087                              <1> ; in dx:cmos address -> out dx:i/o address
  1088                              <1> cmos_getaddress:
  1089 00000A7B 81FAC007            <1> 	cmp	dx,7c0h
  1090 00000A7F 7709                <1> 	ja	.over
  1091                              <1> 
  1092 00000A81 01D2                <1> 	add	dx,dx
  1093 00000A83 81C20030            <1> 	add	dx,3000h
  1094 00000A87 31C0                <1> 	xor	ax,ax
  1095 00000A89 C3                  <1> 	ret
  1096                              <1> .over:
  1097 00000A8A 51                  <1> 	push	cx
  1098 00000A8B 81EAC107            <1> 	sub	dx,7c1h
  1099 00000A8F B90008              <1> 	mov	cx,800h
  1100 00000A92 89D0                <1> 	mov	ax,dx
  1101 00000A94 31D2                <1> 	xor	dx,dx
  1102 00000A96 F7F1                <1> 	div	cx
  1103 00000A98 40                  <1> 	inc	ax
  1104 00000A99 01D2                <1> 	add	dx,dx
  1105 00000A9B 81C20030            <1> 	add	dx,3000h
  1106 00000A9F 59                  <1> 	pop	cx
  1107 00000AA0 C3                  <1> 	ret
  1108                              <1> 
  1109                              <1> ;--------------------------------------
  1110                              <1> 
  1111                              <1> cmos_read1byte:
  1112 00000AA1 52                  <1> 	push	dx
  1113 00000AA2 E8D6FF              <1> 	call	cmos_getaddress
  1114 00000AA5 EC                  <1> 	in	al,dx
  1115 00000AA6 5A                  <1> 	pop	dx
  1116 00000AA7 C3                  <1> 	ret
  1117                              <1> 
  1118                              <1> ;--------------------------------------
  1119                              <1> 
  1120                              <1> cmos_read2byte:
  1121 00000AA8 51                  <1> 	push	cx
  1122 00000AA9 52                  <1> 	push	dx
  1123 00000AAA E8F4FF              <1> 	call	cmos_read1byte
  1124 00000AAD 88C1                <1> 	mov	cl,al
  1125 00000AAF 42                  <1> 	inc	dx
  1126 00000AB0 E8EEFF              <1> 	call	cmos_read1byte
  1127 00000AB3 88CC                <1> 	mov	ah,cl
  1128 00000AB5 86C4                <1> 	xchg	al,ah
  1129 00000AB7 5A                  <1> 	pop	dx
  1130 00000AB8 59                  <1> 	pop	cx
  1131 00000AB9 C3                  <1> 	ret
  1132                              <1> 
  1133                              <1> ;--------------------------------------
  1134                              <1> 
  1135                              <1> cmos_write1byte:
  1136 00000ABA 52                  <1> 	push	dx
  1137 00000ABB 50                  <1> 	push	ax
  1138 00000ABC E8BCFF              <1> 	call	cmos_getaddress
  1139 00000ABF 58                  <1> 	pop	ax
  1140 00000AC0 EE                  <1> 	out	dx,al
  1141 00000AC1 5A                  <1> 	pop	dx
  1142 00000AC2 C3                  <1> 	ret
  1143                              <1> 
  1144                              <1> ;--------------------------------------
  1145                              <1> 
  1146                              <1> cmos_write2byte:
  1147 00000AC3 52                  <1> 	push	dx
  1148 00000AC4 50                  <1> 	push	ax
  1149 00000AC5 E8F2FF              <1> 	call	cmos_write1byte
  1150 00000AC8 42                  <1> 	inc	dx
  1151 00000AC9 88E0                <1> 	mov	al,ah
  1152 00000ACB E8ECFF              <1> 	call	cmos_write1byte
  1153                              <1> 	
  1154 00000ACE 58                  <1> 	pop	ax
  1155 00000ACF 5A                  <1> 	pop	dx
  1156 00000AD0 C3                  <1> 	ret
  1157                              <1> 
  1158                              <1> ;--------------------------------------
  1159                              <1> ; チェックサムテーブル読み込み
  1160                              <1> 
  1161                              <1> cmos_read_3f82:
  1162 00000AD1 0FBED0              <1> 	movsx	dx,al
  1163 00000AD4 01D2                <1> 	add	dx,dx
  1164 00000AD6 81C2823F            <1> 	add	dx,3f82h
  1165 00000ADA EC                  <1> 	in	al,dx
  1166 00000ADB 88C1                <1> 	mov	cl,al
  1167 00000ADD C3                  <1> 	ret
  1168                              <1> 
  1169                              <1> ;--------------------------------------
  1170                              <1> ; チェックサムテーブル書き込み
  1171                              <1> 
  1172                              <1> cmos_write_3f82:
  1173 00000ADE 0FBED0              <1> 	movsx	dx,al
  1174 00000AE1 01D2                <1> 	add	dx,dx
  1175 00000AE3 81C2823F            <1> 	add	dx,3f82h
  1176 00000AE7 88C8                <1> 	mov	al,cl
  1177 00000AE9 EE                  <1> 	out	dx,al
  1178 00000AEA C3                  <1> 	ret
  1179                              <1> 
  1180                              <1> ;--------------------------------------
  1181                              <1> ; ブロック番号テーブル読み込み
  1182                              <1> 
  1183                              <1> cmos_read_3fa2:
  1184 00000AEB 52                  <1> 	push	dx
  1185 00000AEC 01D2                <1> 	add	dx,dx
  1186 00000AEE 81C2A23F            <1> 	add	dx,3fa2h
  1187 00000AF2 EC                  <1> 	in	al,dx
  1188 00000AF3 5A                  <1> 	pop	dx
  1189 00000AF4 C3                  <1> 	ret
  1190                              <1> 
  1191                              <1> ;--------------------------------------
  1192                              <1> ; ブロック番号テーブル書き込み
  1193                              <1> 
  1194                              <1> cmos_write_3fa2:
  1195 00000AF5 52                  <1> 	push	dx
  1196 00000AF6 01D2                <1> 	add	dx,dx
  1197 00000AF8 81C2A23F            <1> 	add	dx,3fa2h
  1198 00000AFC EE                  <1> 	out	dx,al
  1199 00000AFD 5A                  <1> 	pop	dx
  1200 00000AFE C3                  <1> 	ret
  1201                              <1> 
  1202                              <1> ;--------------------------------------
  1203                              <1> 
  1204                              <1> ; 指定されたcmosブロックのチェックサムを返す
  1205                              <1> ; in al: block no
  1206                              <1> cmos_calc_checksum:
  1207 00000AFF 53                  <1> 	push	bx
  1208 00000B00 E81000              <1> 	call	cmos_getaddlength
  1209 00000B03 30DB                <1> 	xor	bl,bl
  1210                              <1> .loop:
  1211 00000B05 E899FF              <1> 	call	cmos_read1byte
  1212 00000B08 00C3                <1> 	add	bl,al
  1213 00000B0A 42                  <1> 	inc	dx
  1214 00000B0B E2F8                <1> 	loop	.loop
  1215 00000B0D 31C0                <1> 	xor	ax,ax
  1216 00000B0F 28D8                <1> 	sub	al,bl
  1217 00000B11 5B                  <1> 	pop	bx
  1218 00000B12 C3                  <1> 	ret
  1219                              <1> 
  1220                              <1> ;--------------------------------------
  1221                              <1> 
  1222                              <1> ; 指定されたcmosブロックのアドレスと長さを返す
  1223                              <1> ; in : al: no
  1224                              <1> ; out: cx:length, dx:cmos address
  1225                              <1> cmos_getaddlength:
  1226 00000B13 30E4                <1> 	xor	ah,ah ; dx<-ax*10
  1227 00000B15 89C2                <1> 	mov	dx,ax
  1228 00000B17 01D2                <1> 	add	dx,dx
  1229 00000B19 01D2                <1> 	add	dx,dx
  1230 00000B1B 01D2                <1> 	add	dx,dx
  1231 00000B1D 01C2                <1> 	add	dx,ax
  1232 00000B1F 01C2                <1> 	add	dx,ax
  1233                              <1> 
  1234 00000B21 83C208              <1> 	add	dx,8
  1235 00000B24 E881FF              <1> 	call	cmos_read2byte
  1236 00000B27 89C1                <1> 	mov	cx,ax ; length
  1237                              <1> 
  1238 00000B29 83EA02              <1> 	sub	dx,2
  1239 00000B2C E879FF              <1> 	call	cmos_read2byte
  1240 00000B2F 89C2                <1> 	mov	dx,ax ; address
  1241 00000B31 C3                  <1> 	ret
  1242                              <1> 
  1243                              <1> ;--------------------------------------
  1244                              <1> 
  1245                              <1> cmos_check_blockrange:
  1246 00000B32 3C10                <1> 	cmp	al,10h
  1247 00000B34 7203                <1> 	jc	.j1
  1248 00000B36 B402                <1> 	mov	ah,2
  1249 00000B38 C3                  <1> 	ret
  1250                              <1> .j1:
  1251 00000B39 30E4                <1> 	xor	ah,ah
  1252 00000B3B C3                  <1> 	ret
  1253                              <1> 
  1254                              <1> ;--------------------------------------
  1255                              <1> 
  1256                              <1> ; ブロックの有効性をチェック
  1257                              <1> ; in: al, cl
  1258                              <1> cmos_check_blockvalidity:
  1259 00000B3C E8F3FF              <1> 	call	cmos_check_blockrange
  1260 00000B3F 08E4                <1> 	or	ah,ah
  1261 00000B41 7401                <1> 	jz	.j1
  1262 00000B43 C3                  <1> 	ret
  1263                              <1> .j1:
  1264 00000B44 30E4                <1> 	xor	ah,ah ; dx<-ax*10
  1265 00000B46 89C2                <1> 	mov	dx,ax
  1266 00000B48 01D2                <1> 	add	dx,dx
  1267 00000B4A 01D2                <1> 	add	dx,dx
  1268 00000B4C 01D2                <1> 	add	dx,dx
  1269 00000B4E 01C2                <1> 	add	dx,ax
  1270 00000B50 01C2                <1> 	add	dx,ax
  1271                              <1> 
  1272 00000B52 88CB                <1> 	mov	bl,cl
  1273 00000B54 52                  <1> 	push	dx
  1274 00000B55 E850FF              <1> 	call	cmos_read2byte
  1275                              <1> 	; ブロックが有効か？
  1276 00000B58 A801                <1> 	test	al,1
  1277 00000B5A 740B                <1> 	jz	.error
  1278                              <1> 
  1279 00000B5C B90800              <1> 	mov	cx,8
  1280 00000B5F 38DC                <1> 	cmp	ah,bl
  1281 00000B61 7504                <1> 	jnz	.error
  1282                              <1> 
  1283 00000B63 30E4                <1> 	xor	ah,ah
  1284 00000B65 5A                  <1> 	pop	dx
  1285 00000B66 C3                  <1> 	ret
  1286                              <1> .error:
  1287 00000B67 B94000              <1> 	mov	cx,40h
  1288 00000B6A B480                <1> 	mov	ah,80h
  1289 00000B6C 5A                  <1> 	pop	dx
  1290 00000B6D C3                  <1> 	ret
  1291                              <1> 
  1292                              <1> ;--------------------------------------
  1293                              <1> 
  1294                              <1> ; 転送範囲の有効性をチェック
  1295                              <1> cmos_check_transferrange:
  1296 00000B6E 8A4602              <1> 	mov	al,[bp+2] ; al
  1297 00000B71 E89FFF              <1> 	call	cmos_getaddlength
  1298 00000B74 8B7E08              <1> 	mov	di,[bp+8] ; dx
  1299 00000B77 037E04              <1> 	add	di,[bp+4] ; bx
  1300 00000B7A 720F                <1> 	jc	.error
  1301 00000B7C 39F9                <1> 	cmp	cx,di
  1302 00000B7E 720B                <1> 	jc	.error
  1303 00000B80 8B4608              <1> 	mov	ax,[bp+8] ; dx
  1304 00000B83 01C2                <1> 	add	dx,ax
  1305 00000B85 8B5E04              <1> 	mov	bx,[bp+4] ; bx
  1306 00000B88 30E4                <1> 	xor	ah,ah
  1307 00000B8A C3                  <1> 	ret
  1308                              <1> .error:
  1309 00000B8B B90400              <1> 	mov	cx,4
  1310 00000B8E B480                <1> 	mov	ah,80h
  1311 00000B90 C3                  <1> 	ret
  1312                              <1> 
  1313                              <1> ;--------------------------------------
  1314                              <1> 
  1315                              <1> ; ブロック番号テーブル初期化
  1316                              <1> cmos_init_blocknotable:
  1317 00000B91 BE[A10B]            <1> 	mov	si,.initdata
  1318 00000B94 31D2                <1> 	xor	dx,dx
  1319                              <1> .loop:
  1320 00000B96 AC                  <1> 	lodsb
  1321 00000B97 E85BFF              <1> 	call	cmos_write_3fa2
  1322 00000B9A 42                  <1> 	inc	dx
  1323 00000B9B 83FA10              <1> 	cmp	dx,10h
  1324 00000B9E 72F6                <1> 	jc	.loop
  1325 00000BA0 C3                  <1> 	ret
  1326                              <1> 
  1327                              <1> .initdata:
  1328 00000BA1 0001020304FFFFFF    <1> 	db	0,1,2,3,4, 255,255,255
  1329 00000BA9 FFFFFFFFFFFFFFFF    <1> 	db	255,255,255,255, 255,255,255,255
  1330                              <1> 
  1331                              <1> ;--------------------------------------
  1332                              <1> 
  1333                              <1> ; 0-a4までの値を加算した値を得る
  1334                              <1> cmos_get_cmosheadersum:
  1335 00000BB1 31D2                <1> 	xor	dx,dx
  1336 00000BB3 B95200              <1> 	mov	cx,52h
  1337 00000BB6 31DB                <1> 	xor	bx,bx
  1338                              <1> .loop:
  1339 00000BB8 51                  <1> 	push	cx
  1340 00000BB9 E8ECFE              <1> 	call	cmos_read2byte
  1341 00000BBC 59                  <1> 	pop	cx
  1342 00000BBD 01C3                <1> 	add	bx,ax
  1343 00000BBF 83C202              <1> 	add	dx,2
  1344 00000BC2 E2F4                <1> 	loop	.loop
  1345 00000BC4 89D8                <1> 	mov	ax,bx
  1346 00000BC6 C3                  <1> 	ret
  1347                              <1> 
  1348                              <1> ;--------------------------------------
  1349                              <1> 
  1350                              <1> ; 全ブロックをチェック
  1351                              <1> cmos_check_allblocks:
  1352 00000BC7 31C0                <1> 	xor	ax,ax
  1353 00000BC9 31FF                <1> 	xor	di,di
  1354 00000BCB 31F6                <1> 	xor	si,si
  1355                              <1> .loop:
  1356 00000BCD 89F2                <1> 	mov	dx,si
  1357 00000BCF 01D2                <1> 	add	dx,dx
  1358 00000BD1 01D2                <1> 	add	dx,dx
  1359 00000BD3 01D2                <1> 	add	dx,dx
  1360 00000BD5 01F2                <1> 	add	dx,si
  1361 00000BD7 01F2                <1> 	add	dx,si
  1362 00000BD9 E8C5FE              <1> 	call	cmos_read1byte
  1363 00000BDC 08C0                <1> 	or	al,al
  1364 00000BDE 7919                <1> 	jns	.next
  1365                              <1> 
  1366 00000BE0 89F0                <1> 	mov	ax,si
  1367 00000BE2 E8ECFE              <1> 	call	cmos_read_3f82
  1368 00000BE5 89F0                <1> 	mov	ax,si
  1369 00000BE7 51                  <1> 	push	cx
  1370 00000BE8 E814FF              <1> 	call	cmos_calc_checksum
  1371 00000BEB 59                  <1> 	pop	cx
  1372                              <1> 
  1373 00000BEC 38C8                <1> 	cmp	al,cl
  1374 00000BEE 7409                <1> 	jz	.next
  1375                              <1> 
  1376                              <1> 	; チェックサムエラーのあったブロックのbitをon
  1377 00000BF0 89F1                <1> 	mov	cx,si
  1378 00000BF2 B80100              <1> 	mov	ax,1
  1379 00000BF5 D3E0                <1> 	shl	ax,cl
  1380 00000BF7 09C7                <1> 	or	di,ax
  1381                              <1> .next:
  1382 00000BF9 46                  <1> 	inc	si
  1383 00000BFA 83FE10              <1> 	cmp	si,10h
  1384 00000BFD 72CE                <1> 	jc	.loop
  1385 00000BFF 89FB                <1> 	mov	bx,di
  1386 00000C01 30E4                <1> 	xor	ah,ah
  1387 00000C03 C3                  <1> 	ret
  1388                              <1> 
  1389                              <1> 
   821                                  
   822                                  %include "sys_p32.asm"
   823                              <1> ; version 2003.03.04.1
   824                              <1> ;---------------------------------------------------------------------
   825                              <1> ;
   826                              <1> ; FM TOWNS 互換 ROM シリーズ
   827                              <1> ;
   828                              <1> ; FMT_SYS.ROM : プロテクトモード・プロシジャ(EXT-BOOT部分に相当)
   829                              <1> ;
   830                              <1> ; by Kasanova
   831                              <1> ;
   832                              <1> ;---------------------------------------------------------------------
   833                              <1> ; ※単独ではアセンブルしません
   834                              <1> 
   835                              <1> ; コードが長くなってきたら、実機と同様に 0xFFFE0000-0xFFFE7FFF に
   836                              <1> ; 移してもいいかも
   837                              <1> 
   838                              <1> [BITS 32]
   839                              <1> pmode_entry:
   840 00000C04 0FB7E4              <1> 	movzx	esp,sp
   841 00000C07 89E5                <1> 	mov	ebp,esp
   842 00000C09 668CD0              <1> 	mov	ax,ss
   843 00000C0C 0FB7C0              <1> 	movzx	eax,ax
   844 00000C0F C1E004              <1> 	shl	eax,4
   845 00000C12 01C4                <1> 	add	esp,eax
   846                              <1> 
   847 00000C14 66B81000            <1> 	mov	ax,10h
   848 00000C18 8ED0                <1> 	mov	ss,ax
   849 00000C1A 8ED8                <1> 	mov	ds,ax
   850 00000C1C 8EC0                <1> 	mov	es,ax
   851                              <1> 
   852 00000C1E 55                  <1> 	push	ebp
   853 00000C1F 0FB6C3              <1> 	movzx	eax,bl
   854 00000C22 2EFF1485[4DCCFFFF]  <1> 	call	[cs:pmode_jmptable+BOOTCODE_BASE+eax*4]
   855 00000C2A 5D                  <1> 	pop	ebp
   856                              <1> 
   857 00000C2B 89EC                <1> 	mov	esp,ebp
   858 00000C2D 66B82000            <1> 	mov	ax,20h
   859 00000C31 8ED8                <1> 	mov	ds,ax
   860 00000C33 8EC0                <1> 	mov	es,ax
   861 00000C35 8ED0                <1> 	mov	ss,ax
   862                              <1> 
   863 00000C37 EA                  <1> 	db	0eah
   864 00000C38 [3E0C0000]          <1> 	dd	.flush
   865 00000C3C 1800                <1> 	dw	18h
   866                              <1> .flush:
   867                              <1> 
   868                              <1> [BITS 16]
   869 00000C3E 0F20C0              <1> 	mov	eax,cr0
   870 00000C41 24FE                <1> 	and	al,0xfe
   871 00000C43 0F22C0              <1> 	mov	cr0,eax
   872 00000C46 EB00                <1> 	jmp	short $+2
   873                              <1> 
   874 00000C48 EA                  <1> 	db	0eah
   875 00000C49 [0802]              <1> 	dw	return_from_pmode
   876 00000C4B 00FC                <1> 	dw	0fc00h
   877                              <1> 
   878                              <1> 
   879                              <1> pmode_jmptable:
   880 00000C4D [61CCFFFF]          <1> 	dd	BOOTCODE_BASE+ pm_puticon
   881 00000C51 [98CCFFFF]          <1> 	dd	BOOTCODE_BASE+ pm_memorycheck
   882 00000C55 [F5CCFFFF]          <1> 	dd	BOOTCODE_BASE+ pm_drawlogo
   883 00000C59 [51CDFFFF]          <1> 	dd	BOOTCODE_BASE+ pm_setpalette
   884 00000C5D [BBCDFFFF]          <1> 	dd	BOOTCODE_BASE+ pm_transfermemory
   885                              <1> 
   886                              <1> 
   887                              <1> [BITS 32]
   888                              <1> 
   889                              <1> ;---------------------------------------------------------------------
   890                              <1> ; 32x32アイコン表示
   891                              <1> ;
   892                              <1> ; cl = 0-127 : システムアイコン
   893                              <1> ; cl = 128-  : 起動用アイコン
   894                              <1> pm_puticon:
   895 00000C61 0FB6C9              <1> 	movzx	ecx,cl
   896 00000C64 80F980              <1> 	cmp	cl,128
   897 00000C67 7211                <1> 	jc	.sysicon
   898                              <1> 
   899                              <1> 	; 起動用アイコンの場合
   900 00000C69 81E980000000        <1> 	sub	ecx,128
   901 00000C6F C1E107              <1> 	shl	ecx,7
   902 00000C72 8DB100BCFFFF        <1> 	lea	esi,[0ffffbc00h+ecx]
   903 00000C78 EB09                <1> 	jmp	.draw
   904                              <1> 
   905                              <1> 	; システムアイコンの場合
   906                              <1> .sysicon:
   907 00000C7A C1E108              <1> 	shl	ecx,8
   908 00000C7D 8DB10080FEFF        <1> 	lea	esi,[0fffe8000h+ecx]
   909                              <1> .draw:
   910 00000C83 0FB7FA              <1> 	movzx	edi,dx
   911 00000C86 81C700000C00        <1> 	add	edi,0c0000h
   912 00000C8C B920000000          <1> 	mov	ecx,20h
   913                              <1> .loop:
   914 00000C91 A5                  <1> 	movsd
   915 00000C92 83C74C              <1> 	add	edi,VRAM_PITCH-4
   916 00000C95 E2FA                <1> 	loop	.loop
   917 00000C97 C3                  <1> 	ret
   918                              <1> 
   919                              <1> 
   920                              <1> ;---------------------------------------------------------------------
   921                              <1> ; メモリチェックとCMOSへの書き出し
   922                              <1> ;
   923                              <1> ; ※メモリカウントもここで行えるように、32ビットコードで書いてます
   924                              <1> pm_memorycheck:
   925                              <1> 	; 3150h-317ehは、メモリの実装状態を示すらしい
   926 00000C98 30C0                <1> 	xor	al,al
   927 00000C9A 66BA5031            <1> 	mov	dx,3150h
   928 00000C9E B918000000          <1> 	mov	ecx,30h/2
   929                              <1> .loop:
   930 00000CA3 EE                  <1> 	out	dx,al
   931 00000CA4 6683C202            <1> 	add	dx,2
   932 00000CA8 E2F9                <1> 	loop	.loop
   933                              <1> 
   934                              <1> 	; 5e8hは、うんづでは必ず利用可能
   935 00000CAA 66BAE805            <1> 	mov	dx,5e8h
   936                              <1> 
   937 00000CAE EC                  <1> 	in	al,dx
   938 00000CAF 247F                <1> 	and	al,7fh
   939 00000CB1 66BA5C3A            <1> 	mov	dx,3a5ch
   940 00000CB5 EE                  <1> 	out	dx,al
   941 00000CB6 0FB6C8              <1> 	movzx	ecx,al
   942                              <1> 
   943 00000CB9 B001                <1> 	mov	al,1
   944 00000CBB 66BA8631            <1> 	mov	dx,3186h
   945 00000CBF EE                  <1> 	out	dx,al
   946                              <1> 
   947 00000CC0 89C8                <1> 	mov	eax,ecx
   948 00000CC2 C1E004              <1> 	shl	eax,4
   949 00000CC5 48                  <1> 	dec	eax
   950 00000CC6 66BA8A31            <1> 	mov	dx,318ah
   951 00000CCA EE                  <1> 	out	dx,al
   952 00000CCB 6683EA02            <1> 	sub	dx,2
   953 00000CCF 88E0                <1> 	mov	al,ah
   954 00000CD1 EE                  <1> 	out	dx,al
   955                              <1> 
   956 00000CD2 49                  <1> 	dec	ecx
   957 00000CD3 7415                <1> 	jz	.zero ; メモリが1MBしかない！
   958                              <1> 
   959 00000CD5 B0FF                <1> 	mov	al,0ffh
   960 00000CD7 66BA5031            <1> 	mov	dx,3150h
   961                              <1> .loop2:
   962 00000CDB EE                  <1> 	out	dx,al
   963 00000CDC 49                  <1> 	dec	ecx
   964 00000CDD 740B                <1> 	jz	.zero
   965 00000CDF 6683C202            <1> 	add	dx,2
   966 00000CE3 6681FA8031          <1> 	cmp	dx,3180h
   967 00000CE8 72F1                <1> 	jc	.loop2
   968                              <1> .zero:
   969 00000CEA 66BAAC31            <1> 	mov	dx,31ach
   970 00000CEE EE                  <1> 	out	dx,al
   971 00000CEF 6683C202            <1> 	add	dx,2
   972 00000CF3 EE                  <1> 	out	dx,al
   973                              <1> 
   974                              <1> 	; TOWNS名物メモリカウントを入れるなら、ここ
   975                              <1> 
   976 00000CF4 C3                  <1> 	ret
   977                              <1> 
   978                              <1> 
   979                              <1> ;---------------------------------------------------------------------
   980                              <1> ; 起動ロゴ表示
   981                              <1> pm_drawlogo:
   982                              <1> 	; ds = es
   983 00000CF5 BE0080FFFF          <1> 	mov	esi,LOGO_ADDRESS
   984 00000CFA BFA0280C00          <1> 	mov	edi,0c0000h+VRAM_PITCH*130
   985 00000CFF 0FB71E              <1> 	movzx	ebx,word [esi] ; 水平ドット数
   986 00000D02 83C307              <1> 	add	ebx,7
   987 00000D05 C1EB03              <1> 	shr	ebx,3
   988 00000D08 B950000000          <1> 	mov	ecx,VRAM_PITCH ; 表示位置を画面中央へ
   989 00000D0D 29D9                <1> 	sub	ecx,ebx
   990 00000D0F D1E9                <1> 	shr	ecx,1
   991 00000D11 01CF                <1> 	add	edi,ecx
   992 00000D13 0FB74E02            <1> 	movzx	ecx,word [esi+2] ; 垂直ドット数
   993                              <1> 
   994 00000D17 83C604              <1> 	add	esi,4
   995                              <1> 
   996 00000D1A BA81FF0C00          <1> 	mov	edx,0cff81h
   997 00000D1F 8A02                <1> 	mov	al,[edx]
   998 00000D21 24CF                <1> 	and	al,0cfh
   999                              <1> .loop:
  1000 00000D23 51                  <1> 	push	ecx
  1001                              <1> 	; plane B
  1002 00000D24 57                  <1> 	push	edi
  1003 00000D25 89D9                <1> 	mov	ecx,ebx
  1004 00000D27 C60201              <1> 	mov	byte [edx],1
  1005 00000D2A F3A4                <1> 	rep movsb
  1006 00000D2C 5F                  <1> 	pop	edi
  1007                              <1> 
  1008                              <1> 	; plane R
  1009 00000D2D 57                  <1> 	push	edi
  1010 00000D2E 89D9                <1> 	mov	ecx,ebx
  1011 00000D30 C60202              <1> 	mov	byte [edx],2
  1012 00000D33 F3A4                <1> 	rep movsb
  1013 00000D35 5F                  <1> 	pop	edi
  1014                              <1> 
  1015                              <1> 	; plane G
  1016 00000D36 57                  <1> 	push	edi
  1017 00000D37 89D9                <1> 	mov	ecx,ebx
  1018 00000D39 C60204              <1> 	mov	byte [edx],4
  1019 00000D3C F3A4                <1> 	rep movsb
  1020 00000D3E 5F                  <1> 	pop	edi
  1021                              <1> 
  1022                              <1> %if(LOGO_USEPLANES==4)
  1023                              <1> 	; plane I
  1024 00000D3F 57                  <1> 	push	edi
  1025 00000D40 89D9                <1> 	mov	ecx,ebx
  1026 00000D42 C60208              <1> 	mov	byte [edx],8
  1027 00000D45 F3A4                <1> 	rep movsb
  1028 00000D47 5F                  <1> 	pop	edi
  1029                              <1> %endif
  1030                              <1> 
  1031 00000D48 8D7F50              <1> 	lea	edi,[edi+VRAM_PITCH]
  1032 00000D4B 59                  <1> 	pop	ecx
  1033 00000D4C E2D5                <1> 	loop	.loop
  1034                              <1> 
  1035 00000D4E 8802                <1> 	mov	[edx],al
  1036 00000D50 C3                  <1> 	ret
  1037                              <1> 
  1038                              <1> ;---------------------------------------------------------------------
  1039                              <1> ; パレット初期化
  1040                              <1> ;
  1041                              <1> ; ※リボンの絵のパレットが化けるので、デフォルト固定にしたほうがいい
  1042                              <1> ;   かもしれない・・・
  1043                              <1> 
  1044                              <1> pm_setpalette:
  1045 00000D51 BE80BBFFFF          <1> 	mov	esi,LOGO_PAL_ADDRESS
  1046 00000D56 833EFF              <1> 	cmp	dword [esi], 0ffffffffh ; うんづ特有のパレットがあるか？
  1047 00000D59 7505                <1> 	jnz	.palexist
  1048 00000D5B BE[8BCDFFFF]        <1> 	mov	esi,pm_def_palette+BOOTCODE_BASE
  1049                              <1> .palexist:
  1050 00000D60 B910000000          <1> 	mov	ecx,16
  1051                              <1> .loop:
  1052 00000D65 B010                <1> 	mov	al,16
  1053 00000D67 28C8                <1> 	sub	al,cl
  1054 00000D69 66BA90FD            <1> 	mov	dx,0fd90h
  1055 00000D6D EE                  <1> 	out	dx,al
  1056 00000D6E 8A06                <1> 	mov	al,[esi]
  1057 00000D70 6683C202            <1> 	add	dx,2
  1058 00000D74 EE                  <1> 	out	dx,al
  1059 00000D75 8A4601              <1> 	mov	al,[esi+1]
  1060 00000D78 6683C202            <1> 	add	dx,2
  1061 00000D7C EE                  <1> 	out	dx,al
  1062 00000D7D 8A4602              <1> 	mov	al,[esi+2]
  1063 00000D80 6683C202            <1> 	add	dx,2
  1064 00000D84 EE                  <1> 	out	dx,al
  1065 00000D85 83C603              <1> 	add	esi,3
  1066 00000D88 E2DB                <1> 	loop	.loop
  1067 00000D8A C3                  <1> 	ret
  1068                              <1> 
  1069                              <1> pm_def_palette: ; B  - R  - G      B  - R  - G
  1070 00000D8B 000000800000        <1> 	db	  0h,  0h,  0h,   80h,  0h,  0h
  1071 00000D91 008000808000        <1> 	db	  0h, 80h,  0h,   80h, 80h,  0h
  1072 00000D97 000080800080        <1> 	db	  0h,  0h, 80h,   80h,  0h, 80h
  1073 00000D9D 008080808080        <1> 	db	  0h, 80h, 80h,   80h, 80h, 80h
  1074                              <1> 
  1075 00000DA3 000000FF0000        <1> 	db	  0h,  0h,  0h,  0ffh,  0h,  0h
  1076 00000DA9 00FF00FFFF00        <1> 	db	  0h,0ffh,  0h,  0ffh,0ffh,  0h
  1077 00000DAF 0000FFFF00FF        <1> 	db	  0h,  0h,0ffh,  0ffh,  0h,0ffh
  1078 00000DB5 00FFFFFFFFFF        <1> 	db	  0h,0ffh,0ffh,  0ffh,0ffh,0ffh
  1079                              <1> 
  1080                              <1> 
  1081                              <1> ;---------------------------------------------------------------------
  1082                              <1> ; メモリ間転送(sys_osr.asmから呼ばれる)
  1083                              <1> pm_transfermemory:
  1084 00000DBB 0FB66E01            <1> 	movzx	ebp, byte [esi+1] ; ahの値。転送方向をこれで判定する
  1085                              <1> 
  1086 00000DBF 0FB75F04            <1> 	movzx	ebx,word [edi+4]
  1087 00000DC3 C1E310              <1> 	shl	ebx,16
  1088 00000DC6 668B5E02            <1> 	mov	bx,[esi+2]
  1089 00000DCA C1E30A              <1> 	shl	ebx,10           ; source
  1090                              <1> 
  1091 00000DCD 56                  <1> 	push	esi
  1092 00000DCE 57                  <1> 	push	edi
  1093                              <1> 
  1094 00000DCF 0FB7770C            <1> 	movzx	esi,word [edi+0ch]
  1095 00000DD3 C1E604              <1> 	shl	esi,4
  1096 00000DD6 0FB74F0A            <1> 	movzx	ecx,word [edi+0ah]
  1097 00000DDA 01CE                <1> 	add	esi,ecx          ; dest.
  1098                              <1> 
  1099 00000DDC B900040000          <1> 	mov	ecx,400h
  1100 00000DE1 0FB74702            <1> 	movzx	eax,word [edi+2] ; block count
  1101 00000DE5 F7E1                <1> 	mul	ecx
  1102 00000DE7 89C1                <1> 	mov	ecx,eax
  1103                              <1> 
  1104 00000DE9 89F7                <1> 	mov	edi,esi
  1105 00000DEB 89DE                <1> 	mov	esi,ebx
  1106                              <1> 
  1107 00000DED 83FD05              <1> 	cmp	ebp,5
  1108 00000DF0 7402                <1> 	jz	.noxchg
  1109 00000DF2 87F7                <1> 	xchg	esi,edi ; 書き込みコマンドなら転送元と転送先を入れ替える
  1110                              <1> .noxchg:
  1111                              <1> 
  1112                              <1> 	; 転送する際は、バイトアクセスのみ可能な領域を考慮すること
  1113 00000DF4 F3A4                <1> 	rep movsb
  1114                              <1> 
  1115 00000DF6 5F                  <1> 	pop	edi
  1116 00000DF7 5E                  <1> 	pop	esi
  1117 00000DF8 C3                  <1> 	ret
  1118                              <1> 
  1119                              <1> 
   823                                  
   824                                  %include "sys_print.asm" ; by CaptainYS
   825                              <1> ; By CaptainYS
   826                              <1> print_string:
   827 00000DF9 CB                  <1> 						RETF
   828                              <1> 
   825                                  
   826                                  ;---------------------------------------------------------------------
   827                                  ; ウェイト(うんづではあまり意味が無いので省略)
   828                                  
   829                                  waitloop:
   830 00000DFA CB                      	retf
   831                                  
   832                                  ;---------------------------------------------------------------------
   833                                  
   834                                  invalid1:
   835 00000DFB EBFE                    	jmp	invalid1
   836                                  
   837                                  invalid2:
   838 00000DFD EBFE                    	jmp	invalid2
   839                                  
   840                                  invalid3:
   841 00000DFF EBFE                    	jmp	invalid3
   842                                  
   843                                  invalid4:
   844 00000E01 EBFE                    	jmp	invalid4
   845                                  
   846                                  invalid5:
   847 00000E03 EBFE                    	jmp	invalid5
   848                                  
   849                                  
   850                                  ;---------------------------------------------------------------------
   851                                  
   852                                  	; CaptainYS >>
   853                                  	PLACE	03FB0h	; FC000+03FB0=FFFB0
   104 00000E05 00<rep 31ABh>       <1>  TIMES %1-($-$$) DB 0
   854                                  	; CaptainYS <<
   855                                  
   856                                  
   857                                  	JMPFAR invalid1 ; 診断エラー?
    64 00003FB0 EA                  <1>  db 0eah
    65 00003FB1 [FB0D]              <1>  dw %1
    66 00003FB3 00FC                <1>  dw 0fc00h
   858                                  	JMPFAR invalid2 ; 診断エラー?
    64 00003FB5 EA                  <1>  db 0eah
    65 00003FB6 [FD0D]              <1>  dw %1
    66 00003FB8 00FC                <1>  dw 0fc00h
   859                                  	JMPFAR invalid3 ; ?
    64 00003FBA EA                  <1>  db 0eah
    65 00003FBB [FF0D]              <1>  dw %1
    66 00003FBD 00FC                <1>  dw 0fc00h
   860                                  	JMPFAR invalid4 ; 文字列表示(未実装)
    64 00003FBF EA                  <1>  db 0eah
    65 00003FC0 [010E]              <1>  dw %1
    66 00003FC2 00FC                <1>  dw 0fc00h
   861                                  	JMPFAR disk_bios
    64 00003FC4 EA                  <1>  db 0eah
    65 00003FC5 [6403]              <1>  dw %1
    66 00003FC7 00FC                <1>  dw 0fc00h
   862                                  	JMPFAR cmos_bios
    64 00003FC9 EA                  <1>  db 0eah
    65 00003FCA [9404]              <1>  dw %1
    66 00003FCC 00FC                <1>  dw 0fc00h
   863                                  	JMPFAR print_string ; by CaptainYS
    64 00003FCE EA                  <1>  db 0eah
    65 00003FCF [F90D]              <1>  dw %1
    66 00003FD1 00FC                <1>  dw 0fc00h
   864                                  	JMPFAR waitloop
    64 00003FD3 EA                  <1>  db 0eah
    65 00003FD4 [FA0D]              <1>  dw %1
    66 00003FD6 00FC                <1>  dw 0fc00h
   865                                  
   866 00003FD8 000000000000000000-     	dd 0,0, 0,0,0,0
   866 00003FE1 000000000000000000-
   866 00003FEA 000000000000       
   867                                  
   868                                  	JMPFAR startall ; ここからすべてが始まる
    64 00003FF0 EA                  <1>  db 0eah
    65 00003FF1 [2000]              <1>  dw %1
    66 00003FF3 00FC                <1>  dw 0fc00h
   869                                  
   870                                  ; CaptainYS>>
   871 00003FF5 51                      	db 051h		; This byte will be transferred to IO.SYS's DS:0000, and then returned as Machine Id to DS:[DI] by INT AFH AH=05H.  MX->51h
   872 00003FF6 0000                    	db 0,0
   873 00003FF8 0000000000000000        	dd 0,0
   874                                  ; CaptainYS<<
