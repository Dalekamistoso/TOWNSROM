#include <fstream>
#include <iostream>
#include <vector>

// RGBA
unsigned char TownsDefaultPalette[64]=
{
0x00,0x00,0x00,0xff,
0x88,0x00,0x00,0xff,
0x00,0x00,0x88,0xff,
0x88,0x00,0x88,0xff,
0x00,0x88,0x00,0xff,
0x88,0x88,0x00,0xff,
0x00,0x88,0x88,0xff,
0x88,0x88,0x88,0xff,
0x44,0x44,0x44,0xff,
0xFF,0x00,0x00,0xff,
0x00,0x00,0xFF,0xff,
0xFF,0x00,0xFF,0xff,
0x00,0xFF,0x00,0xff,
0xFF,0xFF,0x00,0xff,
0x00,0xFF,0xFF,0xff,
0xFF,0xFF,0xFF,0xff,
};

int main(int ac,char *av[])
{
	if(ac!=2)
	{
		std::cout << "Usage: forceDefPalette bitmap.bmp" << std::endl;
		std::cout << "       16-color (4-bit) bitmap only." << std::endl;
		return 1;
	}
	std::ifstream fp(av[1],std::ios::binary);
	if(true!=fp.is_open())
	{
		std::cout << "Cannot open file." << std::endl;
		return 1;
	}

	fp.seekg(0,std::ios::end);
	auto fSize=fp.tellg();
	fp.seekg(0,std::ios::beg);
	std::cout << "Input " << fSize << " bytes." << std::endl;

	std::vector <unsigned char> buf;
	buf.resize(fSize);
	fp.read((char *)buf.data(),fSize);
	fp.close();

	for(int i=0; i<64 && 0x36+i<fSize; ++i)
	{
		buf[0x36+i]=TownsDefaultPalette[i];
	}

	std::ofstream ofp(av[1],std::ios::binary);
	ofp.write((char *)buf.data(),fSize);
	ofp.close();

	return 0;
}
