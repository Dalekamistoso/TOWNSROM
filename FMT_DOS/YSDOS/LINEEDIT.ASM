
LINP_GETC_PROC				EQU		0CH
LINP_DATA_BUFF				EQU		08H
LINP_DATA_BUFF_LEN			EQU		06H
LINP_FLAGS					EQU		04H
LINP_CURRENT_COUNT			EQU		(-02H)
LINP_CURRENT_CURSOR			EQU		(-04H)

LINP_FLAG_0D0A				EQU		1
LINP_FLAG_ECHO				EQU		2
LINP_FLAG_OVERWRITE			EQU		4
LINP_FLAG_RETURN_IF_FILLED	EQU		8

; Input
;   Stack
;   +00H     Flags:
;            b0  Add 0D 0A when ENTER key is pressed.
;            b1  Echo
;            b2  Overwrite or Insert (1 means overwrite)
;            Keep other bits zero.
;   +02H     Data Buffer Length
;   +04H     Data Buffer SEG:OFFSET
;   +08H     One-Char Input callback (AL must be the entered char code)  SEG:OFFSET
;   +0CH     (Will be history buffer.  Keep zero.)
; Output
;   CF     0: Normal  1: Error
;   AX     Number of bytes entered
;   Other registers won't be preserved.
LINE_INPUT:
							PUSH	BP
							MOV		BP,SP

							; [BP+12H] History buffer OFFSET
							; [BP+10H] History buffer SEG
							; [BP+0EH] One-Char Input callback OFFSET
							; [BP+0CH] One-Char Input callback SEG
							; [BP+0AH] Data Buffer OFFSET
							; [BP+08H] Data Buffer SEG
							; [BP+06H] Data Buffer Length
							; [BP+04H] Flags
							; [BP+02H] Return IP
							; [BP]     Prev BP
							; [BP-02H] Current Letter Count
							; [BP-04H] Current Cursor Position

							XOR		CX,CX
							PUSH	CX
							PUSH	CX

LINE_INPUT_LOOP:
							CALL	LINE_INPUT_ONE_STEP
							AND		AL,AL
							JE		LINE_INPUT_LOOP

							MOV		AX,[BP+LINP_CURRENT_COUNT]
							CLC
							MOV		SP,BP
							POP		BP
							RET


;Input
; [BP+12H] History buffer SEG
; [BP+10H] History buffer OFFSET
; [BP+0EH] One-Char Input callback SEG
; [BP+0CH] One-Char Input callback OFFSET
; [BP+0AH] Data Buffer SEG
; [BP+08H] Data Buffer OFFSET
; [BP+06H] Data Buffer Length
; [BP+04H] Flags
; [BP+02H] Return IP
; [BP]     Prev BP
; [BP-02H] Current Letter Count
; [BP-04H] Current Cursor Position

;Output
; AL   0:Continue Input   1:Buffer filled or Enter key is pressed
LINE_INPUT_ONE_STEP:
;							CALL	FAR [SS:BP+LINP_GETC_PROC]			; --USE_IN_NASM--
							CALL	DWORD PTR SS:[BP+LINP_GETC_PROC]	; --NOT_IN_NASM--

							CMP		AL,' '
							JAE		LINPUT_ONESTEP_PRINTABLE
							CMP		AL,0DH  ; If ENTER key, return.
							JE		LINPUT_ONESTEP_ENTER_KEY
							CMP		AL,ASCII_BACKSPACE  ; If ENTER key, return.
							JE		LINPUT_ONESTEP_BACKSPACE

LINPUT_CONTINUE:
							XOR		AL,AL
							RET
LINPUT_ONESTEP_OVER:
							MOV		AL,1
							RET

LINPUT_ONESTEP_PRINTABLE:
							TEST	WORD PTR [BP+LINP_FLAGS],LINP_FLAG_OVERWRITE
							JNE		LINPUT_ONESTEP_PRINTABLE_OVW

; INSERT MODE
							MOV		BX,[BP+LINP_CURRENT_COUNT]
							CMP		BX,[BP+LINP_DATA_BUFF_LEN]
							JAE		LINPUT_CONTINUE

							LDS		SI,[BP+LINP_DATA_BUFF]

LINPUT_INSERT_SHIFT:
							CMP		BX,[BP+LINP_CURRENT_CURSOR]
							JE		LINPUT_INSERT_SHIFT_DONE

							DEC		BX
							MOV		DL,DS:[SI+BX]
							MOV		DS:[SI+BX+1],DL
							JMP		LINPUT_INSERT_SHIFT

LINPUT_INSERT_SHIFT_DONE:
							MOV		DS:[SI+BX],AL
							INC		WORD PTR [BP+LINP_CURRENT_COUNT]
							INC		WORD PTR [BP+LINP_CURRENT_CURSOR]

							TEST	WORD PTR [BP+LINP_FLAGS],LINP_FLAG_ECHO
							JE		LINPUT_INSERT_NO_ECHO

LINPUT_INSERT_REPRINT:
							CMP		BX,[BP+LINP_CURRENT_COUNT]
							JE		LINPUT_INSERT_REPRINT_DONE

							PUSH	BP
							PUSH	DS
							PUSH	SI
							PUSH	BX
							MOV		AL,[SI+BX]
							CALL	PUTC
							POP		BX
							POP		SI
							POP		DS
							POP		BP
							INC		BX
							JMP		LINPUT_INSERT_REPRINT

LINPUT_INSERT_REPRINT_DONE:

LINPUT_INSERT_REWIND:
							CMP		BX,[BP+LINP_CURRENT_CURSOR]
							JE		LINPUT_INSERT_REWIND_DONE
							MOV		AL,ASCII_BACKSPACE
							PUSH	BX
							CALL	PUTC
							POP		BX
							DEC		BX
							JMP		LINPUT_INSERT_REWIND

LINPUT_INSERT_REWIND_DONE:
LINPUT_INSERT_NO_ECHO:

							TEST	WORD PTR [BP+LINP_FLAGS],LINP_FLAG_RETURN_IF_FILLED
							JE		LINPUT_CONTINUE

							MOV		BX,[BP+LINP_CURRENT_COUNT]
							CMP		BX,[BP+LINP_DATA_BUFF_LEN]
							JAE		LINPUT_ONESTEP_OVER
							JMP		LINPUT_CONTINUE



LINPUT_ONESTEP_PRINTABLE_OVW:
							JMP		LINPUT_CONTINUE



LINPUT_ONESTEP_ENTER_KEY:
							MOV		BX,[BP+LINP_CURRENT_COUNT]

							TEST	WORD PTR [BP+LINP_FLAGS],LINP_FLAG_0D0A
							JE		LINPUT_ONESTEP_ENTER_0D0A_DONE

							LDS		SI,[BP+LINP_DATA_BUFF]
							CMP		BX,[BP+LINP_DATA_BUFF_LEN]
							JAE		LINPUT_ONESTEP_ENTER_0D0A_DONE

							MOV		BYTE PTR [SI+BX],0DH
							INC		BX

							CMP		BX,[BP+LINP_DATA_BUFF_LEN]
							JAE		LINPUT_ONESTEP_ENTER_0D0A_DONE

							MOV		BYTE PTR [SI+BX],0AH
							INC		BX

LINPUT_ONESTEP_ENTER_0D0A_DONE:							
							MOV		[BP+LINP_CURRENT_COUNT],BX

							JMP		LINPUT_ONESTEP_OVER



LINPUT_ONESTEP_BACKSPACE:
							CMP		WORD PTR [BP+LINP_CURRENT_CURSOR],0
							JE		LINPUT_CONTINUE
							CMP		WORD PTR [BP+LINP_CURRENT_COUNT],0
							JE		LINPUT_CONTINUE

							DEC		WORD PTR [BP+LINP_CURRENT_CURSOR]
							DEC		WORD PTR [BP+LINP_CURRENT_COUNT]

							LDS		SI,[BP+LINP_DATA_BUFF]
							MOV		BX,[BP+LINP_CURRENT_CURSOR]

LINPUT_ONESTEP_BACKSPACE_SHIFT_LOOP:
							CMP		BX,[BP+LINP_CURRENT_COUNT]
							JAE		LINPUT_ONESTEP_BACKSPACE_SHIFT_DONE

							MOV		AL,[SI+BX+1]
							MOV		[SI+BX],AL
							INC		BX
							JMP		LINPUT_ONESTEP_BACKSPACE_SHIFT_LOOP

LINPUT_ONESTEP_BACKSPACE_SHIFT_DONE:
							TEST	WORD PTR [BP+LINP_FLAGS],LINP_FLAG_ECHO
							JE		LINPUT_CONTINUE

; REPRINT
							MOV		AL,ASCII_BACKSPACE
							CALL	PUTC

							MOV		BX,[BP+LINP_CURRENT_CURSOR]
LINPUT_ONESTEP_BACKSPACE_REPRINT_LOOP:
							CMP		BX,[BP+LINP_CURRENT_COUNT]
							JAE		LINPUT_ONESTEP_BACKSPACE_REPRINT_BREAK

							PUSH	BX
							LDS		SI,[BP+LINP_DATA_BUFF]
							MOV		AL,[SI+BX]
							CALL	PUTC
							POP		BX
							INC		BX
							JMP		LINPUT_ONESTEP_BACKSPACE_REPRINT_LOOP

LINPUT_ONESTEP_BACKSPACE_REPRINT_BREAK:
							MOV		AL,' '
							CALL	PUTC
							INC		BX

LINPUT_ONESTEP_BACKSPACE_REPRINT_REWIND:
							CMP		BX,[BP+LINP_CURRENT_CURSOR]
							JE		LINPUT_CONTINUE

							PUSH	BX
							MOV		AL,ASCII_BACKSPACE
							CALL	PUTC
							POP		BX
							DEC		BX
							JMP		LINPUT_ONESTEP_BACKSPACE_REPRINT_REWIND
